
Sensor_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004370  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004540  08004540  00005540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c0  080046c0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046c0  080046c0  000056c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c8  080046c8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046cc  080046cc  000056cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080046d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  0800472c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800472c  00006264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1ad  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a22  00000000  00000000  00011239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00012c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a1  00000000  00000000  00013620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217cb  00000000  00000000  00013dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d680  00000000  00000000  0003558c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf6e  00000000  00000000  00042c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010db7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd4  00000000  00000000  0010dbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00110994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004528 	.word	0x08004528

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004528 	.word	0x08004528

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <LSM6DS3_ReadID>:
 */


#include "lsm6ds3.h"

uint8_t LSM6DS3_ReadID(I2C_HandleTypeDef *hi2c) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af04      	add	r7, sp, #16
 80005f2:	6078      	str	r0, [r7, #4]
    uint8_t id;
    HAL_I2C_Mem_Read(hi2c, LSM6DS3_ADDR, 0X0F, I2C_MEMADD_SIZE_8BIT, &id, 1, HAL_MAX_DELAY);
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	f107 030f 	add.w	r3, r7, #15
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	220f      	movs	r2, #15
 8000608:	21d4      	movs	r1, #212	@ 0xd4
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f001 f9ae 	bl	800196c <HAL_I2C_Mem_Read>
    return id;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <LSM6DS3_Init>:

void LSM6DS3_Init(I2C_HandleTypeDef *hi2c) {
 800061a:	b580      	push	{r7, lr}
 800061c:	b088      	sub	sp, #32
 800061e:	af04      	add	r7, sp, #16
 8000620:	6078      	str	r0, [r7, #4]
    uint8_t data;

    // Enable accelerometer: 104 Hz, 2g, BW = 50 Hz
    data = 0x40;
 8000622:	2340      	movs	r3, #64	@ 0x40
 8000624:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, LSM6DS3_ADDR, LSM6DS3_CTRL1_XL, 1, &data, 1, HAL_MAX_DELAY);
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	2301      	movs	r3, #1
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	f107 030f 	add.w	r3, r7, #15
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	2210      	movs	r2, #16
 800063a:	21d4      	movs	r1, #212	@ 0xd4
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f001 f89b 	bl	8001778 <HAL_I2C_Mem_Write>

    // Enable gyroscope: 104 Hz, 245 dps
    data = 0x40;
 8000642:	2340      	movs	r3, #64	@ 0x40
 8000644:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, LSM6DS3_ADDR, LSM6DS3_CTRL2_G, 1, &data, 1, HAL_MAX_DELAY);
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	9302      	str	r3, [sp, #8]
 800064c:	2301      	movs	r3, #1
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	f107 030f 	add.w	r3, r7, #15
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	2211      	movs	r2, #17
 800065a:	21d4      	movs	r1, #212	@ 0xd4
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f001 f88b 	bl	8001778 <HAL_I2C_Mem_Write>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <LSM6DS3_ReadAccel>:

void LSM6DS3_ReadAccel(I2C_HandleTypeDef *hi2c, int16_t *ax, int16_t *ay, int16_t *az) {
 800066a:	b580      	push	{r7, lr}
 800066c:	b08a      	sub	sp, #40	@ 0x28
 800066e:	af04      	add	r7, sp, #16
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	603b      	str	r3, [r7, #0]
    uint8_t buffer[6];
    HAL_I2C_Mem_Read(hi2c, LSM6DS3_ADDR, LSM6DS3_OUTX_L_XL, 1, buffer, 6, HAL_MAX_DELAY);
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2306      	movs	r3, #6
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	2228      	movs	r2, #40	@ 0x28
 800068c:	21d4      	movs	r1, #212	@ 0xd4
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f001 f96c 	bl	800196c <HAL_I2C_Mem_Read>
    *ax = (int16_t)(buffer[1] << 8 | buffer[0]);
 8000694:	7c7b      	ldrb	r3, [r7, #17]
 8000696:	b21b      	sxth	r3, r3
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b21a      	sxth	r2, r3
 800069c:	7c3b      	ldrb	r3, [r7, #16]
 800069e:	b21b      	sxth	r3, r3
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(buffer[3] << 8 | buffer[2]);
 80006a8:	7cfb      	ldrb	r3, [r7, #19]
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	021b      	lsls	r3, r3, #8
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	7cbb      	ldrb	r3, [r7, #18]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(buffer[5] << 8 | buffer[4]);
 80006bc:	7d7b      	ldrb	r3, [r7, #21]
 80006be:	b21b      	sxth	r3, r3
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	7d3b      	ldrb	r3, [r7, #20]
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	801a      	strh	r2, [r3, #0]
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LSM6DS3_ReadGyro>:

void LSM6DS3_ReadGyro(I2C_HandleTypeDef *hi2c, int16_t *gx, int16_t *gy, int16_t *gz) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af04      	add	r7, sp, #16
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	603b      	str	r3, [r7, #0]
    uint8_t buffer[6];
    HAL_I2C_Mem_Read(hi2c, LSM6DS3_ADDR, LSM6DS3_OUTX_L_G, 1, buffer, 6, HAL_MAX_DELAY);
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	2306      	movs	r3, #6
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	2222      	movs	r2, #34	@ 0x22
 80006fa:	21d4      	movs	r1, #212	@ 0xd4
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f001 f935 	bl	800196c <HAL_I2C_Mem_Read>
    *gx = (int16_t)(buffer[1] << 8 | buffer[0]);
 8000702:	7c7b      	ldrb	r3, [r7, #17]
 8000704:	b21b      	sxth	r3, r3
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	b21a      	sxth	r2, r3
 800070a:	7c3b      	ldrb	r3, [r7, #16]
 800070c:	b21b      	sxth	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b21a      	sxth	r2, r3
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(buffer[3] << 8 | buffer[2]);
 8000716:	7cfb      	ldrb	r3, [r7, #19]
 8000718:	b21b      	sxth	r3, r3
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	7cbb      	ldrb	r3, [r7, #18]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21a      	sxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(buffer[5] << 8 | buffer[4]);
 800072a:	7d7b      	ldrb	r3, [r7, #21]
 800072c:	b21b      	sxth	r3, r3
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	7d3b      	ldrb	r3, [r7, #20]
 8000734:	b21b      	sxth	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b21a      	sxth	r2, r3
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	801a      	strh	r2, [r3, #0]
}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <I2C_Scan>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
static void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b09a      	sub	sp, #104	@ 0x68
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
    char buf[64];
    uint8_t found = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

    const char *hdr = "\r\n--- I2C scan start (7-bit addrs 0x01..0x7E) ---\r\n";
 8000756:	4b37      	ldr	r3, [pc, #220]	@ (8000834 <I2C_Scan+0xec>)
 8000758:	65bb      	str	r3, [r7, #88]	@ 0x58
    HAL_UART_Transmit(&huart2, (uint8_t*)hdr, strlen(hdr), HAL_MAX_DELAY);
 800075a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800075c:	f7ff fd58 	bl	8000210 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	b29a      	uxth	r2, r3
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800076a:	4833      	ldr	r0, [pc, #204]	@ (8000838 <I2C_Scan+0xf0>)
 800076c:	f002 fe4a 	bl	8003404 <HAL_UART_Transmit>

    for (uint8_t addr = 1; addr < 127; addr++) {
 8000770:	2301      	movs	r3, #1
 8000772:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8000776:	e031      	b.n	80007dc <I2C_Scan+0x94>
        HAL_StatusTypeDef res = HAL_I2C_IsDeviceReady(hi2c, (addr << 1), 2, 5);
 8000778:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800077c:	b29b      	uxth	r3, r3
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	b299      	uxth	r1, r3
 8000782:	2305      	movs	r3, #5
 8000784:	2202      	movs	r2, #2
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f001 fb22 	bl	8001dd0 <HAL_I2C_IsDeviceReady>
 800078c:	4603      	mov	r3, r0
 800078e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        if (res == HAL_OK) {
 8000792:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000796:	2b00      	cmp	r3, #0
 8000798:	d11b      	bne.n	80007d2 <I2C_Scan+0x8a>
            found++;
 800079a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800079e:	3301      	adds	r3, #1
 80007a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            int n = snprintf(buf, sizeof(buf),
 80007a4:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 80007a8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	f107 0008 	add.w	r0, r7, #8
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	4613      	mov	r3, r2
 80007b6:	4a21      	ldr	r2, [pc, #132]	@ (800083c <I2C_Scan+0xf4>)
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	f003 f9df 	bl	8003b7c <sniprintf>
 80007be:	64b8      	str	r0, [r7, #72]	@ 0x48
                             "✓ Found device at 7-bit 0x%02X  (HAL 8-bit 0x%02X)\r\n",
                             addr, (addr << 1));
            HAL_UART_Transmit(&huart2, (uint8_t*)buf, n, HAL_MAX_DELAY);
 80007c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f107 0108 	add.w	r1, r7, #8
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	481a      	ldr	r0, [pc, #104]	@ (8000838 <I2C_Scan+0xf0>)
 80007ce:	f002 fe19 	bl	8003404 <HAL_UART_Transmit>
    for (uint8_t addr = 1; addr < 127; addr++) {
 80007d2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80007d6:	3301      	adds	r3, #1
 80007d8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80007dc:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80007e0:	2b7e      	cmp	r3, #126	@ 0x7e
 80007e2:	d9c9      	bls.n	8000778 <I2C_Scan+0x30>
        }
    }

    if (!found) {
 80007e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d10d      	bne.n	8000808 <I2C_Scan+0xc0>
        const char *none = "No I2C devices found.\r\n";
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <I2C_Scan+0xf8>)
 80007ee:	653b      	str	r3, [r7, #80]	@ 0x50
        HAL_UART_Transmit(&huart2, (uint8_t*)none, strlen(none), HAL_MAX_DELAY);
 80007f0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80007f2:	f7ff fd0d 	bl	8000210 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000800:	480d      	ldr	r0, [pc, #52]	@ (8000838 <I2C_Scan+0xf0>)
 8000802:	f002 fdff 	bl	8003404 <HAL_UART_Transmit>
    } else {
        int n = snprintf(buf, sizeof(buf), "--- Scan done: %u device(s) ---\r\n", found);
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, n, HAL_MAX_DELAY);
    }
}
 8000806:	e011      	b.n	800082c <I2C_Scan+0xe4>
        int n = snprintf(buf, sizeof(buf), "--- Scan done: %u device(s) ---\r\n", found);
 8000808:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800080c:	f107 0008 	add.w	r0, r7, #8
 8000810:	4a0c      	ldr	r2, [pc, #48]	@ (8000844 <I2C_Scan+0xfc>)
 8000812:	2140      	movs	r1, #64	@ 0x40
 8000814:	f003 f9b2 	bl	8003b7c <sniprintf>
 8000818:	6578      	str	r0, [r7, #84]	@ 0x54
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, n, HAL_MAX_DELAY);
 800081a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800081c:	b29a      	uxth	r2, r3
 800081e:	f107 0108 	add.w	r1, r7, #8
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <I2C_Scan+0xf0>)
 8000828:	f002 fdec 	bl	8003404 <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3760      	adds	r7, #96	@ 0x60
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08004540 	.word	0x08004540
 8000838:	200000cc 	.word	0x200000cc
 800083c:	08004574 	.word	0x08004574
 8000840:	080045ac 	.word	0x080045ac
 8000844:	080045c4 	.word	0x080045c4

08000848 <main>:
int main(void) {
 8000848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084a:	b099      	sub	sp, #100	@ 0x64
 800084c:	af04      	add	r7, sp, #16
	HAL_Init();
 800084e:	f000 fb25 	bl	8000e9c <HAL_Init>
	SystemClock_Config();
 8000852:	f000 f87b 	bl	800094c <SystemClock_Config>
	MX_GPIO_Init();
 8000856:	f000 f953 	bl	8000b00 <MX_GPIO_Init>
	MX_I2C1_Init();
 800085a:	f000 f8e5 	bl	8000a28 <MX_I2C1_Init>
	MX_USART2_UART_Init(); // For printf via UART
 800085e:	f000 f925 	bl	8000aac <MX_USART2_UART_Init>
	I2C_Scan(&hi2c1);
 8000862:	4835      	ldr	r0, [pc, #212]	@ (8000938 <main+0xf0>)
 8000864:	f7ff ff70 	bl	8000748 <I2C_Scan>

	uint8_t id = LSM6DS3_ReadID(&hi2c1);
 8000868:	4833      	ldr	r0, [pc, #204]	@ (8000938 <main+0xf0>)
 800086a:	f7ff febf 	bl	80005ec <LSM6DS3_ReadID>
 800086e:	4603      	mov	r3, r0
 8000870:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	char msg[64];

	if (id == 0x6A) {
 8000874:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000878:	2b6a      	cmp	r3, #106	@ 0x6a
 800087a:	d108      	bne.n	800088e <main+0x46>
		sprintf(msg, "LSM6DS3 detected ✅ WHO_AM_I = 0x%02X\r\n", id);
 800087c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	492d      	ldr	r1, [pc, #180]	@ (800093c <main+0xf4>)
 8000886:	4618      	mov	r0, r3
 8000888:	f003 f9ae 	bl	8003be8 <siprintf>
 800088c:	e007      	b.n	800089e <main+0x56>
	} else {
		sprintf(msg, "LSM6DS3 not detected ❌ WHO_AM_I = 0x%02X\r\n", id);
 800088e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	492a      	ldr	r1, [pc, #168]	@ (8000940 <main+0xf8>)
 8000898:	4618      	mov	r0, r3
 800089a:	f003 f9a5 	bl	8003be8 <siprintf>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fcb4 	bl	8000210 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f107 010c 	add.w	r1, r7, #12
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	4823      	ldr	r0, [pc, #140]	@ (8000944 <main+0xfc>)
 80008b6:	f002 fda5 	bl	8003404 <HAL_UART_Transmit>

	LSM6DS3_Init(&hi2c1);
 80008ba:	481f      	ldr	r0, [pc, #124]	@ (8000938 <main+0xf0>)
 80008bc:	f7ff fead 	bl	800061a <LSM6DS3_Init>

	int16_t ax, ay, az, gx, gy, gz;

	while (1) {
		LSM6DS3_ReadAccel(&hi2c1, &ax, &ay, &az);
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	f107 0208 	add.w	r2, r7, #8
 80008c6:	f107 010a 	add.w	r1, r7, #10
 80008ca:	481b      	ldr	r0, [pc, #108]	@ (8000938 <main+0xf0>)
 80008cc:	f7ff fecd 	bl	800066a <LSM6DS3_ReadAccel>
		LSM6DS3_ReadGyro(&hi2c1, &gx, &gy, &gz);
 80008d0:	463b      	mov	r3, r7
 80008d2:	1cba      	adds	r2, r7, #2
 80008d4:	1d39      	adds	r1, r7, #4
 80008d6:	4818      	ldr	r0, [pc, #96]	@ (8000938 <main+0xf0>)
 80008d8:	f7ff fefe 	bl	80006d8 <LSM6DS3_ReadGyro>

		sprintf(msg, "Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d\r\n", ax, ay, az, gx, gy, gz);
 80008dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008e0:	461d      	mov	r5, r3
 80008e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80008e6:	461e      	mov	r6, r3
 80008e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008f0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80008f4:	f9b7 0000 	ldrsh.w	r0, [r7]
 80008f8:	4604      	mov	r4, r0
 80008fa:	f107 000c 	add.w	r0, r7, #12
 80008fe:	9403      	str	r4, [sp, #12]
 8000900:	9102      	str	r1, [sp, #8]
 8000902:	9201      	str	r2, [sp, #4]
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	4633      	mov	r3, r6
 8000908:	462a      	mov	r2, r5
 800090a:	490f      	ldr	r1, [pc, #60]	@ (8000948 <main+0x100>)
 800090c:	f003 f96c 	bl	8003be8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc7b 	bl	8000210 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f107 010c 	add.w	r1, r7, #12
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	4807      	ldr	r0, [pc, #28]	@ (8000944 <main+0xfc>)
 8000928:	f002 fd6c 	bl	8003404 <HAL_UART_Transmit>

		HAL_Delay(500);
 800092c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000930:	f000 fb26 	bl	8000f80 <HAL_Delay>
	while (1) {
 8000934:	bf00      	nop
 8000936:	e7c3      	b.n	80008c0 <main+0x78>
 8000938:	20000078 	.word	0x20000078
 800093c:	080045e8 	.word	0x080045e8
 8000940:	08004614 	.word	0x08004614
 8000944:	200000cc 	.word	0x200000cc
 8000948:	08004644 	.word	0x08004644

0800094c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	@ 0x50
 8000950:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2234      	movs	r2, #52	@ 0x34
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f003 f966 	bl	8003c2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <SystemClock_Config+0xd4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	4a29      	ldr	r2, [pc, #164]	@ (8000a20 <SystemClock_Config+0xd4>)
 800097a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000980:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <SystemClock_Config+0xd4>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800098c:	2300      	movs	r3, #0
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <SystemClock_Config+0xd8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000998:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <SystemClock_Config+0xd8>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <SystemClock_Config+0xd8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80009c0:	2310      	movs	r3, #16
 80009c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009c8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ca:	2304      	movs	r3, #4
 80009cc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fa24 	bl	8002e28 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80009e6:	f000 f8f9 	bl	8000bdc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2302      	movs	r3, #2
 80009f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2102      	movs	r1, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fec4 	bl	8002794 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000a12:	f000 f8e3 	bl	8000bdc <Error_Handler>
	}
}
 8000a16:	bf00      	nop
 8000a18:	3750      	adds	r7, #80	@ 0x50
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a32:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a36:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <MX_I2C1_Init+0x7c>)
 8000a38:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000a40:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a48:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_I2C1_Init+0x80>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa8 <MX_I2C1_Init+0x80>)
 8000a70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_I2C1_Init+0x80>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a82:	4806      	ldr	r0, [pc, #24]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a84:	f000 fd34 	bl	80014f0 <HAL_I2C_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C1_Init+0x6a>
	{
		Error_Handler();
 8000a8e:	f000 f8a5 	bl	8000bdc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000078 	.word	0x20000078
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	000186a0 	.word	0x000186a0
 8000aa8:	40023800 	.word	0x40023800

08000aac <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <MX_USART2_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f002 fc3e 	bl	8003364 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000aee:	f000 f875 	bl	8000bdc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000cc 	.word	0x200000cc
 8000afc:	40004400 	.word	0x40004400

08000b00 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a25      	ldr	r2, [pc, #148]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a17      	ldr	r2, [pc, #92]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2120      	movs	r1, #32
 8000b8a:	4812      	ldr	r0, [pc, #72]	@ (8000bd4 <MX_GPIO_Init+0xd4>)
 8000b8c:	f000 fc96 	bl	80014bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <MX_GPIO_Init+0xd8>)
 8000ba8:	f000 faf4 	bl	8001194 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000bac:	2320      	movs	r3, #32
 8000bae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_GPIO_Init+0xd4>)
 8000bc4:	f000 fae6 	bl	8001194 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020800 	.word	0x40020800

08000bdc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <Error_Handler+0x8>

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c26:	2007      	movs	r0, #7
 8000c28:	f000 fa80 	bl	800112c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	@ 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a19      	ldr	r2, [pc, #100]	@ (8000cbc <HAL_I2C_MspInit+0x84>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12c      	bne.n	8000cb4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a17      	ldr	r2, [pc, #92]	@ (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7c:	2312      	movs	r3, #18
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <HAL_I2C_MspInit+0x8c>)
 8000c94:	f000 fa7e 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000ca2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	@ 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <HAL_UART_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12b      	bne.n	8000d42 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d22:	230c      	movs	r3, #12
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d32:	2307      	movs	r3, #7
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <HAL_UART_MspInit+0x8c>)
 8000d3e:	f000 fa29 	bl	8001194 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	@ 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f8c7 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	@ (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	@ (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f002 ff28 	bl	8003c3c <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	@ (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20020000 	.word	0x20020000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	20000114 	.word	0x20000114
 8000e20:	20000268 	.word	0x20000268

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e4c:	f7ff ffea 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	@ (8000e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f002 fee7 	bl	8003c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fce5 	bl	8000848 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e8c:	080046d0 	.word	0x080046d0
  ldr r2, =_sbss
 8000e90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e94:	20000264 	.word	0x20000264

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	@ (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f931 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fe8a 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f93b 	bl	800117a <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f911 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000118 	.word	0x20000118

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000118 	.word	0x20000118

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	@ (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	@ (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	@ 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff47 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff5c 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffb0 	bl	80010e8 <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e165      	b.n	800147c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 8154 	bne.w	8001476 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d017      	beq.n	8001284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80ae 	beq.w	8001476 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b5d      	ldr	r3, [pc, #372]	@ (8001494 <HAL_GPIO_Init+0x300>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	4a5c      	ldr	r2, [pc, #368]	@ (8001494 <HAL_GPIO_Init+0x300>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001328:	6453      	str	r3, [r2, #68]	@ 0x44
 800132a:	4b5a      	ldr	r3, [pc, #360]	@ (8001494 <HAL_GPIO_Init+0x300>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a58      	ldr	r2, [pc, #352]	@ (8001498 <HAL_GPIO_Init+0x304>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4f      	ldr	r2, [pc, #316]	@ (800149c <HAL_GPIO_Init+0x308>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x21a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4e      	ldr	r2, [pc, #312]	@ (80014a0 <HAL_GPIO_Init+0x30c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x216>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4d      	ldr	r2, [pc, #308]	@ (80014a4 <HAL_GPIO_Init+0x310>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x212>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4c      	ldr	r2, [pc, #304]	@ (80014a8 <HAL_GPIO_Init+0x314>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x20e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4b      	ldr	r2, [pc, #300]	@ (80014ac <HAL_GPIO_Init+0x318>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x20a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4a      	ldr	r2, [pc, #296]	@ (80014b0 <HAL_GPIO_Init+0x31c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x206>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a49      	ldr	r2, [pc, #292]	@ (80014b4 <HAL_GPIO_Init+0x320>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x202>
 8001392:	2306      	movs	r3, #6
 8001394:	e00c      	b.n	80013b0 <HAL_GPIO_Init+0x21c>
 8001396:	2307      	movs	r3, #7
 8001398:	e00a      	b.n	80013b0 <HAL_GPIO_Init+0x21c>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x21c>
 800139e:	2304      	movs	r3, #4
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x21c>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x21c>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x21c>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x21c>
 80013ae:	2300      	movs	r3, #0
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c0:	4935      	ldr	r1, [pc, #212]	@ (8001498 <HAL_GPIO_Init+0x304>)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ce:	4b3a      	ldr	r3, [pc, #232]	@ (80014b8 <HAL_GPIO_Init+0x324>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f2:	4a31      	ldr	r2, [pc, #196]	@ (80014b8 <HAL_GPIO_Init+0x324>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f8:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <HAL_GPIO_Init+0x324>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800141c:	4a26      	ldr	r2, [pc, #152]	@ (80014b8 <HAL_GPIO_Init+0x324>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001422:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <HAL_GPIO_Init+0x324>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001446:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <HAL_GPIO_Init+0x324>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <HAL_GPIO_Init+0x324>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001470:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <HAL_GPIO_Init+0x324>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	f67f ae96 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3724      	adds	r7, #36	@ 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e12b      	b.n	800175a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fb8e 	bl	8000c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	@ 0x24
 8001520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001554:	f001 fa10 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a81      	ldr	r2, [pc, #516]	@ (8001764 <HAL_I2C_Init+0x274>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d807      	bhi.n	8001574 <HAL_I2C_Init+0x84>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a80      	ldr	r2, [pc, #512]	@ (8001768 <HAL_I2C_Init+0x278>)
 8001568:	4293      	cmp	r3, r2
 800156a:	bf94      	ite	ls
 800156c:	2301      	movls	r3, #1
 800156e:	2300      	movhi	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e006      	b.n	8001582 <HAL_I2C_Init+0x92>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a7d      	ldr	r2, [pc, #500]	@ (800176c <HAL_I2C_Init+0x27c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	bf94      	ite	ls
 800157c:	2301      	movls	r3, #1
 800157e:	2300      	movhi	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0e7      	b.n	800175a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a78      	ldr	r2, [pc, #480]	@ (8001770 <HAL_I2C_Init+0x280>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001764 <HAL_I2C_Init+0x274>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d802      	bhi.n	80015c4 <HAL_I2C_Init+0xd4>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	e009      	b.n	80015d8 <HAL_I2C_Init+0xe8>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	4a69      	ldr	r2, [pc, #420]	@ (8001774 <HAL_I2C_Init+0x284>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	3301      	adds	r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	495c      	ldr	r1, [pc, #368]	@ (8001764 <HAL_I2C_Init+0x274>)
 80015f4:	428b      	cmp	r3, r1
 80015f6:	d819      	bhi.n	800162c <HAL_I2C_Init+0x13c>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e59      	subs	r1, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fbb1 f3f3 	udiv	r3, r1, r3
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800160c:	400b      	ands	r3, r1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00a      	beq.n	8001628 <HAL_I2C_Init+0x138>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e59      	subs	r1, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001620:	3301      	adds	r3, #1
 8001622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001626:	e051      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 8001628:	2304      	movs	r3, #4
 800162a:	e04f      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d111      	bne.n	8001658 <HAL_I2C_Init+0x168>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	440b      	add	r3, r1
 8001642:	fbb0 f3f3 	udiv	r3, r0, r3
 8001646:	3301      	adds	r3, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	e012      	b.n	800167e <HAL_I2C_Init+0x18e>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	0099      	lsls	r1, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	fbb0 f3f3 	udiv	r3, r0, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Init+0x196>
 8001682:	2301      	movs	r3, #1
 8001684:	e022      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10e      	bne.n	80016ac <HAL_I2C_Init+0x1bc>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1e58      	subs	r0, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6859      	ldr	r1, [r3, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	440b      	add	r3, r1
 800169c:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016aa:	e00f      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e58      	subs	r0, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	0099      	lsls	r1, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	6809      	ldr	r1, [r1, #0]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69da      	ldr	r2, [r3, #28]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6911      	ldr	r1, [r2, #16]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68d2      	ldr	r2, [r2, #12]
 8001706:	4311      	orrs	r1, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	430b      	orrs	r3, r1
 800170e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2220      	movs	r2, #32
 8001746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	000186a0 	.word	0x000186a0
 8001768:	001e847f 	.word	0x001e847f
 800176c:	003d08ff 	.word	0x003d08ff
 8001770:	431bde83 	.word	0x431bde83
 8001774:	10624dd3 	.word	0x10624dd3

08001778 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	817b      	strh	r3, [r7, #10]
 800178a:	460b      	mov	r3, r1
 800178c:	813b      	strh	r3, [r7, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001792:	f7ff fbe9 	bl	8000f68 <HAL_GetTick>
 8001796:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	f040 80d9 	bne.w	8001958 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2319      	movs	r3, #25
 80017ac:	2201      	movs	r2, #1
 80017ae:	496d      	ldr	r1, [pc, #436]	@ (8001964 <HAL_I2C_Mem_Write+0x1ec>)
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 fdb9 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017bc:	2302      	movs	r3, #2
 80017be:	e0cc      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_I2C_Mem_Write+0x56>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0c5      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d007      	beq.n	80017f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2221      	movs	r2, #33	@ 0x21
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2240      	movs	r2, #64	@ 0x40
 8001810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182a:	b29a      	uxth	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a4d      	ldr	r2, [pc, #308]	@ (8001968 <HAL_I2C_Mem_Write+0x1f0>)
 8001834:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001836:	88f8      	ldrh	r0, [r7, #6]
 8001838:	893a      	ldrh	r2, [r7, #8]
 800183a:	8979      	ldrh	r1, [r7, #10]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4603      	mov	r3, r0
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 fbf0 	bl	800202c <I2C_RequestMemoryWrite>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d052      	beq.n	80018f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e081      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fe7e 	bl	800255c <I2C_WaitOnTXEFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2b04      	cmp	r3, #4
 800186c:	d107      	bne.n	800187e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06b      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d11b      	bne.n	80018f8 <HAL_I2C_Mem_Write+0x180>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d017      	beq.n	80018f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1aa      	bne.n	8001856 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fe71 	bl	80025ec <I2C_WaitOnBTFFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00d      	beq.n	800192c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	2b04      	cmp	r3, #4
 8001916:	d107      	bne.n	8001928 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001926:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e016      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800193a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2220      	movs	r2, #32
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e000      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001958:	2302      	movs	r3, #2
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	00100002 	.word	0x00100002
 8001968:	ffff0000 	.word	0xffff0000

0800196c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	460b      	mov	r3, r1
 8001980:	813b      	strh	r3, [r7, #8]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001986:	f7ff faef 	bl	8000f68 <HAL_GetTick>
 800198a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b20      	cmp	r3, #32
 8001996:	f040 8214 	bne.w	8001dc2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2319      	movs	r3, #25
 80019a0:	2201      	movs	r2, #1
 80019a2:	497b      	ldr	r1, [pc, #492]	@ (8001b90 <HAL_I2C_Mem_Read+0x224>)
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fcbf 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019b0:	2302      	movs	r3, #2
 80019b2:	e207      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_Mem_Read+0x56>
 80019be:	2302      	movs	r3, #2
 80019c0:	e200      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x458>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d007      	beq.n	80019e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2222      	movs	r2, #34	@ 0x22
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2240      	movs	r2, #64	@ 0x40
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4a5b      	ldr	r2, [pc, #364]	@ (8001b94 <HAL_I2C_Mem_Read+0x228>)
 8001a28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a2a:	88f8      	ldrh	r0, [r7, #6]
 8001a2c:	893a      	ldrh	r2, [r7, #8]
 8001a2e:	8979      	ldrh	r1, [r7, #10]
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4603      	mov	r3, r0
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fb8c 	bl	8002158 <I2C_RequestMemoryRead>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e1bc      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d113      	bne.n	8001a7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	623b      	str	r3, [r7, #32]
 8001a66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e190      	b.n	8001d9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d11b      	bne.n	8001aba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e170      	b.n	8001d9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d11b      	bne.n	8001afa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	e150      	b.n	8001d9c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b10:	e144      	b.n	8001d9c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	f200 80f1 	bhi.w	8001cfe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d123      	bne.n	8001b6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fda7 	bl	800267c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e145      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b6a:	e117      	b.n	8001d9c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d14e      	bne.n	8001c12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4906      	ldr	r1, [pc, #24]	@ (8001b98 <HAL_I2C_Mem_Read+0x22c>)
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fbd2 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d008      	beq.n	8001b9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e11a      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x458>
 8001b8e:	bf00      	nop
 8001b90:	00100002 	.word	0x00100002
 8001b94:	ffff0000 	.word	0xffff0000
 8001b98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c10:	e0c4      	b.n	8001d9c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c18:	2200      	movs	r2, #0
 8001c1a:	496c      	ldr	r1, [pc, #432]	@ (8001dcc <HAL_I2C_Mem_Read+0x460>)
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 fb83 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0cb      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c74:	2200      	movs	r2, #0
 8001c76:	4955      	ldr	r1, [pc, #340]	@ (8001dcc <HAL_I2C_Mem_Read+0x460>)
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fb55 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e09d      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cfc:	e04e      	b.n	8001d9c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fcba 	bl	800267c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e058      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d124      	bne.n	8001d9c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d107      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d68:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f47f aeb6 	bne.w	8001b12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3728      	adds	r7, #40	@ 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	00010004 	.word	0x00010004

08001dd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff f8c2 	bl	8000f68 <HAL_GetTick>
 8001de4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	f040 8111 	bne.w	800201a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2319      	movs	r3, #25
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4988      	ldr	r1, [pc, #544]	@ (8002024 <HAL_I2C_IsDeviceReady+0x254>)
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fa90 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e104      	b.n	800201c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_I2C_IsDeviceReady+0x50>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e0fd      	b.n	800201c <HAL_I2C_IsDeviceReady+0x24c>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d007      	beq.n	8001e46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2224      	movs	r2, #36	@ 0x24
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4a70      	ldr	r2, [pc, #448]	@ (8002028 <HAL_I2C_IsDeviceReady+0x258>)
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fa4e 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00d      	beq.n	8001eae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea0:	d103      	bne.n	8001eaa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0b6      	b.n	800201c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eae:	897b      	ldrh	r3, [r7, #10]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ebc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f853 	bl	8000f68 <HAL_GetTick>
 8001ec2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee8:	bf0c      	ite	eq
 8001eea:	2301      	moveq	r3, #1
 8001eec:	2300      	movne	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ef2:	e025      	b.n	8001f40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ef4:	f7ff f838 	bl	8000f68 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d302      	bcc.n	8001f0a <HAL_I2C_IsDeviceReady+0x13a>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	22a0      	movs	r2, #160	@ 0xa0
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f4a:	d005      	beq.n	8001f58 <HAL_I2C_IsDeviceReady+0x188>
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <HAL_I2C_IsDeviceReady+0x188>
 8001f52:	7dbb      	ldrb	r3, [r7, #22]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0cd      	beq.n	8001ef4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d129      	bne.n	8001fc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2319      	movs	r3, #25
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4921      	ldr	r1, [pc, #132]	@ (8002024 <HAL_I2C_IsDeviceReady+0x254>)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f9c2 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e036      	b.n	800201c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e02c      	b.n	800201c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2319      	movs	r3, #25
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	490f      	ldr	r1, [pc, #60]	@ (8002024 <HAL_I2C_IsDeviceReady+0x254>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f99e 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e012      	b.n	800201c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	f4ff af32 	bcc.w	8001e6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800201a:	2302      	movs	r3, #2
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	00100002 	.word	0x00100002
 8002028:	ffff0000 	.word	0xffff0000

0800202c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	4603      	mov	r3, r0
 800203c:	817b      	strh	r3, [r7, #10]
 800203e:	460b      	mov	r3, r1
 8002040:	813b      	strh	r3, [r7, #8]
 8002042:	4613      	mov	r3, r2
 8002044:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	2200      	movs	r2, #0
 800205e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f960 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00d      	beq.n	800208a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800207c:	d103      	bne.n	8002086 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002084:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e05f      	b.n	800214a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	492d      	ldr	r1, [pc, #180]	@ (8002154 <I2C_RequestMemoryWrite+0x128>)
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f9bb 	bl	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e04c      	b.n	800214a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fa46 	bl	800255c <I2C_WaitOnTXEFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d107      	bne.n	80020ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e02b      	b.n	800214a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020f8:	893b      	ldrh	r3, [r7, #8]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	e021      	b.n	8002148 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002104:	893b      	ldrh	r3, [r7, #8]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	b29b      	uxth	r3, r3
 800210a:	b2da      	uxtb	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa20 	bl	800255c <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	2b04      	cmp	r3, #4
 8002128:	d107      	bne.n	800213a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e005      	b.n	800214a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800213e:	893b      	ldrh	r3, [r7, #8]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	00010002 	.word	0x00010002

08002158 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4603      	mov	r3, r0
 8002168:	817b      	strh	r3, [r7, #10]
 800216a:	460b      	mov	r3, r1
 800216c:	813b      	strh	r3, [r7, #8]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002180:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	2200      	movs	r2, #0
 800219a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f8c2 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00d      	beq.n	80021c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021b8:	d103      	bne.n	80021c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0aa      	b.n	800231c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	6a3a      	ldr	r2, [r7, #32]
 80021da:	4952      	ldr	r1, [pc, #328]	@ (8002324 <I2C_RequestMemoryRead+0x1cc>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f91d 	bl	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e097      	b.n	800231c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002204:	6a39      	ldr	r1, [r7, #32]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f9a8 	bl	800255c <I2C_WaitOnTXEFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	2b04      	cmp	r3, #4
 8002218:	d107      	bne.n	800222a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e076      	b.n	800231c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002234:	893b      	ldrh	r3, [r7, #8]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	e021      	b.n	8002284 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002240:	893b      	ldrh	r3, [r7, #8]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	b29b      	uxth	r3, r3
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800224e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002250:	6a39      	ldr	r1, [r7, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f982 	bl	800255c <I2C_WaitOnTXEFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00d      	beq.n	800227a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	2b04      	cmp	r3, #4
 8002264:	d107      	bne.n	8002276 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e050      	b.n	800231c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800227a:	893b      	ldrh	r3, [r7, #8]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002286:	6a39      	ldr	r1, [r7, #32]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f967 	bl	800255c <I2C_WaitOnTXEFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00d      	beq.n	80022b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	2b04      	cmp	r3, #4
 800229a:	d107      	bne.n	80022ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e035      	b.n	800231c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f82b 	bl	8002328 <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00d      	beq.n	80022f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022e6:	d103      	bne.n	80022f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e013      	b.n	800231c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022f4:	897b      	ldrh	r3, [r7, #10]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	6a3a      	ldr	r2, [r7, #32]
 8002308:	4906      	ldr	r1, [pc, #24]	@ (8002324 <I2C_RequestMemoryRead+0x1cc>)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f886 	bl	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	00010002 	.word	0x00010002

08002328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002338:	e048      	b.n	80023cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d044      	beq.n	80023cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002342:	f7fe fe11 	bl	8000f68 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d302      	bcc.n	8002358 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d139      	bne.n	80023cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10d      	bne.n	800237e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	43da      	mvns	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4013      	ands	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	e00c      	b.n	8002398 <I2C_WaitOnFlagUntilTimeout+0x70>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	43da      	mvns	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4013      	ands	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	429a      	cmp	r2, r3
 800239c:	d116      	bne.n	80023cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e023      	b.n	8002414 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d10d      	bne.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	43da      	mvns	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	e00c      	b.n	800240c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	43da      	mvns	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4013      	ands	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	429a      	cmp	r2, r3
 8002410:	d093      	beq.n	800233a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800242a:	e071      	b.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800243a:	d123      	bne.n	8002484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800244a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002454:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e067      	b.n	8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d041      	beq.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248c:	f7fe fd6c 	bl	8000f68 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d302      	bcc.n	80024a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d136      	bne.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10c      	bne.n	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4013      	ands	r3, r2
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf14      	ite	ne
 80024be:	2301      	movne	r3, #1
 80024c0:	2300      	moveq	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	e00b      	b.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	43da      	mvns	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4013      	ands	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d016      	beq.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e021      	b.n	8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	0c1b      	lsrs	r3, r3, #16
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10c      	bne.n	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	43da      	mvns	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	4013      	ands	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e00b      	b.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4013      	ands	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	f47f af6d 	bne.w	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002568:	e034      	b.n	80025d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f8e3 	bl	8002736 <I2C_IsAcknowledgeFailed>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e034      	b.n	80025e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d028      	beq.n	80025d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002582:	f7fe fcf1 	bl	8000f68 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11d      	bne.n	80025d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a2:	2b80      	cmp	r3, #128	@ 0x80
 80025a4:	d016      	beq.n	80025d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e007      	b.n	80025e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025de:	2b80      	cmp	r3, #128	@ 0x80
 80025e0:	d1c3      	bne.n	800256a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025f8:	e034      	b.n	8002664 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f89b 	bl	8002736 <I2C_IsAcknowledgeFailed>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e034      	b.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d028      	beq.n	8002664 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7fe fca9 	bl	8000f68 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11d      	bne.n	8002664 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b04      	cmp	r3, #4
 8002634:	d016      	beq.n	8002664 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e007      	b.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b04      	cmp	r3, #4
 8002670:	d1c3      	bne.n	80025fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002688:	e049      	b.n	800271e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b10      	cmp	r3, #16
 8002696:	d119      	bne.n	80026cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0210 	mvn.w	r2, #16
 80026a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e030      	b.n	800272e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026cc:	f7fe fc4c 	bl	8000f68 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d302      	bcc.n	80026e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11d      	bne.n	800271e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ec:	2b40      	cmp	r3, #64	@ 0x40
 80026ee:	d016      	beq.n	800271e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e007      	b.n	800272e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002728:	2b40      	cmp	r3, #64	@ 0x40
 800272a:	d1ae      	bne.n	800268a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800274c:	d11b      	bne.n	8002786 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002756:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f043 0204 	orr.w	r2, r3, #4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0cc      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b68      	ldr	r3, [pc, #416]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d90c      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b65      	ldr	r3, [pc, #404]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a58      	ldr	r2, [pc, #352]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a52      	ldr	r2, [pc, #328]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800280a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d044      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d003      	beq.n	8002852 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284e:	2b03      	cmp	r3, #3
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3b      	ldr	r3, [pc, #236]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e067      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4934      	ldr	r1, [pc, #208]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe fb70 	bl	8000f68 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fb6c 	bl	8000f68 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e04f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b25      	ldr	r3, [pc, #148]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d20c      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b22      	ldr	r3, [pc, #136]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002906:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f855 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490a      	ldr	r1, [pc, #40]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fad0 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023c00 	.word	0x40023c00
 8002950:	40023800 	.word	0x40023800
 8002954:	08004674 	.word	0x08004674
 8002958:	20000000 	.word	0x20000000
 800295c:	20000004 	.word	0x20000004

08002960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b03      	ldr	r3, [pc, #12]	@ (8002974 <HAL_RCC_GetHCLKFreq+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000000 	.word	0x20000000

08002978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800297c:	f7ff fff0 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0a9b      	lsrs	r3, r3, #10
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK1Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	08004684 	.word	0x08004684

080029a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a4:	f7ff ffdc 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0b5b      	lsrs	r3, r3, #13
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	@ (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08004684 	.word	0x08004684

080029c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029cc:	b0ae      	sub	sp, #184	@ 0xb8
 80029ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ee:	4bcb      	ldr	r3, [pc, #812]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	f200 8206 	bhi.w	8002e08 <HAL_RCC_GetSysClockFreq+0x440>
 80029fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002a04 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a39 	.word	0x08002a39
 8002a08:	08002e09 	.word	0x08002e09
 8002a0c:	08002e09 	.word	0x08002e09
 8002a10:	08002e09 	.word	0x08002e09
 8002a14:	08002a41 	.word	0x08002a41
 8002a18:	08002e09 	.word	0x08002e09
 8002a1c:	08002e09 	.word	0x08002e09
 8002a20:	08002e09 	.word	0x08002e09
 8002a24:	08002a49 	.word	0x08002a49
 8002a28:	08002e09 	.word	0x08002e09
 8002a2c:	08002e09 	.word	0x08002e09
 8002a30:	08002e09 	.word	0x08002e09
 8002a34:	08002c39 	.word	0x08002c39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4bb9      	ldr	r3, [pc, #740]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a3e:	e1e7      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4bb8      	ldr	r3, [pc, #736]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a46:	e1e3      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a48:	4bb4      	ldr	r3, [pc, #720]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a54:	4bb1      	ldr	r3, [pc, #708]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d071      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a60:	4bae      	ldr	r3, [pc, #696]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a86:	4622      	mov	r2, r4
 8002a88:	462b      	mov	r3, r5
 8002a8a:	f04f 0000 	mov.w	r0, #0
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	0159      	lsls	r1, r3, #5
 8002a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a98:	0150      	lsls	r0, r2, #5
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	1a51      	subs	r1, r2, r1
 8002aa2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002ab8:	4649      	mov	r1, r9
 8002aba:	018b      	lsls	r3, r1, #6
 8002abc:	4641      	mov	r1, r8
 8002abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ac2:	4641      	mov	r1, r8
 8002ac4:	018a      	lsls	r2, r1, #6
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1a51      	subs	r1, r2, r1
 8002aca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002acc:	4649      	mov	r1, r9
 8002ace:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	00cb      	lsls	r3, r1, #3
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aea:	4641      	mov	r1, r8
 8002aec:	00ca      	lsls	r2, r1, #3
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	4622      	mov	r2, r4
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002afa:	462b      	mov	r3, r5
 8002afc:	460a      	mov	r2, r1
 8002afe:	eb42 0303 	adc.w	r3, r2, r3
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b10:	4629      	mov	r1, r5
 8002b12:	024b      	lsls	r3, r1, #9
 8002b14:	4621      	mov	r1, r4
 8002b16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	024a      	lsls	r2, r1, #9
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b34:	f7fd fbc4 	bl	80002c0 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b42:	e067      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b44:	4b75      	ldr	r3, [pc, #468]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b5e:	2300      	movs	r3, #0
 8002b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b66:	4622      	mov	r2, r4
 8002b68:	462b      	mov	r3, r5
 8002b6a:	f04f 0000 	mov.w	r0, #0
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	0159      	lsls	r1, r3, #5
 8002b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b78:	0150      	lsls	r0, r2, #5
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4621      	mov	r1, r4
 8002b80:	1a51      	subs	r1, r2, r1
 8002b82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b84:	4629      	mov	r1, r5
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002b98:	4649      	mov	r1, r9
 8002b9a:	018b      	lsls	r3, r1, #6
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	018a      	lsls	r2, r1, #6
 8002ba6:	4641      	mov	r1, r8
 8002ba8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bac:	4649      	mov	r1, r9
 8002bae:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc6:	4692      	mov	sl, r2
 8002bc8:	469b      	mov	fp, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	eb1a 0303 	adds.w	r3, sl, r3
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	462b      	mov	r3, r5
 8002bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002be6:	4629      	mov	r1, r5
 8002be8:	028b      	lsls	r3, r1, #10
 8002bea:	4621      	mov	r1, r4
 8002bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	028a      	lsls	r2, r1, #10
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c00:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c06:	f7fd fb5b 	bl	80002c0 <__aeabi_uldivmod>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4613      	mov	r3, r2
 8002c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c14:	4b41      	ldr	r3, [pc, #260]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c36:	e0eb      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c38:	4b38      	ldr	r3, [pc, #224]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c44:	4b35      	ldr	r3, [pc, #212]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d06b      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c50:	4b32      	ldr	r3, [pc, #200]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	2200      	movs	r2, #0
 8002c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c64:	2300      	movs	r3, #0
 8002c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	462b      	mov	r3, r5
 8002c70:	f04f 0000 	mov.w	r0, #0
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	0159      	lsls	r1, r3, #5
 8002c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7e:	0150      	lsls	r0, r2, #5
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4621      	mov	r1, r4
 8002c86:	1a51      	subs	r1, r2, r1
 8002c88:	61b9      	str	r1, [r7, #24]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c9e:	4659      	mov	r1, fp
 8002ca0:	018b      	lsls	r3, r1, #6
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca8:	4651      	mov	r1, sl
 8002caa:	018a      	lsls	r2, r1, #6
 8002cac:	4651      	mov	r1, sl
 8002cae:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb2:	4659      	mov	r1, fp
 8002cb4:	eb63 0901 	sbc.w	r9, r3, r1
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ccc:	4690      	mov	r8, r2
 8002cce:	4699      	mov	r9, r3
 8002cd0:	4623      	mov	r3, r4
 8002cd2:	eb18 0303 	adds.w	r3, r8, r3
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	462b      	mov	r3, r5
 8002cda:	eb49 0303 	adc.w	r3, r9, r3
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cec:	4629      	mov	r1, r5
 8002cee:	024b      	lsls	r3, r1, #9
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	024a      	lsls	r2, r1, #9
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d02:	2200      	movs	r2, #0
 8002d04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d06:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d0c:	f7fd fad8 	bl	80002c0 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4613      	mov	r3, r2
 8002d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d1a:	e065      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x420>
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d28:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	4611      	mov	r1, r2
 8002d34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d42:	4642      	mov	r2, r8
 8002d44:	464b      	mov	r3, r9
 8002d46:	f04f 0000 	mov.w	r0, #0
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	0159      	lsls	r1, r3, #5
 8002d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d54:	0150      	lsls	r0, r2, #5
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4641      	mov	r1, r8
 8002d5c:	1a51      	subs	r1, r2, r1
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	4649      	mov	r1, r9
 8002d62:	eb63 0301 	sbc.w	r3, r3, r1
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d74:	4659      	mov	r1, fp
 8002d76:	018b      	lsls	r3, r1, #6
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d7e:	4651      	mov	r1, sl
 8002d80:	018a      	lsls	r2, r1, #6
 8002d82:	4651      	mov	r1, sl
 8002d84:	1a54      	subs	r4, r2, r1
 8002d86:	4659      	mov	r1, fp
 8002d88:	eb63 0501 	sbc.w	r5, r3, r1
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	00eb      	lsls	r3, r5, #3
 8002d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9a:	00e2      	lsls	r2, r4, #3
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	461d      	mov	r5, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	18e3      	adds	r3, r4, r3
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	464b      	mov	r3, r9
 8002da8:	eb45 0303 	adc.w	r3, r5, r3
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	028b      	lsls	r3, r1, #10
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	028a      	lsls	r2, r1, #10
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dd4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002dd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dda:	f7fd fa71 	bl	80002c0 <__aeabi_uldivmod>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4613      	mov	r3, r2
 8002de4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0f1b      	lsrs	r3, r3, #28
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e06:	e003      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	37b8      	adds	r7, #184	@ 0xb8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	00f42400 	.word	0x00f42400

08002e28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e28d      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8083 	beq.w	8002f4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e48:	4b94      	ldr	r3, [pc, #592]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d019      	beq.n	8002e88 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e54:	4b91      	ldr	r3, [pc, #580]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e60:	4b8e      	ldr	r3, [pc, #568]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e6c:	d00c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6e:	4b8b      	ldr	r3, [pc, #556]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d112      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7a:	4b88      	ldr	r3, [pc, #544]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e86:	d10b      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	4b84      	ldr	r3, [pc, #528]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d05b      	beq.n	8002f4c <HAL_RCC_OscConfig+0x124>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d157      	bne.n	8002f4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e25a      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea8:	d106      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x90>
 8002eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7b      	ldr	r2, [pc, #492]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e01d      	b.n	8002ef4 <HAL_RCC_OscConfig+0xcc>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0xb4>
 8002ec2:	4b76      	ldr	r3, [pc, #472]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b73      	ldr	r3, [pc, #460]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a72      	ldr	r2, [pc, #456]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0xcc>
 8002edc:	4b6f      	ldr	r3, [pc, #444]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6b      	ldr	r2, [pc, #428]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe f834 	bl	8000f68 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe f830 	bl	8000f68 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	@ 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e21f      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	4b61      	ldr	r3, [pc, #388]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0xdc>
 8002f22:	e014      	b.n	8002f4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe f820 	bl	8000f68 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe f81c 	bl	8000f68 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	@ 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e20b      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	4b57      	ldr	r3, [pc, #348]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x104>
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d06f      	beq.n	800303a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f5a:	4b50      	ldr	r3, [pc, #320]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d017      	beq.n	8002f96 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f66:	4b4d      	ldr	r3, [pc, #308]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d105      	bne.n	8002f7e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f72:	4b4a      	ldr	r3, [pc, #296]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b47      	ldr	r3, [pc, #284]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8a:	4b44      	ldr	r3, [pc, #272]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b41      	ldr	r3, [pc, #260]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x186>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1d3      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4937      	ldr	r1, [pc, #220]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e03a      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b34      	ldr	r3, [pc, #208]	@ (80030a0 <HAL_RCC_OscConfig+0x278>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fd ffc9 	bl	8000f68 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fd ffc5 	bl	8000f68 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e1b4      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	4b2b      	ldr	r3, [pc, #172]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b28      	ldr	r3, [pc, #160]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4925      	ldr	r1, [pc, #148]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b24      	ldr	r3, [pc, #144]	@ (80030a0 <HAL_RCC_OscConfig+0x278>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fd ffa8 	bl	8000f68 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301c:	f7fd ffa4 	bl	8000f68 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e193      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d036      	beq.n	80030b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <HAL_RCC_OscConfig+0x27c>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fd ff88 	bl	8000f68 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305c:	f7fd ff84 	bl	8000f68 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e173      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x234>
 800307a:	e01b      	b.n	80030b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <HAL_RCC_OscConfig+0x27c>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7fd ff71 	bl	8000f68 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	e00e      	b.n	80030a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308a:	f7fd ff6d 	bl	8000f68 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d907      	bls.n	80030a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e15c      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
 800309c:	40023800 	.word	0x40023800
 80030a0:	42470000 	.word	0x42470000
 80030a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	4b8a      	ldr	r3, [pc, #552]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ea      	bne.n	800308a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8097 	beq.w	80031f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b83      	ldr	r3, [pc, #524]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	4b7f      	ldr	r3, [pc, #508]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	4a7e      	ldr	r2, [pc, #504]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e2:	4b7c      	ldr	r3, [pc, #496]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b79      	ldr	r3, [pc, #484]	@ (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d118      	bne.n	8003130 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4b76      	ldr	r3, [pc, #472]	@ (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	@ (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fd ff2d 	bl	8000f68 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fd ff29 	bl	8000f68 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e118      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b6c      	ldr	r3, [pc, #432]	@ (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x31e>
 8003138:	4b66      	ldr	r3, [pc, #408]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313c:	4a65      	ldr	r2, [pc, #404]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	@ 0x70
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x358>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b05      	cmp	r3, #5
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x340>
 800314e:	4b61      	ldr	r3, [pc, #388]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	4a60      	ldr	r2, [pc, #384]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6713      	str	r3, [r2, #112]	@ 0x70
 800315a:	4b5e      	ldr	r3, [pc, #376]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a5d      	ldr	r2, [pc, #372]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0x358>
 8003168:	4b5a      	ldr	r3, [pc, #360]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316c:	4a59      	ldr	r2, [pc, #356]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	@ 0x70
 8003174:	4b57      	ldr	r3, [pc, #348]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	4a56      	ldr	r2, [pc, #344]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fd feee 	bl	8000f68 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fd feea 	bl	8000f68 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0d7      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a6:	4b4b      	ldr	r3, [pc, #300]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ee      	beq.n	8003190 <HAL_RCC_OscConfig+0x368>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fd fed8 	bl	8000f68 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fd fed4 	bl	8000f68 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0c1      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d2:	4b40      	ldr	r3, [pc, #256]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ee      	bne.n	80031bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	4a3a      	ldr	r2, [pc, #232]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80ad 	beq.w	8003354 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031fa:	4b36      	ldr	r3, [pc, #216]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d060      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d145      	bne.n	800329a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b33      	ldr	r3, [pc, #204]	@ (80032dc <HAL_RCC_OscConfig+0x4b4>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fd fea8 	bl	8000f68 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321c:	f7fd fea4 	bl	8000f68 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e093      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	4b29      	ldr	r3, [pc, #164]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	019b      	lsls	r3, r3, #6
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	3b01      	subs	r3, #1
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	071b      	lsls	r3, r3, #28
 8003266:	491b      	ldr	r1, [pc, #108]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326c:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <HAL_RCC_OscConfig+0x4b4>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fd fe79 	bl	8000f68 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fd fe75 	bl	8000f68 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e064      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328c:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x452>
 8003298:	e05c      	b.n	8003354 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <HAL_RCC_OscConfig+0x4b4>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fd fe62 	bl	8000f68 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fd fe5e 	bl	8000f68 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04d      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x480>
 80032c6:	e045      	b.n	8003354 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e040      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000
 80032dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003360 <HAL_RCC_OscConfig+0x538>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d030      	beq.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d129      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d122      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003310:	4013      	ands	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003318:	4293      	cmp	r3, r2
 800331a:	d119      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	3b01      	subs	r3, #1
 800332a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d10f      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d107      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800

08003364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e042      	b.n	80033fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fc9c 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	@ 0x24
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f973 	bl	8003694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	@ 0x28
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b20      	cmp	r3, #32
 8003422:	d175      	bne.n	8003510 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_UART_Transmit+0x2c>
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e06e      	b.n	8003512 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2221      	movs	r2, #33	@ 0x21
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003442:	f7fd fd91 	bl	8000f68 <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	88fa      	ldrh	r2, [r7, #6]
 800344c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800345c:	d108      	bne.n	8003470 <HAL_UART_Transmit+0x6c>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	e003      	b.n	8003478 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003478:	e02e      	b.n	80034d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	2180      	movs	r1, #128	@ 0x80
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f848 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e03a      	b.n	8003512 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	3302      	adds	r3, #2
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	e007      	b.n	80034ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3301      	adds	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1cb      	bne.n	800347a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2200      	movs	r2, #0
 80034ea:	2140      	movs	r1, #64	@ 0x40
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f814 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e006      	b.n	8003512 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352a:	e03b      	b.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	d037      	beq.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003534:	f7fd fd18 	bl	8000f68 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	6a3a      	ldr	r2, [r7, #32]
 8003540:	429a      	cmp	r2, r3
 8003542:	d302      	bcc.n	800354a <UART_WaitOnFlagUntilTimeout+0x30>
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e03a      	b.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b80      	cmp	r3, #128	@ 0x80
 8003560:	d020      	beq.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d01d      	beq.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b08      	cmp	r3, #8
 8003574:	d116      	bne.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f81d 	bl	80035cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2208      	movs	r2, #8
 8003596:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e00f      	b.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d0b4      	beq.n	800352c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b095      	sub	sp, #84	@ 0x54
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
 80035f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e5      	bne.n	80035d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3314      	adds	r3, #20
 800360e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	e853 3f00 	ldrex	r3, [r3]
 8003616:	61fb      	str	r3, [r7, #28]
   return(result);
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3314      	adds	r3, #20
 8003626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800362a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800362e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003630:	e841 2300 	strex	r3, r2, [r1]
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e5      	bne.n	8003608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	2b01      	cmp	r3, #1
 8003642:	d119      	bne.n	8003678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	60bb      	str	r3, [r7, #8]
   return(result);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f023 0310 	bic.w	r3, r3, #16
 800365a:	647b      	str	r3, [r7, #68]	@ 0x44
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003664:	61ba      	str	r2, [r7, #24]
 8003666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6979      	ldr	r1, [r7, #20]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	613b      	str	r3, [r7, #16]
   return(result);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e5      	bne.n	8003644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003686:	bf00      	nop
 8003688:	3754      	adds	r7, #84	@ 0x54
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003698:	b0c0      	sub	sp, #256	@ 0x100
 800369a:	af00      	add	r7, sp, #0
 800369c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	68d9      	ldr	r1, [r3, #12]
 80036b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	ea40 0301 	orr.w	r3, r0, r1
 80036bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036ec:	f021 010c 	bic.w	r1, r1, #12
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036fa:	430b      	orrs	r3, r1
 80036fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370e:	6999      	ldr	r1, [r3, #24]
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	ea40 0301 	orr.w	r3, r0, r1
 800371a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	4b8f      	ldr	r3, [pc, #572]	@ (8003960 <UART_SetConfig+0x2cc>)
 8003724:	429a      	cmp	r2, r3
 8003726:	d005      	beq.n	8003734 <UART_SetConfig+0xa0>
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b8d      	ldr	r3, [pc, #564]	@ (8003964 <UART_SetConfig+0x2d0>)
 8003730:	429a      	cmp	r2, r3
 8003732:	d104      	bne.n	800373e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003734:	f7ff f934 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8003738:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800373c:	e003      	b.n	8003746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800373e:	f7ff f91b 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8003742:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003750:	f040 810c 	bne.w	800396c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003758:	2200      	movs	r2, #0
 800375a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800375e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003766:	4622      	mov	r2, r4
 8003768:	462b      	mov	r3, r5
 800376a:	1891      	adds	r1, r2, r2
 800376c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800376e:	415b      	adcs	r3, r3
 8003770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003776:	4621      	mov	r1, r4
 8003778:	eb12 0801 	adds.w	r8, r2, r1
 800377c:	4629      	mov	r1, r5
 800377e:	eb43 0901 	adc.w	r9, r3, r1
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800378e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003796:	4690      	mov	r8, r2
 8003798:	4699      	mov	r9, r3
 800379a:	4623      	mov	r3, r4
 800379c:	eb18 0303 	adds.w	r3, r8, r3
 80037a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037a4:	462b      	mov	r3, r5
 80037a6:	eb49 0303 	adc.w	r3, r9, r3
 80037aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037c2:	460b      	mov	r3, r1
 80037c4:	18db      	adds	r3, r3, r3
 80037c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037c8:	4613      	mov	r3, r2
 80037ca:	eb42 0303 	adc.w	r3, r2, r3
 80037ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80037d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037d8:	f7fc fd72 	bl	80002c0 <__aeabi_uldivmod>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4b61      	ldr	r3, [pc, #388]	@ (8003968 <UART_SetConfig+0x2d4>)
 80037e2:	fba3 2302 	umull	r2, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	011c      	lsls	r4, r3, #4
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	1891      	adds	r1, r2, r2
 8003802:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003804:	415b      	adcs	r3, r3
 8003806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800380c:	4641      	mov	r1, r8
 800380e:	eb12 0a01 	adds.w	sl, r2, r1
 8003812:	4649      	mov	r1, r9
 8003814:	eb43 0b01 	adc.w	fp, r3, r1
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800382c:	4692      	mov	sl, r2
 800382e:	469b      	mov	fp, r3
 8003830:	4643      	mov	r3, r8
 8003832:	eb1a 0303 	adds.w	r3, sl, r3
 8003836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800383a:	464b      	mov	r3, r9
 800383c:	eb4b 0303 	adc.w	r3, fp, r3
 8003840:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003850:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003858:	460b      	mov	r3, r1
 800385a:	18db      	adds	r3, r3, r3
 800385c:	643b      	str	r3, [r7, #64]	@ 0x40
 800385e:	4613      	mov	r3, r2
 8003860:	eb42 0303 	adc.w	r3, r2, r3
 8003864:	647b      	str	r3, [r7, #68]	@ 0x44
 8003866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800386a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800386e:	f7fc fd27 	bl	80002c0 <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4611      	mov	r1, r2
 8003878:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <UART_SetConfig+0x2d4>)
 800387a:	fba3 2301 	umull	r2, r3, r3, r1
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2264      	movs	r2, #100	@ 0x64
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	1acb      	subs	r3, r1, r3
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800388e:	4b36      	ldr	r3, [pc, #216]	@ (8003968 <UART_SetConfig+0x2d4>)
 8003890:	fba3 2302 	umull	r2, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800389c:	441c      	add	r4, r3
 800389e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038b0:	4642      	mov	r2, r8
 80038b2:	464b      	mov	r3, r9
 80038b4:	1891      	adds	r1, r2, r2
 80038b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038b8:	415b      	adcs	r3, r3
 80038ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038c0:	4641      	mov	r1, r8
 80038c2:	1851      	adds	r1, r2, r1
 80038c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80038c6:	4649      	mov	r1, r9
 80038c8:	414b      	adcs	r3, r1
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038d8:	4659      	mov	r1, fp
 80038da:	00cb      	lsls	r3, r1, #3
 80038dc:	4651      	mov	r1, sl
 80038de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038e2:	4651      	mov	r1, sl
 80038e4:	00ca      	lsls	r2, r1, #3
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	4642      	mov	r2, r8
 80038ee:	189b      	adds	r3, r3, r2
 80038f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038f4:	464b      	mov	r3, r9
 80038f6:	460a      	mov	r2, r1
 80038f8:	eb42 0303 	adc.w	r3, r2, r3
 80038fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800390c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003914:	460b      	mov	r3, r1
 8003916:	18db      	adds	r3, r3, r3
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800391a:	4613      	mov	r3, r2
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800392a:	f7fc fcc9 	bl	80002c0 <__aeabi_uldivmod>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4b0d      	ldr	r3, [pc, #52]	@ (8003968 <UART_SetConfig+0x2d4>)
 8003934:	fba3 1302 	umull	r1, r3, r3, r2
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	2164      	movs	r1, #100	@ 0x64
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	3332      	adds	r3, #50	@ 0x32
 8003946:	4a08      	ldr	r2, [pc, #32]	@ (8003968 <UART_SetConfig+0x2d4>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	f003 0207 	and.w	r2, r3, #7
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4422      	add	r2, r4
 800395a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800395c:	e106      	b.n	8003b6c <UART_SetConfig+0x4d8>
 800395e:	bf00      	nop
 8003960:	40011000 	.word	0x40011000
 8003964:	40011400 	.word	0x40011400
 8003968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800396c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003970:	2200      	movs	r2, #0
 8003972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003976:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800397a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800397e:	4642      	mov	r2, r8
 8003980:	464b      	mov	r3, r9
 8003982:	1891      	adds	r1, r2, r2
 8003984:	6239      	str	r1, [r7, #32]
 8003986:	415b      	adcs	r3, r3
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
 800398a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800398e:	4641      	mov	r1, r8
 8003990:	1854      	adds	r4, r2, r1
 8003992:	4649      	mov	r1, r9
 8003994:	eb43 0501 	adc.w	r5, r3, r1
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	00eb      	lsls	r3, r5, #3
 80039a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039a6:	00e2      	lsls	r2, r4, #3
 80039a8:	4614      	mov	r4, r2
 80039aa:	461d      	mov	r5, r3
 80039ac:	4643      	mov	r3, r8
 80039ae:	18e3      	adds	r3, r4, r3
 80039b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039b4:	464b      	mov	r3, r9
 80039b6:	eb45 0303 	adc.w	r3, r5, r3
 80039ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039da:	4629      	mov	r1, r5
 80039dc:	008b      	lsls	r3, r1, #2
 80039de:	4621      	mov	r1, r4
 80039e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e4:	4621      	mov	r1, r4
 80039e6:	008a      	lsls	r2, r1, #2
 80039e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039ec:	f7fc fc68 	bl	80002c0 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4b60      	ldr	r3, [pc, #384]	@ (8003b78 <UART_SetConfig+0x4e4>)
 80039f6:	fba3 2302 	umull	r2, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	011c      	lsls	r4, r3, #4
 80039fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	1891      	adds	r1, r2, r2
 8003a16:	61b9      	str	r1, [r7, #24]
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a20:	4641      	mov	r1, r8
 8003a22:	1851      	adds	r1, r2, r1
 8003a24:	6139      	str	r1, [r7, #16]
 8003a26:	4649      	mov	r1, r9
 8003a28:	414b      	adcs	r3, r1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a38:	4659      	mov	r1, fp
 8003a3a:	00cb      	lsls	r3, r1, #3
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a42:	4651      	mov	r1, sl
 8003a44:	00ca      	lsls	r2, r1, #3
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a54:	464b      	mov	r3, r9
 8003a56:	460a      	mov	r2, r1
 8003a58:	eb42 0303 	adc.w	r3, r2, r3
 8003a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a78:	4649      	mov	r1, r9
 8003a7a:	008b      	lsls	r3, r1, #2
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a82:	4641      	mov	r1, r8
 8003a84:	008a      	lsls	r2, r1, #2
 8003a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a8a:	f7fc fc19 	bl	80002c0 <__aeabi_uldivmod>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	4b38      	ldr	r3, [pc, #224]	@ (8003b78 <UART_SetConfig+0x4e4>)
 8003a96:	fba3 2301 	umull	r2, r3, r3, r1
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2264      	movs	r2, #100	@ 0x64
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	1acb      	subs	r3, r1, r3
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	3332      	adds	r3, #50	@ 0x32
 8003aa8:	4a33      	ldr	r2, [pc, #204]	@ (8003b78 <UART_SetConfig+0x4e4>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ab4:	441c      	add	r4, r3
 8003ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aba:	2200      	movs	r2, #0
 8003abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003abe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ac0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	415b      	adcs	r3, r3
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	1851      	adds	r1, r2, r1
 8003ad8:	6039      	str	r1, [r7, #0]
 8003ada:	4649      	mov	r1, r9
 8003adc:	414b      	adcs	r3, r1
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aec:	4659      	mov	r1, fp
 8003aee:	00cb      	lsls	r3, r1, #3
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af6:	4651      	mov	r1, sl
 8003af8:	00ca      	lsls	r2, r1, #3
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	4642      	mov	r2, r8
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b06:	464b      	mov	r3, r9
 8003b08:	460a      	mov	r2, r1
 8003b0a:	eb42 0303 	adc.w	r3, r2, r3
 8003b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b28:	4649      	mov	r1, r9
 8003b2a:	008b      	lsls	r3, r1, #2
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b32:	4641      	mov	r1, r8
 8003b34:	008a      	lsls	r2, r1, #2
 8003b36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b3a:	f7fc fbc1 	bl	80002c0 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <UART_SetConfig+0x4e4>)
 8003b44:	fba3 1302 	umull	r1, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	2164      	movs	r1, #100	@ 0x64
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	3332      	adds	r3, #50	@ 0x32
 8003b56:	4a08      	ldr	r2, [pc, #32]	@ (8003b78 <UART_SetConfig+0x4e4>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f003 020f 	and.w	r2, r3, #15
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4422      	add	r2, r4
 8003b6a:	609a      	str	r2, [r3, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b72:	46bd      	mov	sp, r7
 8003b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b78:	51eb851f 	.word	0x51eb851f

08003b7c <sniprintf>:
 8003b7c:	b40c      	push	{r2, r3}
 8003b7e:	b530      	push	{r4, r5, lr}
 8003b80:	4b18      	ldr	r3, [pc, #96]	@ (8003be4 <sniprintf+0x68>)
 8003b82:	1e0c      	subs	r4, r1, #0
 8003b84:	681d      	ldr	r5, [r3, #0]
 8003b86:	b09d      	sub	sp, #116	@ 0x74
 8003b88:	da08      	bge.n	8003b9c <sniprintf+0x20>
 8003b8a:	238b      	movs	r3, #139	@ 0x8b
 8003b8c:	602b      	str	r3, [r5, #0]
 8003b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b92:	b01d      	add	sp, #116	@ 0x74
 8003b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b98:	b002      	add	sp, #8
 8003b9a:	4770      	bx	lr
 8003b9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ba0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003baa:	bf14      	ite	ne
 8003bac:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003bb0:	4623      	moveq	r3, r4
 8003bb2:	9304      	str	r3, [sp, #16]
 8003bb4:	9307      	str	r3, [sp, #28]
 8003bb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bba:	9002      	str	r0, [sp, #8]
 8003bbc:	9006      	str	r0, [sp, #24]
 8003bbe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003bc2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003bc4:	ab21      	add	r3, sp, #132	@ 0x84
 8003bc6:	a902      	add	r1, sp, #8
 8003bc8:	4628      	mov	r0, r5
 8003bca:	9301      	str	r3, [sp, #4]
 8003bcc:	f000 f9b6 	bl	8003f3c <_svfiprintf_r>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	bfbc      	itt	lt
 8003bd4:	238b      	movlt	r3, #139	@ 0x8b
 8003bd6:	602b      	strlt	r3, [r5, #0]
 8003bd8:	2c00      	cmp	r4, #0
 8003bda:	d0da      	beq.n	8003b92 <sniprintf+0x16>
 8003bdc:	9b02      	ldr	r3, [sp, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e7d6      	b.n	8003b92 <sniprintf+0x16>
 8003be4:	2000000c 	.word	0x2000000c

08003be8 <siprintf>:
 8003be8:	b40e      	push	{r1, r2, r3}
 8003bea:	b510      	push	{r4, lr}
 8003bec:	b09d      	sub	sp, #116	@ 0x74
 8003bee:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003bf0:	9002      	str	r0, [sp, #8]
 8003bf2:	9006      	str	r0, [sp, #24]
 8003bf4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003bf8:	480a      	ldr	r0, [pc, #40]	@ (8003c24 <siprintf+0x3c>)
 8003bfa:	9107      	str	r1, [sp, #28]
 8003bfc:	9104      	str	r1, [sp, #16]
 8003bfe:	490a      	ldr	r1, [pc, #40]	@ (8003c28 <siprintf+0x40>)
 8003c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c04:	9105      	str	r1, [sp, #20]
 8003c06:	2400      	movs	r4, #0
 8003c08:	a902      	add	r1, sp, #8
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003c10:	f000 f994 	bl	8003f3c <_svfiprintf_r>
 8003c14:	9b02      	ldr	r3, [sp, #8]
 8003c16:	701c      	strb	r4, [r3, #0]
 8003c18:	b01d      	add	sp, #116	@ 0x74
 8003c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c1e:	b003      	add	sp, #12
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	ffff0208 	.word	0xffff0208

08003c2c <memset>:
 8003c2c:	4402      	add	r2, r0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d100      	bne.n	8003c36 <memset+0xa>
 8003c34:	4770      	bx	lr
 8003c36:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3a:	e7f9      	b.n	8003c30 <memset+0x4>

08003c3c <__errno>:
 8003c3c:	4b01      	ldr	r3, [pc, #4]	@ (8003c44 <__errno+0x8>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	2000000c 	.word	0x2000000c

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c80 <__libc_init_array+0x38>)
 8003c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8003c84 <__libc_init_array+0x3c>)
 8003c4e:	1b64      	subs	r4, r4, r5
 8003c50:	10a4      	asrs	r4, r4, #2
 8003c52:	2600      	movs	r6, #0
 8003c54:	42a6      	cmp	r6, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	4d0b      	ldr	r5, [pc, #44]	@ (8003c88 <__libc_init_array+0x40>)
 8003c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8003c8c <__libc_init_array+0x44>)
 8003c5c:	f000 fc64 	bl	8004528 <_init>
 8003c60:	1b64      	subs	r4, r4, r5
 8003c62:	10a4      	asrs	r4, r4, #2
 8003c64:	2600      	movs	r6, #0
 8003c66:	42a6      	cmp	r6, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c70:	4798      	blx	r3
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7a:	4798      	blx	r3
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	080046c8 	.word	0x080046c8
 8003c84:	080046c8 	.word	0x080046c8
 8003c88:	080046c8 	.word	0x080046c8
 8003c8c:	080046cc 	.word	0x080046cc

08003c90 <__retarget_lock_acquire_recursive>:
 8003c90:	4770      	bx	lr

08003c92 <__retarget_lock_release_recursive>:
 8003c92:	4770      	bx	lr

08003c94 <_free_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4605      	mov	r5, r0
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	d041      	beq.n	8003d20 <_free_r+0x8c>
 8003c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca0:	1f0c      	subs	r4, r1, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	18e4      	addlt	r4, r4, r3
 8003ca8:	f000 f8e0 	bl	8003e6c <__malloc_lock>
 8003cac:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <_free_r+0x90>)
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	b933      	cbnz	r3, 8003cc0 <_free_r+0x2c>
 8003cb2:	6063      	str	r3, [r4, #4]
 8003cb4:	6014      	str	r4, [r2, #0]
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cbc:	f000 b8dc 	b.w	8003e78 <__malloc_unlock>
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d908      	bls.n	8003cd6 <_free_r+0x42>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	1821      	adds	r1, r4, r0
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	bf01      	itttt	eq
 8003ccc:	6819      	ldreq	r1, [r3, #0]
 8003cce:	685b      	ldreq	r3, [r3, #4]
 8003cd0:	1809      	addeq	r1, r1, r0
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	e7ed      	b.n	8003cb2 <_free_r+0x1e>
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b10b      	cbz	r3, 8003ce0 <_free_r+0x4c>
 8003cdc:	42a3      	cmp	r3, r4
 8003cde:	d9fa      	bls.n	8003cd6 <_free_r+0x42>
 8003ce0:	6811      	ldr	r1, [r2, #0]
 8003ce2:	1850      	adds	r0, r2, r1
 8003ce4:	42a0      	cmp	r0, r4
 8003ce6:	d10b      	bne.n	8003d00 <_free_r+0x6c>
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	4401      	add	r1, r0
 8003cec:	1850      	adds	r0, r2, r1
 8003cee:	4283      	cmp	r3, r0
 8003cf0:	6011      	str	r1, [r2, #0]
 8003cf2:	d1e0      	bne.n	8003cb6 <_free_r+0x22>
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	6053      	str	r3, [r2, #4]
 8003cfa:	4408      	add	r0, r1
 8003cfc:	6010      	str	r0, [r2, #0]
 8003cfe:	e7da      	b.n	8003cb6 <_free_r+0x22>
 8003d00:	d902      	bls.n	8003d08 <_free_r+0x74>
 8003d02:	230c      	movs	r3, #12
 8003d04:	602b      	str	r3, [r5, #0]
 8003d06:	e7d6      	b.n	8003cb6 <_free_r+0x22>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	1821      	adds	r1, r4, r0
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	bf04      	itt	eq
 8003d10:	6819      	ldreq	r1, [r3, #0]
 8003d12:	685b      	ldreq	r3, [r3, #4]
 8003d14:	6063      	str	r3, [r4, #4]
 8003d16:	bf04      	itt	eq
 8003d18:	1809      	addeq	r1, r1, r0
 8003d1a:	6021      	streq	r1, [r4, #0]
 8003d1c:	6054      	str	r4, [r2, #4]
 8003d1e:	e7ca      	b.n	8003cb6 <_free_r+0x22>
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	20000260 	.word	0x20000260

08003d28 <sbrk_aligned>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	4e0f      	ldr	r6, [pc, #60]	@ (8003d68 <sbrk_aligned+0x40>)
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	6831      	ldr	r1, [r6, #0]
 8003d30:	4605      	mov	r5, r0
 8003d32:	b911      	cbnz	r1, 8003d3a <sbrk_aligned+0x12>
 8003d34:	f000 fba4 	bl	8004480 <_sbrk_r>
 8003d38:	6030      	str	r0, [r6, #0]
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	f000 fb9f 	bl	8004480 <_sbrk_r>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	d103      	bne.n	8003d4e <sbrk_aligned+0x26>
 8003d46:	f04f 34ff 	mov.w	r4, #4294967295
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
 8003d4e:	1cc4      	adds	r4, r0, #3
 8003d50:	f024 0403 	bic.w	r4, r4, #3
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d0f8      	beq.n	8003d4a <sbrk_aligned+0x22>
 8003d58:	1a21      	subs	r1, r4, r0
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 fb90 	bl	8004480 <_sbrk_r>
 8003d60:	3001      	adds	r0, #1
 8003d62:	d1f2      	bne.n	8003d4a <sbrk_aligned+0x22>
 8003d64:	e7ef      	b.n	8003d46 <sbrk_aligned+0x1e>
 8003d66:	bf00      	nop
 8003d68:	2000025c 	.word	0x2000025c

08003d6c <_malloc_r>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	1ccd      	adds	r5, r1, #3
 8003d72:	f025 0503 	bic.w	r5, r5, #3
 8003d76:	3508      	adds	r5, #8
 8003d78:	2d0c      	cmp	r5, #12
 8003d7a:	bf38      	it	cc
 8003d7c:	250c      	movcc	r5, #12
 8003d7e:	2d00      	cmp	r5, #0
 8003d80:	4606      	mov	r6, r0
 8003d82:	db01      	blt.n	8003d88 <_malloc_r+0x1c>
 8003d84:	42a9      	cmp	r1, r5
 8003d86:	d904      	bls.n	8003d92 <_malloc_r+0x26>
 8003d88:	230c      	movs	r3, #12
 8003d8a:	6033      	str	r3, [r6, #0]
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e68 <_malloc_r+0xfc>
 8003d96:	f000 f869 	bl	8003e6c <__malloc_lock>
 8003d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d9e:	461c      	mov	r4, r3
 8003da0:	bb44      	cbnz	r4, 8003df4 <_malloc_r+0x88>
 8003da2:	4629      	mov	r1, r5
 8003da4:	4630      	mov	r0, r6
 8003da6:	f7ff ffbf 	bl	8003d28 <sbrk_aligned>
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	4604      	mov	r4, r0
 8003dae:	d158      	bne.n	8003e62 <_malloc_r+0xf6>
 8003db0:	f8d8 4000 	ldr.w	r4, [r8]
 8003db4:	4627      	mov	r7, r4
 8003db6:	2f00      	cmp	r7, #0
 8003db8:	d143      	bne.n	8003e42 <_malloc_r+0xd6>
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	d04b      	beq.n	8003e56 <_malloc_r+0xea>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	eb04 0903 	add.w	r9, r4, r3
 8003dc8:	f000 fb5a 	bl	8004480 <_sbrk_r>
 8003dcc:	4581      	cmp	r9, r0
 8003dce:	d142      	bne.n	8003e56 <_malloc_r+0xea>
 8003dd0:	6821      	ldr	r1, [r4, #0]
 8003dd2:	1a6d      	subs	r5, r5, r1
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f7ff ffa6 	bl	8003d28 <sbrk_aligned>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d03a      	beq.n	8003e56 <_malloc_r+0xea>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	442b      	add	r3, r5
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	bb62      	cbnz	r2, 8003e48 <_malloc_r+0xdc>
 8003dee:	f8c8 7000 	str.w	r7, [r8]
 8003df2:	e00f      	b.n	8003e14 <_malloc_r+0xa8>
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	1b52      	subs	r2, r2, r5
 8003df8:	d420      	bmi.n	8003e3c <_malloc_r+0xd0>
 8003dfa:	2a0b      	cmp	r2, #11
 8003dfc:	d917      	bls.n	8003e2e <_malloc_r+0xc2>
 8003dfe:	1961      	adds	r1, r4, r5
 8003e00:	42a3      	cmp	r3, r4
 8003e02:	6025      	str	r5, [r4, #0]
 8003e04:	bf18      	it	ne
 8003e06:	6059      	strne	r1, [r3, #4]
 8003e08:	6863      	ldr	r3, [r4, #4]
 8003e0a:	bf08      	it	eq
 8003e0c:	f8c8 1000 	streq.w	r1, [r8]
 8003e10:	5162      	str	r2, [r4, r5]
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	4630      	mov	r0, r6
 8003e16:	f000 f82f 	bl	8003e78 <__malloc_unlock>
 8003e1a:	f104 000b 	add.w	r0, r4, #11
 8003e1e:	1d23      	adds	r3, r4, #4
 8003e20:	f020 0007 	bic.w	r0, r0, #7
 8003e24:	1ac2      	subs	r2, r0, r3
 8003e26:	bf1c      	itt	ne
 8003e28:	1a1b      	subne	r3, r3, r0
 8003e2a:	50a3      	strne	r3, [r4, r2]
 8003e2c:	e7af      	b.n	8003d8e <_malloc_r+0x22>
 8003e2e:	6862      	ldr	r2, [r4, #4]
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	bf0c      	ite	eq
 8003e34:	f8c8 2000 	streq.w	r2, [r8]
 8003e38:	605a      	strne	r2, [r3, #4]
 8003e3a:	e7eb      	b.n	8003e14 <_malloc_r+0xa8>
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	6864      	ldr	r4, [r4, #4]
 8003e40:	e7ae      	b.n	8003da0 <_malloc_r+0x34>
 8003e42:	463c      	mov	r4, r7
 8003e44:	687f      	ldr	r7, [r7, #4]
 8003e46:	e7b6      	b.n	8003db6 <_malloc_r+0x4a>
 8003e48:	461a      	mov	r2, r3
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	d1fb      	bne.n	8003e48 <_malloc_r+0xdc>
 8003e50:	2300      	movs	r3, #0
 8003e52:	6053      	str	r3, [r2, #4]
 8003e54:	e7de      	b.n	8003e14 <_malloc_r+0xa8>
 8003e56:	230c      	movs	r3, #12
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f000 f80c 	bl	8003e78 <__malloc_unlock>
 8003e60:	e794      	b.n	8003d8c <_malloc_r+0x20>
 8003e62:	6005      	str	r5, [r0, #0]
 8003e64:	e7d6      	b.n	8003e14 <_malloc_r+0xa8>
 8003e66:	bf00      	nop
 8003e68:	20000260 	.word	0x20000260

08003e6c <__malloc_lock>:
 8003e6c:	4801      	ldr	r0, [pc, #4]	@ (8003e74 <__malloc_lock+0x8>)
 8003e6e:	f7ff bf0f 	b.w	8003c90 <__retarget_lock_acquire_recursive>
 8003e72:	bf00      	nop
 8003e74:	20000258 	.word	0x20000258

08003e78 <__malloc_unlock>:
 8003e78:	4801      	ldr	r0, [pc, #4]	@ (8003e80 <__malloc_unlock+0x8>)
 8003e7a:	f7ff bf0a 	b.w	8003c92 <__retarget_lock_release_recursive>
 8003e7e:	bf00      	nop
 8003e80:	20000258 	.word	0x20000258

08003e84 <__ssputs_r>:
 8003e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	688e      	ldr	r6, [r1, #8]
 8003e8a:	461f      	mov	r7, r3
 8003e8c:	42be      	cmp	r6, r7
 8003e8e:	680b      	ldr	r3, [r1, #0]
 8003e90:	4682      	mov	sl, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	4690      	mov	r8, r2
 8003e96:	d82d      	bhi.n	8003ef4 <__ssputs_r+0x70>
 8003e98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ea0:	d026      	beq.n	8003ef0 <__ssputs_r+0x6c>
 8003ea2:	6965      	ldr	r5, [r4, #20]
 8003ea4:	6909      	ldr	r1, [r1, #16]
 8003ea6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eaa:	eba3 0901 	sub.w	r9, r3, r1
 8003eae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003eb2:	1c7b      	adds	r3, r7, #1
 8003eb4:	444b      	add	r3, r9
 8003eb6:	106d      	asrs	r5, r5, #1
 8003eb8:	429d      	cmp	r5, r3
 8003eba:	bf38      	it	cc
 8003ebc:	461d      	movcc	r5, r3
 8003ebe:	0553      	lsls	r3, r2, #21
 8003ec0:	d527      	bpl.n	8003f12 <__ssputs_r+0x8e>
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f7ff ff52 	bl	8003d6c <_malloc_r>
 8003ec8:	4606      	mov	r6, r0
 8003eca:	b360      	cbz	r0, 8003f26 <__ssputs_r+0xa2>
 8003ecc:	6921      	ldr	r1, [r4, #16]
 8003ece:	464a      	mov	r2, r9
 8003ed0:	f000 fae6 	bl	80044a0 <memcpy>
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	6126      	str	r6, [r4, #16]
 8003ee2:	6165      	str	r5, [r4, #20]
 8003ee4:	444e      	add	r6, r9
 8003ee6:	eba5 0509 	sub.w	r5, r5, r9
 8003eea:	6026      	str	r6, [r4, #0]
 8003eec:	60a5      	str	r5, [r4, #8]
 8003eee:	463e      	mov	r6, r7
 8003ef0:	42be      	cmp	r6, r7
 8003ef2:	d900      	bls.n	8003ef6 <__ssputs_r+0x72>
 8003ef4:	463e      	mov	r6, r7
 8003ef6:	6820      	ldr	r0, [r4, #0]
 8003ef8:	4632      	mov	r2, r6
 8003efa:	4641      	mov	r1, r8
 8003efc:	f000 faa6 	bl	800444c <memmove>
 8003f00:	68a3      	ldr	r3, [r4, #8]
 8003f02:	1b9b      	subs	r3, r3, r6
 8003f04:	60a3      	str	r3, [r4, #8]
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	4433      	add	r3, r6
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f12:	462a      	mov	r2, r5
 8003f14:	f000 fad2 	bl	80044bc <_realloc_r>
 8003f18:	4606      	mov	r6, r0
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d1e0      	bne.n	8003ee0 <__ssputs_r+0x5c>
 8003f1e:	6921      	ldr	r1, [r4, #16]
 8003f20:	4650      	mov	r0, sl
 8003f22:	f7ff feb7 	bl	8003c94 <_free_r>
 8003f26:	230c      	movs	r3, #12
 8003f28:	f8ca 3000 	str.w	r3, [sl]
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f32:	81a3      	strh	r3, [r4, #12]
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	e7e9      	b.n	8003f0e <__ssputs_r+0x8a>
	...

08003f3c <_svfiprintf_r>:
 8003f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f40:	4698      	mov	r8, r3
 8003f42:	898b      	ldrh	r3, [r1, #12]
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	b09d      	sub	sp, #116	@ 0x74
 8003f48:	4607      	mov	r7, r0
 8003f4a:	460d      	mov	r5, r1
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	d510      	bpl.n	8003f72 <_svfiprintf_r+0x36>
 8003f50:	690b      	ldr	r3, [r1, #16]
 8003f52:	b973      	cbnz	r3, 8003f72 <_svfiprintf_r+0x36>
 8003f54:	2140      	movs	r1, #64	@ 0x40
 8003f56:	f7ff ff09 	bl	8003d6c <_malloc_r>
 8003f5a:	6028      	str	r0, [r5, #0]
 8003f5c:	6128      	str	r0, [r5, #16]
 8003f5e:	b930      	cbnz	r0, 8003f6e <_svfiprintf_r+0x32>
 8003f60:	230c      	movs	r3, #12
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	b01d      	add	sp, #116	@ 0x74
 8003f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6e:	2340      	movs	r3, #64	@ 0x40
 8003f70:	616b      	str	r3, [r5, #20]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f76:	2320      	movs	r3, #32
 8003f78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f80:	2330      	movs	r3, #48	@ 0x30
 8003f82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004120 <_svfiprintf_r+0x1e4>
 8003f86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f8a:	f04f 0901 	mov.w	r9, #1
 8003f8e:	4623      	mov	r3, r4
 8003f90:	469a      	mov	sl, r3
 8003f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f96:	b10a      	cbz	r2, 8003f9c <_svfiprintf_r+0x60>
 8003f98:	2a25      	cmp	r2, #37	@ 0x25
 8003f9a:	d1f9      	bne.n	8003f90 <_svfiprintf_r+0x54>
 8003f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003fa0:	d00b      	beq.n	8003fba <_svfiprintf_r+0x7e>
 8003fa2:	465b      	mov	r3, fp
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	4638      	mov	r0, r7
 8003faa:	f7ff ff6b 	bl	8003e84 <__ssputs_r>
 8003fae:	3001      	adds	r0, #1
 8003fb0:	f000 80a7 	beq.w	8004102 <_svfiprintf_r+0x1c6>
 8003fb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fb6:	445a      	add	r2, fp
 8003fb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fba:	f89a 3000 	ldrb.w	r3, [sl]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 809f 	beq.w	8004102 <_svfiprintf_r+0x1c6>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fce:	f10a 0a01 	add.w	sl, sl, #1
 8003fd2:	9304      	str	r3, [sp, #16]
 8003fd4:	9307      	str	r3, [sp, #28]
 8003fd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fda:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fdc:	4654      	mov	r4, sl
 8003fde:	2205      	movs	r2, #5
 8003fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fe4:	484e      	ldr	r0, [pc, #312]	@ (8004120 <_svfiprintf_r+0x1e4>)
 8003fe6:	f7fc f91b 	bl	8000220 <memchr>
 8003fea:	9a04      	ldr	r2, [sp, #16]
 8003fec:	b9d8      	cbnz	r0, 8004026 <_svfiprintf_r+0xea>
 8003fee:	06d0      	lsls	r0, r2, #27
 8003ff0:	bf44      	itt	mi
 8003ff2:	2320      	movmi	r3, #32
 8003ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ff8:	0711      	lsls	r1, r2, #28
 8003ffa:	bf44      	itt	mi
 8003ffc:	232b      	movmi	r3, #43	@ 0x2b
 8003ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004002:	f89a 3000 	ldrb.w	r3, [sl]
 8004006:	2b2a      	cmp	r3, #42	@ 0x2a
 8004008:	d015      	beq.n	8004036 <_svfiprintf_r+0xfa>
 800400a:	9a07      	ldr	r2, [sp, #28]
 800400c:	4654      	mov	r4, sl
 800400e:	2000      	movs	r0, #0
 8004010:	f04f 0c0a 	mov.w	ip, #10
 8004014:	4621      	mov	r1, r4
 8004016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800401a:	3b30      	subs	r3, #48	@ 0x30
 800401c:	2b09      	cmp	r3, #9
 800401e:	d94b      	bls.n	80040b8 <_svfiprintf_r+0x17c>
 8004020:	b1b0      	cbz	r0, 8004050 <_svfiprintf_r+0x114>
 8004022:	9207      	str	r2, [sp, #28]
 8004024:	e014      	b.n	8004050 <_svfiprintf_r+0x114>
 8004026:	eba0 0308 	sub.w	r3, r0, r8
 800402a:	fa09 f303 	lsl.w	r3, r9, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	46a2      	mov	sl, r4
 8004034:	e7d2      	b.n	8003fdc <_svfiprintf_r+0xa0>
 8004036:	9b03      	ldr	r3, [sp, #12]
 8004038:	1d19      	adds	r1, r3, #4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	9103      	str	r1, [sp, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	bfbb      	ittet	lt
 8004042:	425b      	neglt	r3, r3
 8004044:	f042 0202 	orrlt.w	r2, r2, #2
 8004048:	9307      	strge	r3, [sp, #28]
 800404a:	9307      	strlt	r3, [sp, #28]
 800404c:	bfb8      	it	lt
 800404e:	9204      	strlt	r2, [sp, #16]
 8004050:	7823      	ldrb	r3, [r4, #0]
 8004052:	2b2e      	cmp	r3, #46	@ 0x2e
 8004054:	d10a      	bne.n	800406c <_svfiprintf_r+0x130>
 8004056:	7863      	ldrb	r3, [r4, #1]
 8004058:	2b2a      	cmp	r3, #42	@ 0x2a
 800405a:	d132      	bne.n	80040c2 <_svfiprintf_r+0x186>
 800405c:	9b03      	ldr	r3, [sp, #12]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	9203      	str	r2, [sp, #12]
 8004064:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004068:	3402      	adds	r4, #2
 800406a:	9305      	str	r3, [sp, #20]
 800406c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004130 <_svfiprintf_r+0x1f4>
 8004070:	7821      	ldrb	r1, [r4, #0]
 8004072:	2203      	movs	r2, #3
 8004074:	4650      	mov	r0, sl
 8004076:	f7fc f8d3 	bl	8000220 <memchr>
 800407a:	b138      	cbz	r0, 800408c <_svfiprintf_r+0x150>
 800407c:	9b04      	ldr	r3, [sp, #16]
 800407e:	eba0 000a 	sub.w	r0, r0, sl
 8004082:	2240      	movs	r2, #64	@ 0x40
 8004084:	4082      	lsls	r2, r0
 8004086:	4313      	orrs	r3, r2
 8004088:	3401      	adds	r4, #1
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004090:	4824      	ldr	r0, [pc, #144]	@ (8004124 <_svfiprintf_r+0x1e8>)
 8004092:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004096:	2206      	movs	r2, #6
 8004098:	f7fc f8c2 	bl	8000220 <memchr>
 800409c:	2800      	cmp	r0, #0
 800409e:	d036      	beq.n	800410e <_svfiprintf_r+0x1d2>
 80040a0:	4b21      	ldr	r3, [pc, #132]	@ (8004128 <_svfiprintf_r+0x1ec>)
 80040a2:	bb1b      	cbnz	r3, 80040ec <_svfiprintf_r+0x1b0>
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	3307      	adds	r3, #7
 80040a8:	f023 0307 	bic.w	r3, r3, #7
 80040ac:	3308      	adds	r3, #8
 80040ae:	9303      	str	r3, [sp, #12]
 80040b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040b2:	4433      	add	r3, r6
 80040b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80040b6:	e76a      	b.n	8003f8e <_svfiprintf_r+0x52>
 80040b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040bc:	460c      	mov	r4, r1
 80040be:	2001      	movs	r0, #1
 80040c0:	e7a8      	b.n	8004014 <_svfiprintf_r+0xd8>
 80040c2:	2300      	movs	r3, #0
 80040c4:	3401      	adds	r4, #1
 80040c6:	9305      	str	r3, [sp, #20]
 80040c8:	4619      	mov	r1, r3
 80040ca:	f04f 0c0a 	mov.w	ip, #10
 80040ce:	4620      	mov	r0, r4
 80040d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040d4:	3a30      	subs	r2, #48	@ 0x30
 80040d6:	2a09      	cmp	r2, #9
 80040d8:	d903      	bls.n	80040e2 <_svfiprintf_r+0x1a6>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0c6      	beq.n	800406c <_svfiprintf_r+0x130>
 80040de:	9105      	str	r1, [sp, #20]
 80040e0:	e7c4      	b.n	800406c <_svfiprintf_r+0x130>
 80040e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80040e6:	4604      	mov	r4, r0
 80040e8:	2301      	movs	r3, #1
 80040ea:	e7f0      	b.n	80040ce <_svfiprintf_r+0x192>
 80040ec:	ab03      	add	r3, sp, #12
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	462a      	mov	r2, r5
 80040f2:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <_svfiprintf_r+0x1f0>)
 80040f4:	a904      	add	r1, sp, #16
 80040f6:	4638      	mov	r0, r7
 80040f8:	f3af 8000 	nop.w
 80040fc:	1c42      	adds	r2, r0, #1
 80040fe:	4606      	mov	r6, r0
 8004100:	d1d6      	bne.n	80040b0 <_svfiprintf_r+0x174>
 8004102:	89ab      	ldrh	r3, [r5, #12]
 8004104:	065b      	lsls	r3, r3, #25
 8004106:	f53f af2d 	bmi.w	8003f64 <_svfiprintf_r+0x28>
 800410a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800410c:	e72c      	b.n	8003f68 <_svfiprintf_r+0x2c>
 800410e:	ab03      	add	r3, sp, #12
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	462a      	mov	r2, r5
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <_svfiprintf_r+0x1f0>)
 8004116:	a904      	add	r1, sp, #16
 8004118:	4638      	mov	r0, r7
 800411a:	f000 f879 	bl	8004210 <_printf_i>
 800411e:	e7ed      	b.n	80040fc <_svfiprintf_r+0x1c0>
 8004120:	0800468c 	.word	0x0800468c
 8004124:	08004696 	.word	0x08004696
 8004128:	00000000 	.word	0x00000000
 800412c:	08003e85 	.word	0x08003e85
 8004130:	08004692 	.word	0x08004692

08004134 <_printf_common>:
 8004134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	4616      	mov	r6, r2
 800413a:	4698      	mov	r8, r3
 800413c:	688a      	ldr	r2, [r1, #8]
 800413e:	690b      	ldr	r3, [r1, #16]
 8004140:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004144:	4293      	cmp	r3, r2
 8004146:	bfb8      	it	lt
 8004148:	4613      	movlt	r3, r2
 800414a:	6033      	str	r3, [r6, #0]
 800414c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004150:	4607      	mov	r7, r0
 8004152:	460c      	mov	r4, r1
 8004154:	b10a      	cbz	r2, 800415a <_printf_common+0x26>
 8004156:	3301      	adds	r3, #1
 8004158:	6033      	str	r3, [r6, #0]
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	0699      	lsls	r1, r3, #26
 800415e:	bf42      	ittt	mi
 8004160:	6833      	ldrmi	r3, [r6, #0]
 8004162:	3302      	addmi	r3, #2
 8004164:	6033      	strmi	r3, [r6, #0]
 8004166:	6825      	ldr	r5, [r4, #0]
 8004168:	f015 0506 	ands.w	r5, r5, #6
 800416c:	d106      	bne.n	800417c <_printf_common+0x48>
 800416e:	f104 0a19 	add.w	sl, r4, #25
 8004172:	68e3      	ldr	r3, [r4, #12]
 8004174:	6832      	ldr	r2, [r6, #0]
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	42ab      	cmp	r3, r5
 800417a:	dc26      	bgt.n	80041ca <_printf_common+0x96>
 800417c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004180:	6822      	ldr	r2, [r4, #0]
 8004182:	3b00      	subs	r3, #0
 8004184:	bf18      	it	ne
 8004186:	2301      	movne	r3, #1
 8004188:	0692      	lsls	r2, r2, #26
 800418a:	d42b      	bmi.n	80041e4 <_printf_common+0xb0>
 800418c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004190:	4641      	mov	r1, r8
 8004192:	4638      	mov	r0, r7
 8004194:	47c8      	blx	r9
 8004196:	3001      	adds	r0, #1
 8004198:	d01e      	beq.n	80041d8 <_printf_common+0xa4>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	6922      	ldr	r2, [r4, #16]
 800419e:	f003 0306 	and.w	r3, r3, #6
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	bf02      	ittt	eq
 80041a6:	68e5      	ldreq	r5, [r4, #12]
 80041a8:	6833      	ldreq	r3, [r6, #0]
 80041aa:	1aed      	subeq	r5, r5, r3
 80041ac:	68a3      	ldr	r3, [r4, #8]
 80041ae:	bf0c      	ite	eq
 80041b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041b4:	2500      	movne	r5, #0
 80041b6:	4293      	cmp	r3, r2
 80041b8:	bfc4      	itt	gt
 80041ba:	1a9b      	subgt	r3, r3, r2
 80041bc:	18ed      	addgt	r5, r5, r3
 80041be:	2600      	movs	r6, #0
 80041c0:	341a      	adds	r4, #26
 80041c2:	42b5      	cmp	r5, r6
 80041c4:	d11a      	bne.n	80041fc <_printf_common+0xc8>
 80041c6:	2000      	movs	r0, #0
 80041c8:	e008      	b.n	80041dc <_printf_common+0xa8>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4652      	mov	r2, sl
 80041ce:	4641      	mov	r1, r8
 80041d0:	4638      	mov	r0, r7
 80041d2:	47c8      	blx	r9
 80041d4:	3001      	adds	r0, #1
 80041d6:	d103      	bne.n	80041e0 <_printf_common+0xac>
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e0:	3501      	adds	r5, #1
 80041e2:	e7c6      	b.n	8004172 <_printf_common+0x3e>
 80041e4:	18e1      	adds	r1, r4, r3
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	2030      	movs	r0, #48	@ 0x30
 80041ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041ee:	4422      	add	r2, r4
 80041f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041f8:	3302      	adds	r3, #2
 80041fa:	e7c7      	b.n	800418c <_printf_common+0x58>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4622      	mov	r2, r4
 8004200:	4641      	mov	r1, r8
 8004202:	4638      	mov	r0, r7
 8004204:	47c8      	blx	r9
 8004206:	3001      	adds	r0, #1
 8004208:	d0e6      	beq.n	80041d8 <_printf_common+0xa4>
 800420a:	3601      	adds	r6, #1
 800420c:	e7d9      	b.n	80041c2 <_printf_common+0x8e>
	...

08004210 <_printf_i>:
 8004210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	7e0f      	ldrb	r7, [r1, #24]
 8004216:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004218:	2f78      	cmp	r7, #120	@ 0x78
 800421a:	4691      	mov	r9, r2
 800421c:	4680      	mov	r8, r0
 800421e:	460c      	mov	r4, r1
 8004220:	469a      	mov	sl, r3
 8004222:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004226:	d807      	bhi.n	8004238 <_printf_i+0x28>
 8004228:	2f62      	cmp	r7, #98	@ 0x62
 800422a:	d80a      	bhi.n	8004242 <_printf_i+0x32>
 800422c:	2f00      	cmp	r7, #0
 800422e:	f000 80d1 	beq.w	80043d4 <_printf_i+0x1c4>
 8004232:	2f58      	cmp	r7, #88	@ 0x58
 8004234:	f000 80b8 	beq.w	80043a8 <_printf_i+0x198>
 8004238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800423c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004240:	e03a      	b.n	80042b8 <_printf_i+0xa8>
 8004242:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004246:	2b15      	cmp	r3, #21
 8004248:	d8f6      	bhi.n	8004238 <_printf_i+0x28>
 800424a:	a101      	add	r1, pc, #4	@ (adr r1, 8004250 <_printf_i+0x40>)
 800424c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004250:	080042a9 	.word	0x080042a9
 8004254:	080042bd 	.word	0x080042bd
 8004258:	08004239 	.word	0x08004239
 800425c:	08004239 	.word	0x08004239
 8004260:	08004239 	.word	0x08004239
 8004264:	08004239 	.word	0x08004239
 8004268:	080042bd 	.word	0x080042bd
 800426c:	08004239 	.word	0x08004239
 8004270:	08004239 	.word	0x08004239
 8004274:	08004239 	.word	0x08004239
 8004278:	08004239 	.word	0x08004239
 800427c:	080043bb 	.word	0x080043bb
 8004280:	080042e7 	.word	0x080042e7
 8004284:	08004375 	.word	0x08004375
 8004288:	08004239 	.word	0x08004239
 800428c:	08004239 	.word	0x08004239
 8004290:	080043dd 	.word	0x080043dd
 8004294:	08004239 	.word	0x08004239
 8004298:	080042e7 	.word	0x080042e7
 800429c:	08004239 	.word	0x08004239
 80042a0:	08004239 	.word	0x08004239
 80042a4:	0800437d 	.word	0x0800437d
 80042a8:	6833      	ldr	r3, [r6, #0]
 80042aa:	1d1a      	adds	r2, r3, #4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6032      	str	r2, [r6, #0]
 80042b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042b8:	2301      	movs	r3, #1
 80042ba:	e09c      	b.n	80043f6 <_printf_i+0x1e6>
 80042bc:	6833      	ldr	r3, [r6, #0]
 80042be:	6820      	ldr	r0, [r4, #0]
 80042c0:	1d19      	adds	r1, r3, #4
 80042c2:	6031      	str	r1, [r6, #0]
 80042c4:	0606      	lsls	r6, r0, #24
 80042c6:	d501      	bpl.n	80042cc <_printf_i+0xbc>
 80042c8:	681d      	ldr	r5, [r3, #0]
 80042ca:	e003      	b.n	80042d4 <_printf_i+0xc4>
 80042cc:	0645      	lsls	r5, r0, #25
 80042ce:	d5fb      	bpl.n	80042c8 <_printf_i+0xb8>
 80042d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042d4:	2d00      	cmp	r5, #0
 80042d6:	da03      	bge.n	80042e0 <_printf_i+0xd0>
 80042d8:	232d      	movs	r3, #45	@ 0x2d
 80042da:	426d      	negs	r5, r5
 80042dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042e0:	4858      	ldr	r0, [pc, #352]	@ (8004444 <_printf_i+0x234>)
 80042e2:	230a      	movs	r3, #10
 80042e4:	e011      	b.n	800430a <_printf_i+0xfa>
 80042e6:	6821      	ldr	r1, [r4, #0]
 80042e8:	6833      	ldr	r3, [r6, #0]
 80042ea:	0608      	lsls	r0, r1, #24
 80042ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80042f0:	d402      	bmi.n	80042f8 <_printf_i+0xe8>
 80042f2:	0649      	lsls	r1, r1, #25
 80042f4:	bf48      	it	mi
 80042f6:	b2ad      	uxthmi	r5, r5
 80042f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80042fa:	4852      	ldr	r0, [pc, #328]	@ (8004444 <_printf_i+0x234>)
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	bf14      	ite	ne
 8004300:	230a      	movne	r3, #10
 8004302:	2308      	moveq	r3, #8
 8004304:	2100      	movs	r1, #0
 8004306:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800430a:	6866      	ldr	r6, [r4, #4]
 800430c:	60a6      	str	r6, [r4, #8]
 800430e:	2e00      	cmp	r6, #0
 8004310:	db05      	blt.n	800431e <_printf_i+0x10e>
 8004312:	6821      	ldr	r1, [r4, #0]
 8004314:	432e      	orrs	r6, r5
 8004316:	f021 0104 	bic.w	r1, r1, #4
 800431a:	6021      	str	r1, [r4, #0]
 800431c:	d04b      	beq.n	80043b6 <_printf_i+0x1a6>
 800431e:	4616      	mov	r6, r2
 8004320:	fbb5 f1f3 	udiv	r1, r5, r3
 8004324:	fb03 5711 	mls	r7, r3, r1, r5
 8004328:	5dc7      	ldrb	r7, [r0, r7]
 800432a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800432e:	462f      	mov	r7, r5
 8004330:	42bb      	cmp	r3, r7
 8004332:	460d      	mov	r5, r1
 8004334:	d9f4      	bls.n	8004320 <_printf_i+0x110>
 8004336:	2b08      	cmp	r3, #8
 8004338:	d10b      	bne.n	8004352 <_printf_i+0x142>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	07df      	lsls	r7, r3, #31
 800433e:	d508      	bpl.n	8004352 <_printf_i+0x142>
 8004340:	6923      	ldr	r3, [r4, #16]
 8004342:	6861      	ldr	r1, [r4, #4]
 8004344:	4299      	cmp	r1, r3
 8004346:	bfde      	ittt	le
 8004348:	2330      	movle	r3, #48	@ 0x30
 800434a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800434e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004352:	1b92      	subs	r2, r2, r6
 8004354:	6122      	str	r2, [r4, #16]
 8004356:	f8cd a000 	str.w	sl, [sp]
 800435a:	464b      	mov	r3, r9
 800435c:	aa03      	add	r2, sp, #12
 800435e:	4621      	mov	r1, r4
 8004360:	4640      	mov	r0, r8
 8004362:	f7ff fee7 	bl	8004134 <_printf_common>
 8004366:	3001      	adds	r0, #1
 8004368:	d14a      	bne.n	8004400 <_printf_i+0x1f0>
 800436a:	f04f 30ff 	mov.w	r0, #4294967295
 800436e:	b004      	add	sp, #16
 8004370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	f043 0320 	orr.w	r3, r3, #32
 800437a:	6023      	str	r3, [r4, #0]
 800437c:	4832      	ldr	r0, [pc, #200]	@ (8004448 <_printf_i+0x238>)
 800437e:	2778      	movs	r7, #120	@ 0x78
 8004380:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	6831      	ldr	r1, [r6, #0]
 8004388:	061f      	lsls	r7, r3, #24
 800438a:	f851 5b04 	ldr.w	r5, [r1], #4
 800438e:	d402      	bmi.n	8004396 <_printf_i+0x186>
 8004390:	065f      	lsls	r7, r3, #25
 8004392:	bf48      	it	mi
 8004394:	b2ad      	uxthmi	r5, r5
 8004396:	6031      	str	r1, [r6, #0]
 8004398:	07d9      	lsls	r1, r3, #31
 800439a:	bf44      	itt	mi
 800439c:	f043 0320 	orrmi.w	r3, r3, #32
 80043a0:	6023      	strmi	r3, [r4, #0]
 80043a2:	b11d      	cbz	r5, 80043ac <_printf_i+0x19c>
 80043a4:	2310      	movs	r3, #16
 80043a6:	e7ad      	b.n	8004304 <_printf_i+0xf4>
 80043a8:	4826      	ldr	r0, [pc, #152]	@ (8004444 <_printf_i+0x234>)
 80043aa:	e7e9      	b.n	8004380 <_printf_i+0x170>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	f023 0320 	bic.w	r3, r3, #32
 80043b2:	6023      	str	r3, [r4, #0]
 80043b4:	e7f6      	b.n	80043a4 <_printf_i+0x194>
 80043b6:	4616      	mov	r6, r2
 80043b8:	e7bd      	b.n	8004336 <_printf_i+0x126>
 80043ba:	6833      	ldr	r3, [r6, #0]
 80043bc:	6825      	ldr	r5, [r4, #0]
 80043be:	6961      	ldr	r1, [r4, #20]
 80043c0:	1d18      	adds	r0, r3, #4
 80043c2:	6030      	str	r0, [r6, #0]
 80043c4:	062e      	lsls	r6, r5, #24
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	d501      	bpl.n	80043ce <_printf_i+0x1be>
 80043ca:	6019      	str	r1, [r3, #0]
 80043cc:	e002      	b.n	80043d4 <_printf_i+0x1c4>
 80043ce:	0668      	lsls	r0, r5, #25
 80043d0:	d5fb      	bpl.n	80043ca <_printf_i+0x1ba>
 80043d2:	8019      	strh	r1, [r3, #0]
 80043d4:	2300      	movs	r3, #0
 80043d6:	6123      	str	r3, [r4, #16]
 80043d8:	4616      	mov	r6, r2
 80043da:	e7bc      	b.n	8004356 <_printf_i+0x146>
 80043dc:	6833      	ldr	r3, [r6, #0]
 80043de:	1d1a      	adds	r2, r3, #4
 80043e0:	6032      	str	r2, [r6, #0]
 80043e2:	681e      	ldr	r6, [r3, #0]
 80043e4:	6862      	ldr	r2, [r4, #4]
 80043e6:	2100      	movs	r1, #0
 80043e8:	4630      	mov	r0, r6
 80043ea:	f7fb ff19 	bl	8000220 <memchr>
 80043ee:	b108      	cbz	r0, 80043f4 <_printf_i+0x1e4>
 80043f0:	1b80      	subs	r0, r0, r6
 80043f2:	6060      	str	r0, [r4, #4]
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	6123      	str	r3, [r4, #16]
 80043f8:	2300      	movs	r3, #0
 80043fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043fe:	e7aa      	b.n	8004356 <_printf_i+0x146>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	4632      	mov	r2, r6
 8004404:	4649      	mov	r1, r9
 8004406:	4640      	mov	r0, r8
 8004408:	47d0      	blx	sl
 800440a:	3001      	adds	r0, #1
 800440c:	d0ad      	beq.n	800436a <_printf_i+0x15a>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	079b      	lsls	r3, r3, #30
 8004412:	d413      	bmi.n	800443c <_printf_i+0x22c>
 8004414:	68e0      	ldr	r0, [r4, #12]
 8004416:	9b03      	ldr	r3, [sp, #12]
 8004418:	4298      	cmp	r0, r3
 800441a:	bfb8      	it	lt
 800441c:	4618      	movlt	r0, r3
 800441e:	e7a6      	b.n	800436e <_printf_i+0x15e>
 8004420:	2301      	movs	r3, #1
 8004422:	4632      	mov	r2, r6
 8004424:	4649      	mov	r1, r9
 8004426:	4640      	mov	r0, r8
 8004428:	47d0      	blx	sl
 800442a:	3001      	adds	r0, #1
 800442c:	d09d      	beq.n	800436a <_printf_i+0x15a>
 800442e:	3501      	adds	r5, #1
 8004430:	68e3      	ldr	r3, [r4, #12]
 8004432:	9903      	ldr	r1, [sp, #12]
 8004434:	1a5b      	subs	r3, r3, r1
 8004436:	42ab      	cmp	r3, r5
 8004438:	dcf2      	bgt.n	8004420 <_printf_i+0x210>
 800443a:	e7eb      	b.n	8004414 <_printf_i+0x204>
 800443c:	2500      	movs	r5, #0
 800443e:	f104 0619 	add.w	r6, r4, #25
 8004442:	e7f5      	b.n	8004430 <_printf_i+0x220>
 8004444:	0800469d 	.word	0x0800469d
 8004448:	080046ae 	.word	0x080046ae

0800444c <memmove>:
 800444c:	4288      	cmp	r0, r1
 800444e:	b510      	push	{r4, lr}
 8004450:	eb01 0402 	add.w	r4, r1, r2
 8004454:	d902      	bls.n	800445c <memmove+0x10>
 8004456:	4284      	cmp	r4, r0
 8004458:	4623      	mov	r3, r4
 800445a:	d807      	bhi.n	800446c <memmove+0x20>
 800445c:	1e43      	subs	r3, r0, #1
 800445e:	42a1      	cmp	r1, r4
 8004460:	d008      	beq.n	8004474 <memmove+0x28>
 8004462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800446a:	e7f8      	b.n	800445e <memmove+0x12>
 800446c:	4402      	add	r2, r0
 800446e:	4601      	mov	r1, r0
 8004470:	428a      	cmp	r2, r1
 8004472:	d100      	bne.n	8004476 <memmove+0x2a>
 8004474:	bd10      	pop	{r4, pc}
 8004476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800447a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800447e:	e7f7      	b.n	8004470 <memmove+0x24>

08004480 <_sbrk_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4d06      	ldr	r5, [pc, #24]	@ (800449c <_sbrk_r+0x1c>)
 8004484:	2300      	movs	r3, #0
 8004486:	4604      	mov	r4, r0
 8004488:	4608      	mov	r0, r1
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	f7fc fc94 	bl	8000db8 <_sbrk>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_sbrk_r+0x1a>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_sbrk_r+0x1a>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	20000254 	.word	0x20000254

080044a0 <memcpy>:
 80044a0:	440a      	add	r2, r1
 80044a2:	4291      	cmp	r1, r2
 80044a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044a8:	d100      	bne.n	80044ac <memcpy+0xc>
 80044aa:	4770      	bx	lr
 80044ac:	b510      	push	{r4, lr}
 80044ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b6:	4291      	cmp	r1, r2
 80044b8:	d1f9      	bne.n	80044ae <memcpy+0xe>
 80044ba:	bd10      	pop	{r4, pc}

080044bc <_realloc_r>:
 80044bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c0:	4607      	mov	r7, r0
 80044c2:	4614      	mov	r4, r2
 80044c4:	460d      	mov	r5, r1
 80044c6:	b921      	cbnz	r1, 80044d2 <_realloc_r+0x16>
 80044c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044cc:	4611      	mov	r1, r2
 80044ce:	f7ff bc4d 	b.w	8003d6c <_malloc_r>
 80044d2:	b92a      	cbnz	r2, 80044e0 <_realloc_r+0x24>
 80044d4:	f7ff fbde 	bl	8003c94 <_free_r>
 80044d8:	4625      	mov	r5, r4
 80044da:	4628      	mov	r0, r5
 80044dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e0:	f000 f81a 	bl	8004518 <_malloc_usable_size_r>
 80044e4:	4284      	cmp	r4, r0
 80044e6:	4606      	mov	r6, r0
 80044e8:	d802      	bhi.n	80044f0 <_realloc_r+0x34>
 80044ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044ee:	d8f4      	bhi.n	80044da <_realloc_r+0x1e>
 80044f0:	4621      	mov	r1, r4
 80044f2:	4638      	mov	r0, r7
 80044f4:	f7ff fc3a 	bl	8003d6c <_malloc_r>
 80044f8:	4680      	mov	r8, r0
 80044fa:	b908      	cbnz	r0, 8004500 <_realloc_r+0x44>
 80044fc:	4645      	mov	r5, r8
 80044fe:	e7ec      	b.n	80044da <_realloc_r+0x1e>
 8004500:	42b4      	cmp	r4, r6
 8004502:	4622      	mov	r2, r4
 8004504:	4629      	mov	r1, r5
 8004506:	bf28      	it	cs
 8004508:	4632      	movcs	r2, r6
 800450a:	f7ff ffc9 	bl	80044a0 <memcpy>
 800450e:	4629      	mov	r1, r5
 8004510:	4638      	mov	r0, r7
 8004512:	f7ff fbbf 	bl	8003c94 <_free_r>
 8004516:	e7f1      	b.n	80044fc <_realloc_r+0x40>

08004518 <_malloc_usable_size_r>:
 8004518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800451c:	1f18      	subs	r0, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	bfbc      	itt	lt
 8004522:	580b      	ldrlt	r3, [r1, r0]
 8004524:	18c0      	addlt	r0, r0, r3
 8004526:	4770      	bx	lr

08004528 <_init>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	bf00      	nop
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr

08004534 <_fini>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr
