
Sensor_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c0c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005ddc  08005ddc  00006ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb4  08005eb4  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005eb4  08005eb4  00006eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ebc  08005ebc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ebc  08005ebc  00006ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ec0  08005ec0  00006ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005ec4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  08005f20  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005f20  000072f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c39d  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd5  00000000  00000000  00013429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00015200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000817  00000000  00000000  00015c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219cf  00000000  00000000  0001646f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e625  00000000  00000000  00037e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb247  00000000  00000000  00046463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001116aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  001116f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001146ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005dc4 	.word	0x08005dc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005dc4 	.word	0x08005dc4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <LSM6DS3_Init>:
#include "lsm6ds3.h"
uint8_t rx_buffer[12];
I2C_HandleTypeDef *i2c_lsm6 = NULL;
volatile uint8_t imu_data_ready = 0;

void LSM6DS3_Init(I2C_HandleTypeDef *hi2c) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af04      	add	r7, sp, #16
 80005f2:	6078      	str	r0, [r7, #4]
    i2c_lsm6 = hi2c;
 80005f4:	4a13      	ldr	r2, [pc, #76]	@ (8000644 <LSM6DS3_Init+0x58>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]

    uint8_t ctrl1 = 0x60; // ODR = 416Hz, FS = 2g
 80005fa:	2360      	movs	r3, #96	@ 0x60
 80005fc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, LSM6DS3_ADDR, LSM6DS3_CTRL1_XL,
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	2301      	movs	r3, #1
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	f107 030f 	add.w	r3, r7, #15
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	2210      	movs	r2, #16
 8000612:	21d4      	movs	r1, #212	@ 0xd4
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f001 f8b9 	bl	800178c <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, &ctrl1, 1, HAL_MAX_DELAY);

    uint8_t ctrl2 = 0x60; // ODR = 416Hz, FS = 2000 dps
 800061a:	2360      	movs	r3, #96	@ 0x60
 800061c:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, LSM6DS3_ADDR, LSM6DS3_CTRL2_G,
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	2301      	movs	r3, #1
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	f107 030e 	add.w	r3, r7, #14
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	2211      	movs	r2, #17
 8000632:	21d4      	movs	r1, #212	@ 0xd4
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f001 f8a9 	bl	800178c <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, &ctrl2, 1, HAL_MAX_DELAY);
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000084 	.word	0x20000084

08000648 <LSM6DS3_ReadID>:

uint8_t LSM6DS3_ReadID(I2C_HandleTypeDef *hi2c) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af04      	add	r7, sp, #16
 800064e:	6078      	str	r0, [r7, #4]
    uint8_t id;
    HAL_I2C_Mem_Read(hi2c, LSM6DS3_ADDR, LSM6DS3_WHO_AM_I,
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	2301      	movs	r3, #1
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	f107 030f 	add.w	r3, r7, #15
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	220f      	movs	r2, #15
 8000664:	21d4      	movs	r1, #212	@ 0xd4
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f001 f98a 	bl	8001980 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, &id, 1, HAL_MAX_DELAY);
    return id;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <LSM6DS3_ReadNonBlocking>:

void LSM6DS3_ReadNonBlocking(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af02      	add	r7, sp, #8
    imu_data_ready = 0;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <LSM6DS3_ReadNonBlocking+0x28>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read_IT(i2c_lsm6, LSM6DS3_ADDR,
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <LSM6DS3_ReadNonBlocking+0x2c>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	230c      	movs	r3, #12
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <LSM6DS3_ReadNonBlocking+0x30>)
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	2222      	movs	r2, #34	@ 0x22
 8000694:	21d4      	movs	r1, #212	@ 0xd4
 8000696:	f001 fba5 	bl	8001de4 <HAL_I2C_Mem_Read_IT>
                        LSM6DS3_OUTX_L_G, I2C_MEMADD_SIZE_8BIT,
                        rx_buffer, 12);
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000088 	.word	0x20000088
 80006a4:	20000084 	.word	0x20000084
 80006a8:	20000078 	.word	0x20000078

080006ac <HAL_I2C_MemRxCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a05      	ldr	r2, [pc, #20]	@ (80006d0 <HAL_I2C_MemRxCpltCallback+0x24>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d102      	bne.n	80006c4 <HAL_I2C_MemRxCpltCallback+0x18>
        imu_data_ready = 1;
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <HAL_I2C_MemRxCpltCallback+0x28>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
    }
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	40005400 	.word	0x40005400
 80006d4:	20000088 	.word	0x20000088

080006d8 <main>:

int main(void) {
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af04      	add	r7, sp, #16
    HAL_Init();
 80006de:	f000 fb75 	bl	8000dcc <HAL_Init>
    SystemClock_Config();
 80006e2:	f000 f8a7 	bl	8000834 <SystemClock_Config>

    MX_GPIO_Init();
 80006e6:	f000 f98f 	bl	8000a08 <MX_GPIO_Init>
    MX_I2C1_Init();
 80006ea:	f000 f911 	bl	8000910 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 80006ee:	f000 f961 	bl	80009b4 <MX_USART2_UART_Init>

    uint8_t id = LSM6DS3_ReadID(&hi2c1);
 80006f2:	4848      	ldr	r0, [pc, #288]	@ (8000814 <main+0x13c>)
 80006f4:	f7ff ffa8 	bl	8000648 <LSM6DS3_ReadID>
 80006f8:	4603      	mov	r3, r0
 80006fa:	73fb      	strb	r3, [r7, #15]
    if (id == 0x6A) {
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	2b6a      	cmp	r3, #106	@ 0x6a
 8000700:	d106      	bne.n	8000710 <main+0x38>
        sprintf(msg, "LSM6DS3 detected ✅ WHO_AM_I = 0x%02X\r\n", id);
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	461a      	mov	r2, r3
 8000706:	4944      	ldr	r1, [pc, #272]	@ (8000818 <main+0x140>)
 8000708:	4844      	ldr	r0, [pc, #272]	@ (800081c <main+0x144>)
 800070a:	f004 febb 	bl	8005484 <siprintf>
 800070e:	e005      	b.n	800071c <main+0x44>
    } else {
        sprintf(msg, "LSM6DS3 not detected ❌ WHO_AM_I = 0x%02X\r\n", id);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	461a      	mov	r2, r3
 8000714:	4942      	ldr	r1, [pc, #264]	@ (8000820 <main+0x148>)
 8000716:	4841      	ldr	r0, [pc, #260]	@ (800081c <main+0x144>)
 8000718:	f004 feb4 	bl	8005484 <siprintf>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800071c:	483f      	ldr	r0, [pc, #252]	@ (800081c <main+0x144>)
 800071e:	f7ff fd77 	bl	8000210 <strlen>
 8000722:	4603      	mov	r3, r0
 8000724:	b29a      	uxth	r2, r3
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	493c      	ldr	r1, [pc, #240]	@ (800081c <main+0x144>)
 800072c:	483d      	ldr	r0, [pc, #244]	@ (8000824 <main+0x14c>)
 800072e:	f004 faed 	bl	8004d0c <HAL_UART_Transmit>

    LSM6DS3_Init(&hi2c1);
 8000732:	4838      	ldr	r0, [pc, #224]	@ (8000814 <main+0x13c>)
 8000734:	f7ff ff5a 	bl	80005ec <LSM6DS3_Init>

    while (1) {
        LSM6DS3_ReadNonBlocking();
 8000738:	f7ff ff9e 	bl	8000678 <LSM6DS3_ReadNonBlocking>

        while (!imu_data_ready); // wait for interrupt
 800073c:	bf00      	nop
 800073e:	4b3a      	ldr	r3, [pc, #232]	@ (8000828 <main+0x150>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0fa      	beq.n	800073e <main+0x66>
        imu_data_ready = 0;
 8000748:	4b37      	ldr	r3, [pc, #220]	@ (8000828 <main+0x150>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]

        int16_t gx = (int16_t)(rx_buffer[1] << 8 | rx_buffer[0]);
 800074e:	4b37      	ldr	r3, [pc, #220]	@ (800082c <main+0x154>)
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	b21b      	sxth	r3, r3
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	b21a      	sxth	r2, r3
 8000758:	4b34      	ldr	r3, [pc, #208]	@ (800082c <main+0x154>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b21b      	sxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	81bb      	strh	r3, [r7, #12]
        int16_t gy = (int16_t)(rx_buffer[3] << 8 | rx_buffer[2]);
 8000762:	4b32      	ldr	r3, [pc, #200]	@ (800082c <main+0x154>)
 8000764:	78db      	ldrb	r3, [r3, #3]
 8000766:	b21b      	sxth	r3, r3
 8000768:	021b      	lsls	r3, r3, #8
 800076a:	b21a      	sxth	r2, r3
 800076c:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <main+0x154>)
 800076e:	789b      	ldrb	r3, [r3, #2]
 8000770:	b21b      	sxth	r3, r3
 8000772:	4313      	orrs	r3, r2
 8000774:	817b      	strh	r3, [r7, #10]
        int16_t gz = (int16_t)(rx_buffer[5] << 8 | rx_buffer[4]);
 8000776:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <main+0x154>)
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	b21b      	sxth	r3, r3
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	b21a      	sxth	r2, r3
 8000780:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <main+0x154>)
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	b21b      	sxth	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	813b      	strh	r3, [r7, #8]

        int16_t ax = (int16_t)(rx_buffer[7] << 8 | rx_buffer[6]);
 800078a:	4b28      	ldr	r3, [pc, #160]	@ (800082c <main+0x154>)
 800078c:	79db      	ldrb	r3, [r3, #7]
 800078e:	b21b      	sxth	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b21a      	sxth	r2, r3
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <main+0x154>)
 8000796:	799b      	ldrb	r3, [r3, #6]
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	80fb      	strh	r3, [r7, #6]
        int16_t ay = (int16_t)(rx_buffer[9] << 8 | rx_buffer[8]);
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <main+0x154>)
 80007a0:	7a5b      	ldrb	r3, [r3, #9]
 80007a2:	b21b      	sxth	r3, r3
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	b21a      	sxth	r2, r3
 80007a8:	4b20      	ldr	r3, [pc, #128]	@ (800082c <main+0x154>)
 80007aa:	7a1b      	ldrb	r3, [r3, #8]
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	80bb      	strh	r3, [r7, #4]
        int16_t az = (int16_t)(rx_buffer[11] << 8 | rx_buffer[10]);
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <main+0x154>)
 80007b4:	7adb      	ldrb	r3, [r3, #11]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <main+0x154>)
 80007be:	7a9b      	ldrb	r3, [r3, #10]
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	807b      	strh	r3, [r7, #2]

        sprintf(msg, "Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d\r\n",
 80007c6:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80007ca:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 80007ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80007d6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80007da:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80007de:	9003      	str	r0, [sp, #12]
 80007e0:	9102      	str	r1, [sp, #8]
 80007e2:	9201      	str	r2, [sp, #4]
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	462b      	mov	r3, r5
 80007e8:	4622      	mov	r2, r4
 80007ea:	4911      	ldr	r1, [pc, #68]	@ (8000830 <main+0x158>)
 80007ec:	480b      	ldr	r0, [pc, #44]	@ (800081c <main+0x144>)
 80007ee:	f004 fe49 	bl	8005484 <siprintf>
                ax, ay, az, gx, gy, gz);
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007f2:	480a      	ldr	r0, [pc, #40]	@ (800081c <main+0x144>)
 80007f4:	f7ff fd0c 	bl	8000210 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	4906      	ldr	r1, [pc, #24]	@ (800081c <main+0x144>)
 8000802:	4808      	ldr	r0, [pc, #32]	@ (8000824 <main+0x14c>)
 8000804:	f004 fa82 	bl	8004d0c <HAL_UART_Transmit>

        HAL_Delay(1000); // Optional
 8000808:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800080c:	f000 fb50 	bl	8000eb0 <HAL_Delay>
    while (1) {
 8000810:	e792      	b.n	8000738 <main+0x60>
 8000812:	bf00      	nop
 8000814:	200000d4 	.word	0x200000d4
 8000818:	08005ddc 	.word	0x08005ddc
 800081c:	20000128 	.word	0x20000128
 8000820:	08005e08 	.word	0x08005e08
 8000824:	2000008c 	.word	0x2000008c
 8000828:	20000088 	.word	0x20000088
 800082c:	20000078 	.word	0x20000078
 8000830:	08005e38 	.word	0x08005e38

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	@ 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2234      	movs	r2, #52	@ 0x34
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fe40 	bl	80054c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b2a      	ldr	r3, [pc, #168]	@ (8000908 <SystemClock_Config+0xd4>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000860:	4a29      	ldr	r2, [pc, #164]	@ (8000908 <SystemClock_Config+0xd4>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	@ 0x40
 8000868:	4b27      	ldr	r3, [pc, #156]	@ (8000908 <SystemClock_Config+0xd4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000874:	2300      	movs	r3, #0
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b24      	ldr	r3, [pc, #144]	@ (800090c <SystemClock_Config+0xd8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000880:	4a22      	ldr	r2, [pc, #136]	@ (800090c <SystemClock_Config+0xd8>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b20      	ldr	r3, [pc, #128]	@ (800090c <SystemClock_Config+0xd8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089c:	2310      	movs	r3, #16
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008b2:	2304      	movs	r3, #4
 80008b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 ff34 	bl	8004730 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ce:	f000 f909 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2302      	movs	r3, #2
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2102      	movs	r1, #2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 fbd4 	bl	800409c <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008fa:	f000 f8f3 	bl	8000ae4 <Error_Handler>
  }
}
 80008fe:	bf00      	nop
 8000900:	3750      	adds	r7, #80	@ 0x50
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000916:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <MX_I2C1_Init+0x94>)
 8000918:	4a23      	ldr	r2, [pc, #140]	@ (80009a8 <MX_I2C1_Init+0x98>)
 800091a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800091c:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <MX_I2C1_Init+0x94>)
 800091e:	4a23      	ldr	r2, [pc, #140]	@ (80009ac <MX_I2C1_Init+0x9c>)
 8000920:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000922:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <MX_I2C1_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <MX_I2C1_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <MX_I2C1_Init+0x94>)
 8000930:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000934:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000936:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <MX_I2C1_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_I2C1_Init+0x94>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <MX_I2C1_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_I2C1_Init+0x94>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_I2C1_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_I2C1_Init+0xa0>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a16      	ldr	r2, [pc, #88]	@ (80009b0 <MX_I2C1_Init+0xa0>)
 8000958:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_I2C1_Init+0xa0>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <MX_I2C1_Init+0x94>)
 800096c:	f000 fdb4 	bl	80014d8 <HAL_I2C_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 f8b5 	bl	8000ae4 <Error_Handler>
  }

  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	201f      	movs	r0, #31
 8000980:	f000 fb95 	bl	80010ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000984:	201f      	movs	r0, #31
 8000986:	f000 fbae 	bl	80010e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 1);
 800098a:	2201      	movs	r2, #1
 800098c:	2100      	movs	r1, #0
 800098e:	2020      	movs	r0, #32
 8000990:	f000 fb8d 	bl	80010ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000994:	2020      	movs	r0, #32
 8000996:	f000 fba6 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000d4 	.word	0x200000d4
 80009a8:	40005400 	.word	0x40005400
 80009ac:	000186a0 	.word	0x000186a0
 80009b0:	40023800 	.word	0x40023800

080009b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <MX_USART2_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ec:	f004 f93e 	bl	8004c6c <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f875 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a25      	ldr	r2, [pc, #148]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	4812      	ldr	r0, [pc, #72]	@ (8000adc <MX_GPIO_Init+0xd4>)
 8000a94:	f000 fd06 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_GPIO_Init+0xd8>)
 8000ab0:	f000 fb64 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4804      	ldr	r0, [pc, #16]	@ (8000adc <MX_GPIO_Init+0xd4>)
 8000acc:	f000 fb56 	bl	800117c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f000 fab2 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	@ (8000bc4 <HAL_I2C_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b90:	2304      	movs	r3, #4
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <HAL_I2C_MspInit+0x8c>)
 8000b9c:	f000 faee 	bl	800117c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba8:	4a07      	ldr	r2, [pc, #28]	@ (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000baa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	@ 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <HAL_UART_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_UART_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_UART_MspInit+0x88>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <HAL_UART_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <HAL_UART_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <HAL_UART_MspInit+0x8c>)
 8000c46:	f000 fa99 	bl	800117c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	@ 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <MemManage_Handler+0x4>

08000c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb6:	f000 f8db 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <I2C1_EV_IRQHandler+0x10>)
 8000cc6:	f001 f947 	bl	8001f58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000d4 	.word	0x200000d4

08000cd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <I2C1_ER_IRQHandler+0x10>)
 8000cda:	f001 faae 	bl	800223a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000d4 	.word	0x200000d4

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	@ (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f004 fbde 	bl	80054d8 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20020000 	.word	0x20020000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	200001a8 	.word	0x200001a8
 8000d50:	200002f8 	.word	0x200002f8

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f004 fb9d 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fc95 	bl	80006d8 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dbc:	08005ec4 	.word	0x08005ec4
  ldr r2, =_sbss
 8000dc0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dc4:	200002f8 	.word	0x200002f8

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f94f 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fe76 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f967 	bl	8001102 <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f92f 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	200001ac 	.word	0x200001ac

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	@ (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200001ac 	.word	0x200001ac

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	@ (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	@ (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	@ (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	@ 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	@ 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff29 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff3e 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff31 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d004      	beq.n	8001138 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2280      	movs	r2, #128	@ 0x80
 8001132:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e00c      	b.n	8001152 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2205      	movs	r2, #5
 800113c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800116c:	b2db      	uxtb	r3, r3
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e165      	b.n	8001464 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 8154 	bne.w	800145e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d005      	beq.n	80011ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d130      	bne.n	8001230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 0201 	and.w	r2, r3, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b03      	cmp	r3, #3
 800123a:	d017      	beq.n	800126c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d123      	bne.n	80012c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	69b9      	ldr	r1, [r7, #24]
 80012bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0203 	and.w	r2, r3, #3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80ae 	beq.w	800145e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b5d      	ldr	r3, [pc, #372]	@ (800147c <HAL_GPIO_Init+0x300>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a5c      	ldr	r2, [pc, #368]	@ (800147c <HAL_GPIO_Init+0x300>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b5a      	ldr	r3, [pc, #360]	@ (800147c <HAL_GPIO_Init+0x300>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131e:	4a58      	ldr	r2, [pc, #352]	@ (8001480 <HAL_GPIO_Init+0x304>)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4f      	ldr	r2, [pc, #316]	@ (8001484 <HAL_GPIO_Init+0x308>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d025      	beq.n	8001396 <HAL_GPIO_Init+0x21a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4e      	ldr	r2, [pc, #312]	@ (8001488 <HAL_GPIO_Init+0x30c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d01f      	beq.n	8001392 <HAL_GPIO_Init+0x216>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4d      	ldr	r2, [pc, #308]	@ (800148c <HAL_GPIO_Init+0x310>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x212>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4c      	ldr	r2, [pc, #304]	@ (8001490 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x20e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4b      	ldr	r2, [pc, #300]	@ (8001494 <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x20a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4a      	ldr	r2, [pc, #296]	@ (8001498 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x206>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a49      	ldr	r2, [pc, #292]	@ (800149c <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x202>
 800137a:	2306      	movs	r3, #6
 800137c:	e00c      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 800137e:	2307      	movs	r3, #7
 8001380:	e00a      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 8001382:	2305      	movs	r3, #5
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 8001386:	2304      	movs	r3, #4
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	@ (8001480 <HAL_GPIO_Init+0x304>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b3a      	ldr	r3, [pc, #232]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a31      	ldr	r2, [pc, #196]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a26      	ldr	r2, [pc, #152]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001458:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f ae96 	bls.w	8001198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40021400 	.word	0x40021400
 800149c:	40021800 	.word	0x40021800
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e12b      	b.n	8001742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fb1e 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2224      	movs	r2, #36	@ 0x24
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800152a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800153a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800153c:	f002 fea0 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8001540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4a81      	ldr	r2, [pc, #516]	@ (800174c <HAL_I2C_Init+0x274>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d807      	bhi.n	800155c <HAL_I2C_Init+0x84>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a80      	ldr	r2, [pc, #512]	@ (8001750 <HAL_I2C_Init+0x278>)
 8001550:	4293      	cmp	r3, r2
 8001552:	bf94      	ite	ls
 8001554:	2301      	movls	r3, #1
 8001556:	2300      	movhi	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	e006      	b.n	800156a <HAL_I2C_Init+0x92>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4a7d      	ldr	r2, [pc, #500]	@ (8001754 <HAL_I2C_Init+0x27c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	bf94      	ite	ls
 8001564:	2301      	movls	r3, #1
 8001566:	2300      	movhi	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0e7      	b.n	8001742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a78      	ldr	r2, [pc, #480]	@ (8001758 <HAL_I2C_Init+0x280>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9b      	lsrs	r3, r3, #18
 800157c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	430a      	orrs	r2, r1
 8001590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a6a      	ldr	r2, [pc, #424]	@ (800174c <HAL_I2C_Init+0x274>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d802      	bhi.n	80015ac <HAL_I2C_Init+0xd4>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	e009      	b.n	80015c0 <HAL_I2C_Init+0xe8>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	4a69      	ldr	r2, [pc, #420]	@ (800175c <HAL_I2C_Init+0x284>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	3301      	adds	r3, #1
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	495c      	ldr	r1, [pc, #368]	@ (800174c <HAL_I2C_Init+0x274>)
 80015dc:	428b      	cmp	r3, r1
 80015de:	d819      	bhi.n	8001614 <HAL_I2C_Init+0x13c>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e59      	subs	r1, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ee:	1c59      	adds	r1, r3, #1
 80015f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015f4:	400b      	ands	r3, r1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00a      	beq.n	8001610 <HAL_I2C_Init+0x138>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1e59      	subs	r1, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fbb1 f3f3 	udiv	r3, r1, r3
 8001608:	3301      	adds	r3, #1
 800160a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160e:	e051      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001610:	2304      	movs	r3, #4
 8001612:	e04f      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d111      	bne.n	8001640 <HAL_I2C_Init+0x168>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	e012      	b.n	8001666 <HAL_I2C_Init+0x18e>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Init+0x196>
 800166a:	2301      	movs	r3, #1
 800166c:	e022      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10e      	bne.n	8001694 <HAL_I2C_Init+0x1bc>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e58      	subs	r0, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	440b      	add	r3, r1
 8001684:	fbb0 f3f3 	udiv	r3, r0, r3
 8001688:	3301      	adds	r3, #1
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001692:	e00f      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1e58      	subs	r0, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	0099      	lsls	r1, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	6809      	ldr	r1, [r1, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6911      	ldr	r1, [r2, #16]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68d2      	ldr	r2, [r2, #12]
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	000186a0 	.word	0x000186a0
 8001750:	001e847f 	.word	0x001e847f
 8001754:	003d08ff 	.word	0x003d08ff
 8001758:	431bde83 	.word	0x431bde83
 800175c:	10624dd3 	.word	0x10624dd3

08001760 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001772:	2b80      	cmp	r3, #128	@ 0x80
 8001774:	d103      	bne.n	800177e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	4608      	mov	r0, r1
 8001796:	4611      	mov	r1, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4603      	mov	r3, r0
 800179c:	817b      	strh	r3, [r7, #10]
 800179e:	460b      	mov	r3, r1
 80017a0:	813b      	strh	r3, [r7, #8]
 80017a2:	4613      	mov	r3, r2
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017a6:	f7ff fb77 	bl	8000e98 <HAL_GetTick>
 80017aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	f040 80d9 	bne.w	800196c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2319      	movs	r3, #25
 80017c0:	2201      	movs	r2, #1
 80017c2:	496d      	ldr	r1, [pc, #436]	@ (8001978 <HAL_I2C_Mem_Write+0x1ec>)
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f002 f9e5 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017d0:	2302      	movs	r3, #2
 80017d2:	e0cc      	b.n	800196e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_Mem_Write+0x56>
 80017de:	2302      	movs	r3, #2
 80017e0:	e0c5      	b.n	800196e <HAL_I2C_Mem_Write+0x1e2>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d007      	beq.n	8001808 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001816:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2221      	movs	r2, #33	@ 0x21
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2240      	movs	r2, #64	@ 0x40
 8001824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a3a      	ldr	r2, [r7, #32]
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001838:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a4d      	ldr	r2, [pc, #308]	@ (800197c <HAL_I2C_Mem_Write+0x1f0>)
 8001848:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800184a:	88f8      	ldrh	r0, [r7, #6]
 800184c:	893a      	ldrh	r2, [r7, #8]
 800184e:	8979      	ldrh	r1, [r7, #10]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	4603      	mov	r3, r0
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f001 ff74 	bl	8003748 <I2C_RequestMemoryWrite>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d052      	beq.n	800190c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e081      	b.n	800196e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f002 faaa 	bl	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00d      	beq.n	8001896 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	2b04      	cmp	r3, #4
 8001880:	d107      	bne.n	8001892 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001890:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e06b      	b.n	800196e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d11b      	bne.n	800190c <HAL_I2C_Mem_Write+0x180>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d017      	beq.n	800190c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	781a      	ldrb	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1aa      	bne.n	800186a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f002 fa9d 	bl	8003e58 <I2C_WaitOnBTFFlagUntilTimeout>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00d      	beq.n	8001940 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	2b04      	cmp	r3, #4
 800192a:	d107      	bne.n	800193c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800193a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e016      	b.n	800196e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800194e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2220      	movs	r2, #32
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	e000      	b.n	800196e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800196c:	2302      	movs	r3, #2
  }
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	00100002 	.word	0x00100002
 800197c:	ffff0000 	.word	0xffff0000

08001980 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	@ 0x30
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	4608      	mov	r0, r1
 800198a:	4611      	mov	r1, r2
 800198c:	461a      	mov	r2, r3
 800198e:	4603      	mov	r3, r0
 8001990:	817b      	strh	r3, [r7, #10]
 8001992:	460b      	mov	r3, r1
 8001994:	813b      	strh	r3, [r7, #8]
 8001996:	4613      	mov	r3, r2
 8001998:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800199a:	f7ff fa7d 	bl	8000e98 <HAL_GetTick>
 800199e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b20      	cmp	r3, #32
 80019aa:	f040 8214 	bne.w	8001dd6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2319      	movs	r3, #25
 80019b4:	2201      	movs	r2, #1
 80019b6:	497b      	ldr	r1, [pc, #492]	@ (8001ba4 <HAL_I2C_Mem_Read+0x224>)
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f002 f8eb 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019c4:	2302      	movs	r3, #2
 80019c6:	e207      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Mem_Read+0x56>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e200      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x458>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d007      	beq.n	80019fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2222      	movs	r2, #34	@ 0x22
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ba8 <HAL_I2C_Mem_Read+0x228>)
 8001a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a3e:	88f8      	ldrh	r0, [r7, #6]
 8001a40:	893a      	ldrh	r2, [r7, #8]
 8001a42:	8979      	ldrh	r1, [r7, #10]
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f001 ff10 	bl	8003874 <I2C_RequestMemoryRead>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e1bc      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d113      	bne.n	8001a8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	623b      	str	r3, [r7, #32]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	623b      	str	r3, [r7, #32]
 8001a7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e190      	b.n	8001db0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d11b      	bne.n	8001ace <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e170      	b.n	8001db0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d11b      	bne.n	8001b0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	e150      	b.n	8001db0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b24:	e144      	b.n	8001db0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	f200 80f1 	bhi.w	8001d12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d123      	bne.n	8001b80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f002 fa05 	bl	8003f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e145      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b7e:	e117      	b.n	8001db0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d14e      	bne.n	8001c26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4906      	ldr	r1, [pc, #24]	@ (8001bac <HAL_I2C_Mem_Read+0x22c>)
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f001 fffe 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d008      	beq.n	8001bb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e11a      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x458>
 8001ba2:	bf00      	nop
 8001ba4:	00100002 	.word	0x00100002
 8001ba8:	ffff0000 	.word	0xffff0000
 8001bac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c24:	e0c4      	b.n	8001db0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	496c      	ldr	r1, [pc, #432]	@ (8001de0 <HAL_I2C_Mem_Read+0x460>)
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f001 ffaf 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0cb      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4955      	ldr	r1, [pc, #340]	@ (8001de0 <HAL_I2C_Mem_Read+0x460>)
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f001 ff81 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e09d      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d10:	e04e      	b.n	8001db0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f002 f918 	bl	8003f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e058      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d124      	bne.n	8001db0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d107      	bne.n	8001d7e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d7c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f47f aeb6 	bne.w	8001b26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001dd6:	2302      	movs	r3, #2
  }
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3728      	adds	r7, #40	@ 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	00010004 	.word	0x00010004

08001de4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	460b      	mov	r3, r1
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	f040 8096 	bne.w	8001f3c <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e10:	4b4e      	ldr	r3, [pc, #312]	@ (8001f4c <HAL_I2C_Mem_Read_IT+0x168>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	4a4e      	ldr	r2, [pc, #312]	@ (8001f50 <HAL_I2C_Mem_Read_IT+0x16c>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	0a1a      	lsrs	r2, r3, #8
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009a      	lsls	r2, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d112      	bne.n	8001e5c <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f043 0220 	orr.w	r2, r3, #32
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e070      	b.n	8001f3e <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d0df      	beq.n	8001e2a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_I2C_Mem_Read_IT+0x94>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e062      	b.n	8001f3e <HAL_I2C_Mem_Read_IT+0x15a>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d007      	beq.n	8001e9e <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2222      	movs	r2, #34	@ 0x22
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2240      	movs	r2, #64	@ 0x40
 8001eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f54 <HAL_I2C_Mem_Read_IT+0x170>)
 8001ede:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001ee0:	897a      	ldrh	r2, [r7, #10]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001ee6:	893a      	ldrh	r2, [r7, #8]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f06:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f16:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001f36:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e000      	b.n	8001f3e <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
  }
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	371c      	adds	r7, #28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	14f8b589 	.word	0x14f8b589
 8001f54:	ffff0000 	.word	0xffff0000

08001f58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	d003      	beq.n	8001f90 <HAL_I2C_EV_IRQHandler+0x38>
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b40      	cmp	r3, #64	@ 0x40
 8001f8c:	f040 80c1 	bne.w	8002112 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001fb0:	d003      	beq.n	8001fba <HAL_I2C_EV_IRQHandler+0x62>
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_EV_IRQHandler+0x66>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_I2C_EV_IRQHandler+0x68>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f000 8132 	beq.w	800222a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00c      	beq.n	8001fea <HAL_I2C_EV_IRQHandler+0x92>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	0a5b      	lsrs	r3, r3, #9
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f002 f841 	bl	8004064 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fd91 	bl	8002b0a <I2C_Master_SB>
 8001fe8:	e092      	b.n	8002110 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0xb2>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	0a5b      	lsrs	r3, r3, #9
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fe07 	bl	8002c16 <I2C_Master_ADD10>
 8002008:	e082      	b.n	8002110 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_I2C_EV_IRQHandler+0xd2>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	0a5b      	lsrs	r3, r3, #9
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fe21 	bl	8002c6a <I2C_Master_ADDR>
 8002028:	e072      	b.n	8002110 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d03b      	beq.n	80020ae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002044:	f000 80f3 	beq.w	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	09db      	lsrs	r3, r3, #7
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00f      	beq.n	8002074 <HAL_I2C_EV_IRQHandler+0x11c>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	0a9b      	lsrs	r3, r3, #10
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <HAL_I2C_EV_IRQHandler+0x11c>
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d103      	bne.n	8002074 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f9e9 	bl	8002444 <I2C_MasterTransmit_TXE>
 8002072:	e04d      	b.n	8002110 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80d6 	beq.w	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	0a5b      	lsrs	r3, r3, #9
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80cf 	beq.w	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002090:	7bbb      	ldrb	r3, [r7, #14]
 8002092:	2b21      	cmp	r3, #33	@ 0x21
 8002094:	d103      	bne.n	800209e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fa70 	bl	800257c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800209c:	e0c7      	b.n	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b40      	cmp	r3, #64	@ 0x40
 80020a2:	f040 80c4 	bne.w	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fade 	bl	8002668 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ac:	e0bf      	b.n	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020bc:	f000 80b7 	beq.w	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	099b      	lsrs	r3, r3, #6
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00f      	beq.n	80020ec <HAL_I2C_EV_IRQHandler+0x194>
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	0a9b      	lsrs	r3, r3, #10
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d009      	beq.n	80020ec <HAL_I2C_EV_IRQHandler+0x194>
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d103      	bne.n	80020ec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fb57 	bl	8002798 <I2C_MasterReceive_RXNE>
 80020ea:	e011      	b.n	8002110 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 809a 	beq.w	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	0a5b      	lsrs	r3, r3, #9
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8093 	beq.w	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fc0d 	bl	8002928 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210e:	e08e      	b.n	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002110:	e08d      	b.n	800222e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e007      	b.n	8002134 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d012      	beq.n	8002166 <HAL_I2C_EV_IRQHandler+0x20e>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	0a5b      	lsrs	r3, r3, #9
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00c      	beq.n	8002166 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800215c:	69b9      	ldr	r1, [r7, #24]
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 ffd2 	bl	8003108 <I2C_Slave_ADDR>
 8002164:	e066      	b.n	8002234 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_I2C_EV_IRQHandler+0x22e>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	0a5b      	lsrs	r3, r3, #9
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f001 f80c 	bl	800319c <I2C_Slave_STOPF>
 8002184:	e056      	b.n	8002234 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002186:	7bbb      	ldrb	r3, [r7, #14]
 8002188:	2b21      	cmp	r3, #33	@ 0x21
 800218a:	d002      	beq.n	8002192 <HAL_I2C_EV_IRQHandler+0x23a>
 800218c:	7bbb      	ldrb	r3, [r7, #14]
 800218e:	2b29      	cmp	r3, #41	@ 0x29
 8002190:	d125      	bne.n	80021de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	09db      	lsrs	r3, r3, #7
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00f      	beq.n	80021be <HAL_I2C_EV_IRQHandler+0x266>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	0a9b      	lsrs	r3, r3, #10
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_I2C_EV_IRQHandler+0x266>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fee8 	bl	8002f8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021bc:	e039      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d033      	beq.n	8002232 <HAL_I2C_EV_IRQHandler+0x2da>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	0a5b      	lsrs	r3, r3, #9
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d02d      	beq.n	8002232 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 ff15 	bl	8003006 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021dc:	e029      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00f      	beq.n	800220a <HAL_I2C_EV_IRQHandler+0x2b2>
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	0a9b      	lsrs	r3, r3, #10
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_I2C_EV_IRQHandler+0x2b2>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 ff20 	bl	8003048 <I2C_SlaveReceive_RXNE>
 8002208:	e014      	b.n	8002234 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00e      	beq.n	8002234 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	0a5b      	lsrs	r3, r3, #9
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 ff4e 	bl	80030c4 <I2C_SlaveReceive_BTF>
 8002228:	e004      	b.n	8002234 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800222a:	bf00      	nop
 800222c:	e002      	b.n	8002234 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800222e:	bf00      	nop
 8002230:	e000      	b.n	8002234 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002232:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b08a      	sub	sp, #40	@ 0x28
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800225c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00e      	beq.n	8002288 <HAL_I2C_ER_IRQHandler+0x4e>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002286:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	0a5b      	lsrs	r3, r3, #9
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00e      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0x78>
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80022b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	0a9b      	lsrs	r3, r3, #10
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03f      	beq.n	800233e <HAL_I2C_ER_IRQHandler+0x104>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d039      	beq.n	800233e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80022ca:	7efb      	ldrb	r3, [r7, #27]
 80022cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80022e4:	7ebb      	ldrb	r3, [r7, #26]
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d112      	bne.n	8002310 <HAL_I2C_ER_IRQHandler+0xd6>
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10f      	bne.n	8002310 <HAL_I2C_ER_IRQHandler+0xd6>
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b21      	cmp	r3, #33	@ 0x21
 80022f4:	d008      	beq.n	8002308 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b29      	cmp	r3, #41	@ 0x29
 80022fa:	d005      	beq.n	8002308 <HAL_I2C_ER_IRQHandler+0xce>
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	2b28      	cmp	r3, #40	@ 0x28
 8002300:	d106      	bne.n	8002310 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b21      	cmp	r3, #33	@ 0x21
 8002306:	d103      	bne.n	8002310 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f001 f877 	bl	80033fc <I2C_Slave_AF>
 800230e:	e016      	b.n	800233e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002318:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002322:	7efb      	ldrb	r3, [r7, #27]
 8002324:	2b10      	cmp	r3, #16
 8002326:	d002      	beq.n	800232e <HAL_I2C_ER_IRQHandler+0xf4>
 8002328:	7efb      	ldrb	r3, [r7, #27]
 800232a:	2b40      	cmp	r3, #64	@ 0x40
 800232c:	d107      	bne.n	800233e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	0adb      	lsrs	r3, r3, #11
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00e      	beq.n	8002368 <HAL_I2C_ER_IRQHandler+0x12e>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002366:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f001 f8b2 	bl	80034e4 <I2C_ITError>
  }
}
 8002380:	bf00      	nop
 8002382:	3728      	adds	r7, #40	@ 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
 80023e4:	4613      	mov	r3, r2
 80023e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002452:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800245a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d150      	bne.n	800250c <I2C_MasterTransmit_TXE+0xc8>
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b21      	cmp	r3, #33	@ 0x21
 800246e:	d14d      	bne.n	800250c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b08      	cmp	r3, #8
 8002474:	d01d      	beq.n	80024b2 <I2C_MasterTransmit_TXE+0x6e>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b20      	cmp	r3, #32
 800247a:	d01a      	beq.n	80024b2 <I2C_MasterTransmit_TXE+0x6e>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002482:	d016      	beq.n	80024b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002492:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2211      	movs	r2, #17
 8002498:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ff6c 	bl	8002388 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024b0:	e060      	b.n	8002574 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b40      	cmp	r3, #64	@ 0x40
 80024ea:	d107      	bne.n	80024fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff87 	bl	8002408 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024fa:	e03b      	b.n	8002574 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff3f 	bl	8002388 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800250a:	e033      	b.n	8002574 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b21      	cmp	r3, #33	@ 0x21
 8002510:	d005      	beq.n	800251e <I2C_MasterTransmit_TXE+0xda>
 8002512:	7bbb      	ldrb	r3, [r7, #14]
 8002514:	2b40      	cmp	r3, #64	@ 0x40
 8002516:	d12d      	bne.n	8002574 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b22      	cmp	r3, #34	@ 0x22
 800251c:	d12a      	bne.n	8002574 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d108      	bne.n	800253a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002536:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002538:	e01c      	b.n	8002574 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b40      	cmp	r3, #64	@ 0x40
 8002544:	d103      	bne.n	800254e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f88e 	bl	8002668 <I2C_MemoryTransmit_TXE_BTF>
}
 800254c:	e012      	b.n	8002574 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002572:	e7ff      	b.n	8002574 <I2C_MasterTransmit_TXE+0x130>
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b21      	cmp	r3, #33	@ 0x21
 8002594:	d164      	bne.n	8002660 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025c4:	e04c      	b.n	8002660 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d01d      	beq.n	8002608 <I2C_MasterTransmit_BTF+0x8c>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d01a      	beq.n	8002608 <I2C_MasterTransmit_BTF+0x8c>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025d8:	d016      	beq.n	8002608 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2211      	movs	r2, #17
 80025ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff fec1 	bl	8002388 <HAL_I2C_MasterTxCpltCallback>
}
 8002606:	e02b      	b.n	8002660 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002616:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002626:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b40      	cmp	r3, #64	@ 0x40
 8002640:	d107      	bne.n	8002652 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fedc 	bl	8002408 <HAL_I2C_MemTxCpltCallback>
}
 8002650:	e006      	b.n	8002660 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fe94 	bl	8002388 <HAL_I2C_MasterTxCpltCallback>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002676:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11d      	bne.n	80026bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10b      	bne.n	80026a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800268c:	b2da      	uxtb	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002698:	1c9a      	adds	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800269e:	e077      	b.n	8002790 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	121b      	asrs	r3, r3, #8
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80026ba:	e069      	b.n	8002790 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10b      	bne.n	80026dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80026da:	e059      	b.n	8002790 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d152      	bne.n	800278a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b22      	cmp	r3, #34	@ 0x22
 80026e8:	d10d      	bne.n	8002706 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002704:	e044      	b.n	8002790 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b21      	cmp	r3, #33	@ 0x21
 8002714:	d112      	bne.n	800273c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800273a:	e029      	b.n	8002790 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d124      	bne.n	8002790 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b21      	cmp	r3, #33	@ 0x21
 800274a:	d121      	bne.n	8002790 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800275a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fe40 	bl	8002408 <HAL_I2C_MemTxCpltCallback>
}
 8002788:	e002      	b.n	8002790 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe ffe8 	bl	8001760 <I2C_Flush_DR>
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b22      	cmp	r3, #34	@ 0x22
 80027aa:	f040 80b9 	bne.w	8002920 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d921      	bls.n	8002806 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	f040 8096 	bne.w	8002920 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002802:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002804:	e08c      	b.n	8002920 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280a:	2b02      	cmp	r3, #2
 800280c:	d07f      	beq.n	800290e <I2C_MasterReceive_RXNE+0x176>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d002      	beq.n	800281a <I2C_MasterReceive_RXNE+0x82>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d179      	bne.n	800290e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f001 fb64 	bl	8003ee8 <I2C_WaitOnSTOPRequestThroughIT>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d14c      	bne.n	80028c0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002834:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002844:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b40      	cmp	r3, #64	@ 0x40
 800287e:	d10a      	bne.n	8002896 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fd ff0c 	bl	80006ac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002894:	e044      	b.n	8002920 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d002      	beq.n	80028aa <I2C_MasterReceive_RXNE+0x112>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d103      	bne.n	80028b2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b0:	e002      	b.n	80028b8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2212      	movs	r2, #18
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fd6f 	bl	800239c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028be:	e02f      	b.n	8002920 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fd88 	bl	800241c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800290c:	e008      	b.n	8002920 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800291c:	605a      	str	r2, [r3, #4]
}
 800291e:	e7ff      	b.n	8002920 <I2C_MasterReceive_RXNE+0x188>
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b04      	cmp	r3, #4
 800293e:	d11b      	bne.n	8002978 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002976:	e0c4      	b.n	8002b02 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b03      	cmp	r3, #3
 8002980:	d129      	bne.n	80029d6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002990:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d00a      	beq.n	80029ae <I2C_MasterReceive_BTF+0x86>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d007      	beq.n	80029ae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80029d4:	e095      	b.n	8002b02 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d17d      	bne.n	8002adc <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d002      	beq.n	80029ec <I2C_MasterReceive_BTF+0xc4>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d108      	bne.n	80029fe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e016      	b.n	8002a2c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d002      	beq.n	8002a0a <I2C_MasterReceive_BTF+0xe2>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d108      	bne.n	8002a1c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e007      	b.n	8002a2c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a86:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b40      	cmp	r3, #64	@ 0x40
 8002a9a:	d10a      	bne.n	8002ab2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fd fdfe 	bl	80006ac <HAL_I2C_MemRxCpltCallback>
}
 8002ab0:	e027      	b.n	8002b02 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d002      	beq.n	8002ac6 <I2C_MasterReceive_BTF+0x19e>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d103      	bne.n	8002ace <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002acc:	e002      	b.n	8002ad4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2212      	movs	r2, #18
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fc61 	bl	800239c <HAL_I2C_MasterRxCpltCallback>
}
 8002ada:	e012      	b.n	8002b02 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b40      	cmp	r3, #64	@ 0x40
 8002b1c:	d117      	bne.n	8002b4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b38:	e067      	b.n	8002c0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]
}
 8002b4c:	e05d      	b.n	8002c0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b56:	d133      	bne.n	8002bc0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b21      	cmp	r3, #33	@ 0x21
 8002b62:	d109      	bne.n	8002b78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e008      	b.n	8002b8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <I2C_Master_SB+0x92>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d108      	bne.n	8002bae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d032      	beq.n	8002c0a <I2C_Master_SB+0x100>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02d      	beq.n	8002c0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bbc:	605a      	str	r2, [r3, #4]
}
 8002bbe:	e024      	b.n	8002c0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10e      	bne.n	8002be6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	11db      	asrs	r3, r3, #7
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 0306 	and.w	r3, r3, #6
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f063 030f 	orn	r3, r3, #15
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	611a      	str	r2, [r3, #16]
}
 8002be4:	e011      	b.n	8002c0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10d      	bne.n	8002c0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	11db      	asrs	r3, r3, #7
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0306 	and.w	r3, r3, #6
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f063 030e 	orn	r3, r3, #14
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <I2C_Master_ADD10+0x26>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d108      	bne.n	8002c4e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00c      	beq.n	8002c5e <I2C_Master_ADD10+0x48>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c5c:	605a      	str	r2, [r3, #4]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b091      	sub	sp, #68	@ 0x44
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b22      	cmp	r3, #34	@ 0x22
 8002c92:	f040 8169 	bne.w	8002f68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <I2C_Master_ADDR+0x54>
 8002c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ca2:	2b40      	cmp	r3, #64	@ 0x40
 8002ca4:	d10b      	bne.n	8002cbe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbc:	e160      	b.n	8002f80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d11d      	bne.n	8002d02 <I2C_Master_ADDR+0x98>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002cce:	d118      	bne.n	8002d02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cf4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d00:	e13e      	b.n	8002f80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d113      	bne.n	8002d34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e115      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	f040 808a 	bne.w	8002e54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d46:	d137      	bne.n	8002db8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d66:	d113      	bne.n	8002d90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	e0e7      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e0d3      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d02e      	beq.n	8002e1c <I2C_Master_ADDR+0x1b2>
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d02b      	beq.n	8002e1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc6:	2b12      	cmp	r3, #18
 8002dc8:	d102      	bne.n	8002dd0 <I2C_Master_ADDR+0x166>
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d125      	bne.n	8002e1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00e      	beq.n	8002df4 <I2C_Master_ADDR+0x18a>
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d00b      	beq.n	8002df4 <I2C_Master_ADDR+0x18a>
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d008      	beq.n	8002df4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e007      	b.n	8002e04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	e0a1      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e085      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d14d      	bne.n	8002efa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d016      	beq.n	8002e92 <I2C_Master_ADDR+0x228>
 8002e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d013      	beq.n	8002e92 <I2C_Master_ADDR+0x228>
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d010      	beq.n	8002e92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e007      	b.n	8002ea2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ea0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eb0:	d117      	bne.n	8002ee2 <I2C_Master_ADDR+0x278>
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002eb8:	d00b      	beq.n	8002ed2 <I2C_Master_ADDR+0x268>
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d008      	beq.n	8002ed2 <I2C_Master_ADDR+0x268>
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d005      	beq.n	8002ed2 <I2C_Master_ADDR+0x268>
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d002      	beq.n	8002ed2 <I2C_Master_ADDR+0x268>
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d107      	bne.n	8002ee2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ee0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	e032      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f18:	d117      	bne.n	8002f4a <I2C_Master_ADDR+0x2e0>
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f20:	d00b      	beq.n	8002f3a <I2C_Master_ADDR+0x2d0>
 8002f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d008      	beq.n	8002f3a <I2C_Master_ADDR+0x2d0>
 8002f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d005      	beq.n	8002f3a <I2C_Master_ADDR+0x2d0>
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d002      	beq.n	8002f3a <I2C_Master_ADDR+0x2d0>
 8002f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d107      	bne.n	8002f4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f66:	e00b      	b.n	8002f80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
}
 8002f7e:	e7ff      	b.n	8002f80 <I2C_Master_ADDR+0x316>
 8002f80:	bf00      	nop
 8002f82:	3744      	adds	r7, #68	@ 0x44
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02b      	beq.n	8002ffe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d114      	bne.n	8002ffe <I2C_SlaveTransmit_TXE+0x72>
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b29      	cmp	r3, #41	@ 0x29
 8002fd8:	d111      	bne.n	8002ffe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2221      	movs	r2, #33	@ 0x21
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2228      	movs	r2, #40	@ 0x28
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff f9d9 	bl	80023b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d011      	beq.n	800303c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003056:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02c      	beq.n	80030bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d114      	bne.n	80030bc <I2C_SlaveReceive_RXNE+0x74>
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b2a      	cmp	r3, #42	@ 0x2a
 8003096:	d111      	bne.n	80030bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2222      	movs	r2, #34	@ 0x22
 80030ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2228      	movs	r2, #40	@ 0x28
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff f984 	bl	80023c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003122:	2b28      	cmp	r3, #40	@ 0x28
 8003124:	d127      	bne.n	8003176 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003134:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	09db      	lsrs	r3, r3, #7
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	81bb      	strh	r3, [r7, #12]
 8003158:	e002      	b.n	8003160 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003168:	89ba      	ldrh	r2, [r7, #12]
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff f932 	bl	80023d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003174:	e00e      	b.n	8003194 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031f8:	d172      	bne.n	80032e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b22      	cmp	r3, #34	@ 0x22
 80031fe:	d002      	beq.n	8003206 <I2C_Slave_STOPF+0x6a>
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b2a      	cmp	r3, #42	@ 0x2a
 8003204:	d135      	bne.n	8003272 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b29a      	uxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003238:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd ff8d 	bl	800115e <HAL_DMA_GetState>
 8003244:	4603      	mov	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d049      	beq.n	80032de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324e:	4a69      	ldr	r2, [pc, #420]	@ (80033f4 <I2C_Slave_STOPF+0x258>)
 8003250:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd ff5f 	bl	800111a <HAL_DMA_Abort_IT>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03d      	beq.n	80032de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800326c:	4610      	mov	r0, r2
 800326e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003270:	e035      	b.n	80032de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	b29a      	uxth	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f043 0204 	orr.w	r2, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd ff57 	bl	800115e <HAL_DMA_GetState>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d014      	beq.n	80032e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ba:	4a4e      	ldr	r2, [pc, #312]	@ (80033f4 <I2C_Slave_STOPF+0x258>)
 80032bc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd ff29 	bl	800111a <HAL_DMA_Abort_IT>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032d8:	4610      	mov	r0, r2
 80032da:	4798      	blx	r3
 80032dc:	e000      	b.n	80032e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03e      	beq.n	8003368 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d112      	bne.n	800331e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d112      	bne.n	8003352 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f043 0204 	orr.w	r2, r3, #4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f8b7 	bl	80034e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003376:	e039      	b.n	80033ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b2a      	cmp	r3, #42	@ 0x2a
 800337c:	d109      	bne.n	8003392 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2228      	movs	r2, #40	@ 0x28
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff f819 	bl	80023c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b28      	cmp	r3, #40	@ 0x28
 800339c:	d111      	bne.n	80033c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <I2C_Slave_STOPF+0x25c>)
 80033a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff f81a 	bl	80023f4 <HAL_I2C_ListenCpltCallback>
}
 80033c0:	e014      	b.n	80033ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	2b22      	cmp	r3, #34	@ 0x22
 80033c8:	d002      	beq.n	80033d0 <I2C_Slave_STOPF+0x234>
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b22      	cmp	r3, #34	@ 0x22
 80033ce:	d10d      	bne.n	80033ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe ffec 	bl	80023c4 <HAL_I2C_SlaveRxCpltCallback>
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	08003a45 	.word	0x08003a45
 80033f8:	ffff0000 	.word	0xffff0000

080033fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d002      	beq.n	800341e <I2C_Slave_AF+0x22>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b20      	cmp	r3, #32
 800341c:	d129      	bne.n	8003472 <I2C_Slave_AF+0x76>
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b28      	cmp	r3, #40	@ 0x28
 8003422:	d126      	bne.n	8003472 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a2e      	ldr	r2, [pc, #184]	@ (80034e0 <I2C_Slave_AF+0xe4>)
 8003428:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003438:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003442:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe ffc2 	bl	80023f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003470:	e031      	b.n	80034d6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b21      	cmp	r3, #33	@ 0x21
 8003476:	d129      	bne.n	80034cc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a19      	ldr	r2, [pc, #100]	@ (80034e0 <I2C_Slave_AF+0xe4>)
 800347c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2221      	movs	r2, #33	@ 0x21
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034bc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe f94e 	bl	8001760 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fe ff73 	bl	80023b0 <HAL_I2C_SlaveTxCpltCallback>
}
 80034ca:	e004      	b.n	80034d6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034d4:	615a      	str	r2, [r3, #20]
}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	ffff0000 	.word	0xffff0000

080034e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d002      	beq.n	8003508 <I2C_ITError+0x24>
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	2b40      	cmp	r3, #64	@ 0x40
 8003506:	d10a      	bne.n	800351e <I2C_ITError+0x3a>
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b22      	cmp	r3, #34	@ 0x22
 800350c:	d107      	bne.n	800351e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003524:	2b28      	cmp	r3, #40	@ 0x28
 8003526:	d107      	bne.n	8003538 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2228      	movs	r2, #40	@ 0x28
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003536:	e015      	b.n	8003564 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003546:	d00a      	beq.n	800355e <I2C_ITError+0x7a>
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b60      	cmp	r3, #96	@ 0x60
 800354c:	d007      	beq.n	800355e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800356e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003572:	d162      	bne.n	800363a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003582:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d020      	beq.n	80035d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003596:	4a6a      	ldr	r2, [pc, #424]	@ (8003740 <I2C_ITError+0x25c>)
 8003598:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fdbb 	bl	800111a <HAL_DMA_Abort_IT>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8089 	beq.w	80036be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035ce:	4610      	mov	r0, r2
 80035d0:	4798      	blx	r3
 80035d2:	e074      	b.n	80036be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	4a59      	ldr	r2, [pc, #356]	@ (8003740 <I2C_ITError+0x25c>)
 80035da:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd fd9a 	bl	800111a <HAL_DMA_Abort_IT>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d068      	beq.n	80036be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f6:	2b40      	cmp	r3, #64	@ 0x40
 80035f8:	d10b      	bne.n	8003612 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003634:	4610      	mov	r0, r2
 8003636:	4798      	blx	r3
 8003638:	e041      	b.n	80036be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b60      	cmp	r3, #96	@ 0x60
 8003644:	d125      	bne.n	8003692 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365e:	2b40      	cmp	r3, #64	@ 0x40
 8003660:	d10b      	bne.n	800367a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe fed0 	bl	8002430 <HAL_I2C_AbortCpltCallback>
 8003690:	e015      	b.n	80036be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369c:	2b40      	cmp	r3, #64	@ 0x40
 800369e:	d10b      	bne.n	80036b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fe feaf 	bl	800241c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10e      	bne.n	80036ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003702:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d113      	bne.n	8003738 <I2C_ITError+0x254>
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b28      	cmp	r3, #40	@ 0x28
 8003714:	d110      	bne.n	8003738 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a0a      	ldr	r2, [pc, #40]	@ (8003744 <I2C_ITError+0x260>)
 800371a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe fe5e 	bl	80023f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	08003a45 	.word	0x08003a45
 8003744:	ffff0000 	.word	0xffff0000

08003748 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	4608      	mov	r0, r1
 8003752:	4611      	mov	r1, r2
 8003754:	461a      	mov	r2, r3
 8003756:	4603      	mov	r3, r0
 8003758:	817b      	strh	r3, [r7, #10]
 800375a:	460b      	mov	r3, r1
 800375c:	813b      	strh	r3, [r7, #8]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003770:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	2200      	movs	r2, #0
 800377a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fa08 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003798:	d103      	bne.n	80037a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e05f      	b.n	8003866 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037a6:	897b      	ldrh	r3, [r7, #10]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	492d      	ldr	r1, [pc, #180]	@ (8003870 <I2C_RequestMemoryWrite+0x128>)
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fa63 	bl	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e04c      	b.n	8003866 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e4:	6a39      	ldr	r1, [r7, #32]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 faee 	bl	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d107      	bne.n	800380a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003808:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e02b      	b.n	8003866 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d105      	bne.n	8003820 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003814:	893b      	ldrh	r3, [r7, #8]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	611a      	str	r2, [r3, #16]
 800381e:	e021      	b.n	8003864 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003820:	893b      	ldrh	r3, [r7, #8]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	b29b      	uxth	r3, r3
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003830:	6a39      	ldr	r1, [r7, #32]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fac8 	bl	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	2b04      	cmp	r3, #4
 8003844:	d107      	bne.n	8003856 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003854:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e005      	b.n	8003866 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800385a:	893b      	ldrh	r3, [r7, #8]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	00010002 	.word	0x00010002

08003874 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	461a      	mov	r2, r3
 8003882:	4603      	mov	r3, r0
 8003884:	817b      	strh	r3, [r7, #10]
 8003886:	460b      	mov	r3, r1
 8003888:	813b      	strh	r3, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800389c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f96a 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00d      	beq.n	80038e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d4:	d103      	bne.n	80038de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0aa      	b.n	8003a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038e2:	897b      	ldrh	r3, [r7, #10]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	4952      	ldr	r1, [pc, #328]	@ (8003a40 <I2C_RequestMemoryRead+0x1cc>)
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f9c5 	bl	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e097      	b.n	8003a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003920:	6a39      	ldr	r1, [r7, #32]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fa50 	bl	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00d      	beq.n	800394a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	2b04      	cmp	r3, #4
 8003934:	d107      	bne.n	8003946 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003944:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e076      	b.n	8003a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d105      	bne.n	800395c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003950:	893b      	ldrh	r3, [r7, #8]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]
 800395a:	e021      	b.n	80039a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800395c:	893b      	ldrh	r3, [r7, #8]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	b29b      	uxth	r3, r3
 8003962:	b2da      	uxtb	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800396a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396c:	6a39      	ldr	r1, [r7, #32]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fa2a 	bl	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00d      	beq.n	8003996 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	2b04      	cmp	r3, #4
 8003980:	d107      	bne.n	8003992 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003990:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e050      	b.n	8003a38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003996:	893b      	ldrh	r3, [r7, #8]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a2:	6a39      	ldr	r1, [r7, #32]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fa0f 	bl	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d107      	bne.n	80039c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e035      	b.n	8003a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f8d3 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00d      	beq.n	8003a10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a02:	d103      	bne.n	8003a0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e013      	b.n	8003a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a10:	897b      	ldrh	r3, [r7, #10]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	6a3a      	ldr	r2, [r7, #32]
 8003a24:	4906      	ldr	r1, [pc, #24]	@ (8003a40 <I2C_RequestMemoryRead+0x1cc>)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f92e 	bl	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	00010002 	.word	0x00010002

08003a44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a5c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b8c <I2C_DMAAbort+0x148>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	08db      	lsrs	r3, r3, #3
 8003a64:	4a4a      	ldr	r2, [pc, #296]	@ (8003b90 <I2C_DMAAbort+0x14c>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	0a1a      	lsrs	r2, r3, #8
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	00da      	lsls	r2, r3, #3
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003a8a:	e00a      	b.n	8003aa2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa0:	d0ea      	beq.n	8003a78 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aae:	2200      	movs	r2, #0
 8003ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	2200      	movs	r2, #0
 8003ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	2200      	movs	r2, #0
 8003af6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b60      	cmp	r3, #96	@ 0x60
 8003b12:	d10e      	bne.n	8003b32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2200      	movs	r2, #0
 8003b28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7fe fc80 	bl	8002430 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b30:	e027      	b.n	8003b82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b38:	2b28      	cmp	r3, #40	@ 0x28
 8003b3a:	d117      	bne.n	8003b6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2228      	movs	r2, #40	@ 0x28
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003b6a:	e007      	b.n	8003b7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f7fe fc4d 	bl	800241c <HAL_I2C_ErrorCallback>
}
 8003b82:	bf00      	nop
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	14f8b589 	.word	0x14f8b589

08003b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba4:	e048      	b.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d044      	beq.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fd f973 	bl	8000e98 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d139      	bne.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	0c1b      	lsrs	r3, r3, #16
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10d      	bne.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	e00c      	b.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d116      	bne.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e023      	b.n	8003c80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10d      	bne.n	8003c5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	43da      	mvns	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	e00c      	b.n	8003c78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	43da      	mvns	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d093      	beq.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c96:	e071      	b.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca6:	d123      	bne.n	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	f043 0204 	orr.w	r2, r3, #4
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e067      	b.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	d041      	beq.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf8:	f7fd f8ce 	bl	8000e98 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d302      	bcc.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d136      	bne.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10c      	bne.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bf14      	ite	ne
 8003d2a:	2301      	movne	r3, #1
 8003d2c:	2300      	moveq	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	e00b      	b.n	8003d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	43da      	mvns	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e021      	b.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10c      	bne.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	43da      	mvns	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf14      	ite	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	2300      	moveq	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e00b      	b.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	43da      	mvns	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf14      	ite	ne
 8003db2:	2301      	movne	r3, #1
 8003db4:	2300      	moveq	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f47f af6d 	bne.w	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd4:	e034      	b.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f915 	bl	8004006 <I2C_IsAcknowledgeFailed>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e034      	b.n	8003e50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d028      	beq.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7fd f853 	bl	8000e98 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d11d      	bne.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0e:	2b80      	cmp	r3, #128	@ 0x80
 8003e10:	d016      	beq.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e007      	b.n	8003e50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d1c3      	bne.n	8003dd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e64:	e034      	b.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f8cd 	bl	8004006 <I2C_IsAcknowledgeFailed>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e034      	b.n	8003ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d028      	beq.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7fd f80b 	bl	8000e98 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d11d      	bne.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d016      	beq.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e007      	b.n	8003ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d1c3      	bne.n	8003e66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ef4:	4b13      	ldr	r3, [pc, #76]	@ (8003f44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	08db      	lsrs	r3, r3, #3
 8003efa:	4a13      	ldr	r2, [pc, #76]	@ (8003f48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	0a1a      	lsrs	r2, r3, #8
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d107      	bne.n	8003f26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e008      	b.n	8003f38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f34:	d0e9      	beq.n	8003f0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	20000000 	.word	0x20000000
 8003f48:	14f8b589 	.word	0x14f8b589

08003f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f58:	e049      	b.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d119      	bne.n	8003f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0210 	mvn.w	r2, #16
 8003f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e030      	b.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9c:	f7fc ff7c 	bl	8000e98 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11d      	bne.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b40      	cmp	r3, #64	@ 0x40
 8003fbe:	d016      	beq.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e007      	b.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff8:	2b40      	cmp	r3, #64	@ 0x40
 8003ffa:	d1ae      	bne.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401c:	d11b      	bne.n	8004056 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004026:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004074:	d103      	bne.n	800407e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800407c:	e007      	b.n	800408e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004086:	d102      	bne.n	800408e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2208      	movs	r2, #8
 800408c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0cc      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b0:	4b68      	ldr	r3, [pc, #416]	@ (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d90c      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b65      	ldr	r3, [pc, #404]	@ (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b63      	ldr	r3, [pc, #396]	@ (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0b8      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f0:	4b59      	ldr	r3, [pc, #356]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a58      	ldr	r2, [pc, #352]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004108:	4b53      	ldr	r3, [pc, #332]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a52      	ldr	r2, [pc, #328]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b50      	ldr	r3, [pc, #320]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	494d      	ldr	r1, [pc, #308]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d044      	beq.n	80041bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b47      	ldr	r3, [pc, #284]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d119      	bne.n	800417a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e07f      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d003      	beq.n	800415a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004156:	2b03      	cmp	r3, #3
 8004158:	d107      	bne.n	800416a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415a:	4b3f      	ldr	r3, [pc, #252]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e06f      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416a:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e067      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417a:	4b37      	ldr	r3, [pc, #220]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f023 0203 	bic.w	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4934      	ldr	r1, [pc, #208]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800418c:	f7fc fe84 	bl	8000e98 <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	e00a      	b.n	80041aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004194:	f7fc fe80 	bl	8000e98 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e04f      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 020c 	and.w	r2, r3, #12
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d1eb      	bne.n	8004194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041bc:	4b25      	ldr	r3, [pc, #148]	@ (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d20c      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b22      	ldr	r3, [pc, #136]	@ (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b20      	ldr	r3, [pc, #128]	@ (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e032      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f0:	4b19      	ldr	r3, [pc, #100]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4916      	ldr	r1, [pc, #88]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800420e:	4b12      	ldr	r3, [pc, #72]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	490e      	ldr	r1, [pc, #56]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004222:	f000 f855 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 8004226:	4602      	mov	r2, r0
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	490a      	ldr	r1, [pc, #40]	@ (800425c <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	5ccb      	ldrb	r3, [r1, r3]
 8004236:	fa22 f303 	lsr.w	r3, r2, r3
 800423a:	4a09      	ldr	r2, [pc, #36]	@ (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800423e:	4b09      	ldr	r3, [pc, #36]	@ (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fc fde4 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023c00 	.word	0x40023c00
 8004258:	40023800 	.word	0x40023800
 800425c:	08005e68 	.word	0x08005e68
 8004260:	20000000 	.word	0x20000000
 8004264:	20000004 	.word	0x20000004

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	@ (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	@ (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	08005e78 	.word	0x08005e78

080042a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042ac:	f7ff ffdc 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0b5b      	lsrs	r3, r3, #13
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	@ (80042cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	08005e78 	.word	0x08005e78

080042d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d4:	b0ae      	sub	sp, #184	@ 0xb8
 80042d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f6:	4bcb      	ldr	r3, [pc, #812]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x354>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	f200 8206 	bhi.w	8004710 <HAL_RCC_GetSysClockFreq+0x440>
 8004304:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004341 	.word	0x08004341
 8004310:	08004711 	.word	0x08004711
 8004314:	08004711 	.word	0x08004711
 8004318:	08004711 	.word	0x08004711
 800431c:	08004349 	.word	0x08004349
 8004320:	08004711 	.word	0x08004711
 8004324:	08004711 	.word	0x08004711
 8004328:	08004711 	.word	0x08004711
 800432c:	08004351 	.word	0x08004351
 8004330:	08004711 	.word	0x08004711
 8004334:	08004711 	.word	0x08004711
 8004338:	08004711 	.word	0x08004711
 800433c:	08004541 	.word	0x08004541
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004340:	4bb9      	ldr	r3, [pc, #740]	@ (8004628 <HAL_RCC_GetSysClockFreq+0x358>)
 8004342:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004346:	e1e7      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004348:	4bb8      	ldr	r3, [pc, #736]	@ (800462c <HAL_RCC_GetSysClockFreq+0x35c>)
 800434a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800434e:	e1e3      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004350:	4bb4      	ldr	r3, [pc, #720]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x354>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800435c:	4bb1      	ldr	r3, [pc, #708]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x354>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d071      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004368:	4bae      	ldr	r3, [pc, #696]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x354>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	2200      	movs	r2, #0
 8004370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004374:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004378:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800437c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004380:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800438a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	0159      	lsls	r1, r3, #5
 800439c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a0:	0150      	lsls	r0, r2, #5
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4621      	mov	r1, r4
 80043a8:	1a51      	subs	r1, r2, r1
 80043aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80043ac:	4629      	mov	r1, r5
 80043ae:	eb63 0301 	sbc.w	r3, r3, r1
 80043b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80043c0:	4649      	mov	r1, r9
 80043c2:	018b      	lsls	r3, r1, #6
 80043c4:	4641      	mov	r1, r8
 80043c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ca:	4641      	mov	r1, r8
 80043cc:	018a      	lsls	r2, r1, #6
 80043ce:	4641      	mov	r1, r8
 80043d0:	1a51      	subs	r1, r2, r1
 80043d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043d4:	4649      	mov	r1, r9
 80043d6:	eb63 0301 	sbc.w	r3, r3, r1
 80043da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80043e8:	4649      	mov	r1, r9
 80043ea:	00cb      	lsls	r3, r1, #3
 80043ec:	4641      	mov	r1, r8
 80043ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f2:	4641      	mov	r1, r8
 80043f4:	00ca      	lsls	r2, r1, #3
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	4622      	mov	r2, r4
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	633b      	str	r3, [r7, #48]	@ 0x30
 8004402:	462b      	mov	r3, r5
 8004404:	460a      	mov	r2, r1
 8004406:	eb42 0303 	adc.w	r3, r2, r3
 800440a:	637b      	str	r3, [r7, #52]	@ 0x34
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004418:	4629      	mov	r1, r5
 800441a:	024b      	lsls	r3, r1, #9
 800441c:	4621      	mov	r1, r4
 800441e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004422:	4621      	mov	r1, r4
 8004424:	024a      	lsls	r2, r1, #9
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004434:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004438:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800443c:	f7fb ff40 	bl	80002c0 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4613      	mov	r3, r2
 8004446:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800444a:	e067      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444c:	4b75      	ldr	r3, [pc, #468]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x354>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	2200      	movs	r2, #0
 8004454:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004458:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800445c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004464:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004466:	2300      	movs	r3, #0
 8004468:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800446a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800446e:	4622      	mov	r2, r4
 8004470:	462b      	mov	r3, r5
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	0159      	lsls	r1, r3, #5
 800447c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004480:	0150      	lsls	r0, r2, #5
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4621      	mov	r1, r4
 8004488:	1a51      	subs	r1, r2, r1
 800448a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800448c:	4629      	mov	r1, r5
 800448e:	eb63 0301 	sbc.w	r3, r3, r1
 8004492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80044a0:	4649      	mov	r1, r9
 80044a2:	018b      	lsls	r3, r1, #6
 80044a4:	4641      	mov	r1, r8
 80044a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044aa:	4641      	mov	r1, r8
 80044ac:	018a      	lsls	r2, r1, #6
 80044ae:	4641      	mov	r1, r8
 80044b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80044b4:	4649      	mov	r1, r9
 80044b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ce:	4692      	mov	sl, r2
 80044d0:	469b      	mov	fp, r3
 80044d2:	4623      	mov	r3, r4
 80044d4:	eb1a 0303 	adds.w	r3, sl, r3
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	462b      	mov	r3, r5
 80044dc:	eb4b 0303 	adc.w	r3, fp, r3
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044ee:	4629      	mov	r1, r5
 80044f0:	028b      	lsls	r3, r1, #10
 80044f2:	4621      	mov	r1, r4
 80044f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044f8:	4621      	mov	r1, r4
 80044fa:	028a      	lsls	r2, r1, #10
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004504:	2200      	movs	r2, #0
 8004506:	673b      	str	r3, [r7, #112]	@ 0x70
 8004508:	677a      	str	r2, [r7, #116]	@ 0x74
 800450a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800450e:	f7fb fed7 	bl	80002c0 <__aeabi_uldivmod>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4613      	mov	r3, r2
 8004518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800451c:	4b41      	ldr	r3, [pc, #260]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x354>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	3301      	adds	r3, #1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800452e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800453e:	e0eb      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004540:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x354>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800454c:	4b35      	ldr	r3, [pc, #212]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x354>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d06b      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004558:	4b32      	ldr	r3, [pc, #200]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x354>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	2200      	movs	r2, #0
 8004560:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004562:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004564:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456a:	663b      	str	r3, [r7, #96]	@ 0x60
 800456c:	2300      	movs	r3, #0
 800456e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004570:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004574:	4622      	mov	r2, r4
 8004576:	462b      	mov	r3, r5
 8004578:	f04f 0000 	mov.w	r0, #0
 800457c:	f04f 0100 	mov.w	r1, #0
 8004580:	0159      	lsls	r1, r3, #5
 8004582:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004586:	0150      	lsls	r0, r2, #5
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4621      	mov	r1, r4
 800458e:	1a51      	subs	r1, r2, r1
 8004590:	61b9      	str	r1, [r7, #24]
 8004592:	4629      	mov	r1, r5
 8004594:	eb63 0301 	sbc.w	r3, r3, r1
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045a6:	4659      	mov	r1, fp
 80045a8:	018b      	lsls	r3, r1, #6
 80045aa:	4651      	mov	r1, sl
 80045ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045b0:	4651      	mov	r1, sl
 80045b2:	018a      	lsls	r2, r1, #6
 80045b4:	4651      	mov	r1, sl
 80045b6:	ebb2 0801 	subs.w	r8, r2, r1
 80045ba:	4659      	mov	r1, fp
 80045bc:	eb63 0901 	sbc.w	r9, r3, r1
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045d4:	4690      	mov	r8, r2
 80045d6:	4699      	mov	r9, r3
 80045d8:	4623      	mov	r3, r4
 80045da:	eb18 0303 	adds.w	r3, r8, r3
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	462b      	mov	r3, r5
 80045e2:	eb49 0303 	adc.w	r3, r9, r3
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80045f4:	4629      	mov	r1, r5
 80045f6:	024b      	lsls	r3, r1, #9
 80045f8:	4621      	mov	r1, r4
 80045fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045fe:	4621      	mov	r1, r4
 8004600:	024a      	lsls	r2, r1, #9
 8004602:	4610      	mov	r0, r2
 8004604:	4619      	mov	r1, r3
 8004606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800460a:	2200      	movs	r2, #0
 800460c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800460e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004610:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004614:	f7fb fe54 	bl	80002c0 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4613      	mov	r3, r2
 800461e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004622:	e065      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0x420>
 8004624:	40023800 	.word	0x40023800
 8004628:	00f42400 	.word	0x00f42400
 800462c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004630:	4b3d      	ldr	r3, [pc, #244]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x458>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	2200      	movs	r2, #0
 8004638:	4618      	mov	r0, r3
 800463a:	4611      	mov	r1, r2
 800463c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004640:	653b      	str	r3, [r7, #80]	@ 0x50
 8004642:	2300      	movs	r3, #0
 8004644:	657b      	str	r3, [r7, #84]	@ 0x54
 8004646:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800464a:	4642      	mov	r2, r8
 800464c:	464b      	mov	r3, r9
 800464e:	f04f 0000 	mov.w	r0, #0
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	0159      	lsls	r1, r3, #5
 8004658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800465c:	0150      	lsls	r0, r2, #5
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4641      	mov	r1, r8
 8004664:	1a51      	subs	r1, r2, r1
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	4649      	mov	r1, r9
 800466a:	eb63 0301 	sbc.w	r3, r3, r1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800467c:	4659      	mov	r1, fp
 800467e:	018b      	lsls	r3, r1, #6
 8004680:	4651      	mov	r1, sl
 8004682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004686:	4651      	mov	r1, sl
 8004688:	018a      	lsls	r2, r1, #6
 800468a:	4651      	mov	r1, sl
 800468c:	1a54      	subs	r4, r2, r1
 800468e:	4659      	mov	r1, fp
 8004690:	eb63 0501 	sbc.w	r5, r3, r1
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	00eb      	lsls	r3, r5, #3
 800469e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046a2:	00e2      	lsls	r2, r4, #3
 80046a4:	4614      	mov	r4, r2
 80046a6:	461d      	mov	r5, r3
 80046a8:	4643      	mov	r3, r8
 80046aa:	18e3      	adds	r3, r4, r3
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	464b      	mov	r3, r9
 80046b0:	eb45 0303 	adc.w	r3, r5, r3
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046c2:	4629      	mov	r1, r5
 80046c4:	028b      	lsls	r3, r1, #10
 80046c6:	4621      	mov	r1, r4
 80046c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046cc:	4621      	mov	r1, r4
 80046ce:	028a      	lsls	r2, r1, #10
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046d8:	2200      	movs	r2, #0
 80046da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80046de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046e2:	f7fb fded 	bl	80002c0 <__aeabi_uldivmod>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4613      	mov	r3, r2
 80046ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x458>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	0f1b      	lsrs	r3, r3, #28
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80046fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004706:	fbb2 f3f3 	udiv	r3, r2, r3
 800470a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800470e:	e003      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004710:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004716:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800471c:	4618      	mov	r0, r3
 800471e:	37b8      	adds	r7, #184	@ 0xb8
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800
 800472c:	00f42400 	.word	0x00f42400

08004730 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e28d      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8083 	beq.w	8004856 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004750:	4b94      	ldr	r3, [pc, #592]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b04      	cmp	r3, #4
 800475a:	d019      	beq.n	8004790 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800475c:	4b91      	ldr	r3, [pc, #580]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 030c 	and.w	r3, r3, #12
        || \
 8004764:	2b08      	cmp	r3, #8
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004768:	4b8e      	ldr	r3, [pc, #568]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004770:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004774:	d00c      	beq.n	8004790 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004776:	4b8b      	ldr	r3, [pc, #556]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d112      	bne.n	80047a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004782:	4b88      	ldr	r3, [pc, #544]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800478e:	d10b      	bne.n	80047a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004790:	4b84      	ldr	r3, [pc, #528]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d05b      	beq.n	8004854 <HAL_RCC_OscConfig+0x124>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d157      	bne.n	8004854 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e25a      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b0:	d106      	bne.n	80047c0 <HAL_RCC_OscConfig+0x90>
 80047b2:	4b7c      	ldr	r3, [pc, #496]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7b      	ldr	r2, [pc, #492]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e01d      	b.n	80047fc <HAL_RCC_OscConfig+0xcc>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0xb4>
 80047ca:	4b76      	ldr	r3, [pc, #472]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a75      	ldr	r2, [pc, #468]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4b73      	ldr	r3, [pc, #460]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a72      	ldr	r2, [pc, #456]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e00b      	b.n	80047fc <HAL_RCC_OscConfig+0xcc>
 80047e4:	4b6f      	ldr	r3, [pc, #444]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6e      	ldr	r2, [pc, #440]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b6c      	ldr	r3, [pc, #432]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a6b      	ldr	r2, [pc, #428]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80047f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fc fb48 	bl	8000e98 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800480c:	f7fc fb44 	bl	8000e98 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	@ 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e21f      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	4b61      	ldr	r3, [pc, #388]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0xdc>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fc fb34 	bl	8000e98 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004834:	f7fc fb30 	bl	8000e98 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	@ 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e20b      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004846:	4b57      	ldr	r3, [pc, #348]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x104>
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d06f      	beq.n	8004942 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004862:	4b50      	ldr	r3, [pc, #320]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b00      	cmp	r3, #0
 800486c:	d017      	beq.n	800489e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800486e:	4b4d      	ldr	r3, [pc, #308]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
        || \
 8004876:	2b08      	cmp	r3, #8
 8004878:	d105      	bne.n	8004886 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800487a:	4b4a      	ldr	r3, [pc, #296]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00b      	beq.n	800489e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004886:	4b47      	ldr	r3, [pc, #284]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d11c      	bne.n	80048cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004892:	4b44      	ldr	r3, [pc, #272]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d116      	bne.n	80048cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489e:	4b41      	ldr	r3, [pc, #260]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <HAL_RCC_OscConfig+0x186>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d001      	beq.n	80048b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e1d3      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b6:	4b3b      	ldr	r3, [pc, #236]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4937      	ldr	r1, [pc, #220]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ca:	e03a      	b.n	8004942 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d020      	beq.n	8004916 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d4:	4b34      	ldr	r3, [pc, #208]	@ (80049a8 <HAL_RCC_OscConfig+0x278>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048da:	f7fc fadd 	bl	8000e98 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e2:	f7fc fad9 	bl	8000e98 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e1b4      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f4:	4b2b      	ldr	r3, [pc, #172]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004900:	4b28      	ldr	r3, [pc, #160]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4925      	ldr	r1, [pc, #148]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]
 8004914:	e015      	b.n	8004942 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004916:	4b24      	ldr	r3, [pc, #144]	@ (80049a8 <HAL_RCC_OscConfig+0x278>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fc fabc 	bl	8000e98 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004924:	f7fc fab8 	bl	8000e98 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e193      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004936:	4b1b      	ldr	r3, [pc, #108]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d036      	beq.n	80049bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004956:	4b15      	ldr	r3, [pc, #84]	@ (80049ac <HAL_RCC_OscConfig+0x27c>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495c:	f7fc fa9c 	bl	8000e98 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004964:	f7fc fa98 	bl	8000e98 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e173      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x234>
 8004982:	e01b      	b.n	80049bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004984:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <HAL_RCC_OscConfig+0x27c>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fc fa85 	bl	8000e98 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004990:	e00e      	b.n	80049b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004992:	f7fc fa81 	bl	8000e98 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d907      	bls.n	80049b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e15c      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
 80049a4:	40023800 	.word	0x40023800
 80049a8:	42470000 	.word	0x42470000
 80049ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b0:	4b8a      	ldr	r3, [pc, #552]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 80049b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1ea      	bne.n	8004992 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8097 	beq.w	8004af8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ca:	2300      	movs	r3, #0
 80049cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ce:	4b83      	ldr	r3, [pc, #524]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10f      	bne.n	80049fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	4b7f      	ldr	r3, [pc, #508]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 80049e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ea:	4b7c      	ldr	r3, [pc, #496]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f6:	2301      	movs	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fa:	4b79      	ldr	r3, [pc, #484]	@ (8004be0 <HAL_RCC_OscConfig+0x4b0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d118      	bne.n	8004a38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a06:	4b76      	ldr	r3, [pc, #472]	@ (8004be0 <HAL_RCC_OscConfig+0x4b0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a75      	ldr	r2, [pc, #468]	@ (8004be0 <HAL_RCC_OscConfig+0x4b0>)
 8004a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a12:	f7fc fa41 	bl	8000e98 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1a:	f7fc fa3d 	bl	8000e98 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e118      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8004be0 <HAL_RCC_OscConfig+0x4b0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d106      	bne.n	8004a4e <HAL_RCC_OscConfig+0x31e>
 8004a40:	4b66      	ldr	r3, [pc, #408]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a44:	4a65      	ldr	r2, [pc, #404]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a4c:	e01c      	b.n	8004a88 <HAL_RCC_OscConfig+0x358>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x340>
 8004a56:	4b61      	ldr	r3, [pc, #388]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5a:	4a60      	ldr	r2, [pc, #384]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a5c:	f043 0304 	orr.w	r3, r3, #4
 8004a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a62:	4b5e      	ldr	r3, [pc, #376]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a66:	4a5d      	ldr	r2, [pc, #372]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a6e:	e00b      	b.n	8004a88 <HAL_RCC_OscConfig+0x358>
 8004a70:	4b5a      	ldr	r3, [pc, #360]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a74:	4a59      	ldr	r2, [pc, #356]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a7c:	4b57      	ldr	r3, [pc, #348]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a80:	4a56      	ldr	r2, [pc, #344]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a82:	f023 0304 	bic.w	r3, r3, #4
 8004a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d015      	beq.n	8004abc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fc fa02 	bl	8000e98 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a98:	f7fc f9fe 	bl	8000e98 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e0d7      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aae:	4b4b      	ldr	r3, [pc, #300]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0ee      	beq.n	8004a98 <HAL_RCC_OscConfig+0x368>
 8004aba:	e014      	b.n	8004ae6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fc f9ec 	bl	8000e98 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fc f9e8 	bl	8000e98 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0c1      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ada:	4b40      	ldr	r3, [pc, #256]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1ee      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d105      	bne.n	8004af8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aec:	4b3b      	ldr	r3, [pc, #236]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	4a3a      	ldr	r2, [pc, #232]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004af6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80ad 	beq.w	8004c5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b02:	4b36      	ldr	r3, [pc, #216]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d060      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d145      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b16:	4b33      	ldr	r3, [pc, #204]	@ (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fc f9bc 	bl	8000e98 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fc f9b8 	bl	8000e98 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e093      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b36:	4b29      	ldr	r3, [pc, #164]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	019b      	lsls	r3, r3, #6
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6c:	071b      	lsls	r3, r3, #28
 8004b6e:	491b      	ldr	r1, [pc, #108]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b74:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fc f98d 	bl	8000e98 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b82:	f7fc f989 	bl	8000e98 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e064      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b94:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x452>
 8004ba0:	e05c      	b.n	8004c5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba2:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fc f976 	bl	8000e98 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fc f972 	bl	8000e98 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e04d      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x480>
 8004bce:	e045      	b.n	8004c5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d107      	bne.n	8004be8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e040      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	40007000 	.word	0x40007000
 8004be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004be8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <HAL_RCC_OscConfig+0x538>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d030      	beq.n	8004c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d129      	bne.n	8004c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d122      	bne.n	8004c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c18:	4013      	ands	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d119      	bne.n	8004c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	3b01      	subs	r3, #1
 8004c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d10f      	bne.n	8004c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800

08004c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e042      	b.n	8004d04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fb ff9c 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	@ 0x24
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f973 	bl	8004f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	@ 0x28
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d175      	bne.n	8004e18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Transmit+0x2c>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e06e      	b.n	8004e1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2221      	movs	r2, #33	@ 0x21
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d4a:	f7fc f8a5 	bl	8000e98 <HAL_GetTick>
 8004d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	88fa      	ldrh	r2, [r7, #6]
 8004d54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d64:	d108      	bne.n	8004d78 <HAL_UART_Transmit+0x6c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	e003      	b.n	8004d80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d80:	e02e      	b.n	8004de0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2180      	movs	r1, #128	@ 0x80
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f848 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e03a      	b.n	8004e1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	e007      	b.n	8004dd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1cb      	bne.n	8004d82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	2140      	movs	r1, #64	@ 0x40
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f814 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e006      	b.n	8004e1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3720      	adds	r7, #32
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e32:	e03b      	b.n	8004eac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d037      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3c:	f7fc f82c 	bl	8000e98 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	6a3a      	ldr	r2, [r7, #32]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e03a      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d023      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b80      	cmp	r3, #128	@ 0x80
 8004e68:	d020      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b40      	cmp	r3, #64	@ 0x40
 8004e6e:	d01d      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d116      	bne.n	8004eac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f81d 	bl	8004ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e00f      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d0b4      	beq.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b095      	sub	sp, #84	@ 0x54
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004efc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e5      	bne.n	8004edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3314      	adds	r3, #20
 8004f2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d119      	bne.n	8004f80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f023 0310 	bic.w	r3, r3, #16
 8004f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f6c:	61ba      	str	r2, [r7, #24]
 8004f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e5      	bne.n	8004f4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f8e:	bf00      	nop
 8004f90:	3754      	adds	r7, #84	@ 0x54
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa0:	b0c0      	sub	sp, #256	@ 0x100
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb8:	68d9      	ldr	r1, [r3, #12]
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	ea40 0301 	orr.w	r3, r0, r1
 8004fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ff4:	f021 010c 	bic.w	r1, r1, #12
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005002:	430b      	orrs	r3, r1
 8005004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005016:	6999      	ldr	r1, [r3, #24]
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	ea40 0301 	orr.w	r3, r0, r1
 8005022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b8f      	ldr	r3, [pc, #572]	@ (8005268 <UART_SetConfig+0x2cc>)
 800502c:	429a      	cmp	r2, r3
 800502e:	d005      	beq.n	800503c <UART_SetConfig+0xa0>
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b8d      	ldr	r3, [pc, #564]	@ (800526c <UART_SetConfig+0x2d0>)
 8005038:	429a      	cmp	r2, r3
 800503a:	d104      	bne.n	8005046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800503c:	f7ff f934 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 8005040:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005044:	e003      	b.n	800504e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005046:	f7ff f91b 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 800504a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005058:	f040 810c 	bne.w	8005274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800505c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005060:	2200      	movs	r2, #0
 8005062:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005066:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800506a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800506e:	4622      	mov	r2, r4
 8005070:	462b      	mov	r3, r5
 8005072:	1891      	adds	r1, r2, r2
 8005074:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005076:	415b      	adcs	r3, r3
 8005078:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800507a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800507e:	4621      	mov	r1, r4
 8005080:	eb12 0801 	adds.w	r8, r2, r1
 8005084:	4629      	mov	r1, r5
 8005086:	eb43 0901 	adc.w	r9, r3, r1
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800509a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800509e:	4690      	mov	r8, r2
 80050a0:	4699      	mov	r9, r3
 80050a2:	4623      	mov	r3, r4
 80050a4:	eb18 0303 	adds.w	r3, r8, r3
 80050a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050ac:	462b      	mov	r3, r5
 80050ae:	eb49 0303 	adc.w	r3, r9, r3
 80050b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050ca:	460b      	mov	r3, r1
 80050cc:	18db      	adds	r3, r3, r3
 80050ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80050d0:	4613      	mov	r3, r2
 80050d2:	eb42 0303 	adc.w	r3, r2, r3
 80050d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80050d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050e0:	f7fb f8ee 	bl	80002c0 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4b61      	ldr	r3, [pc, #388]	@ (8005270 <UART_SetConfig+0x2d4>)
 80050ea:	fba3 2302 	umull	r2, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	011c      	lsls	r4, r3, #4
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	1891      	adds	r1, r2, r2
 800510a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800510c:	415b      	adcs	r3, r3
 800510e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005114:	4641      	mov	r1, r8
 8005116:	eb12 0a01 	adds.w	sl, r2, r1
 800511a:	4649      	mov	r1, r9
 800511c:	eb43 0b01 	adc.w	fp, r3, r1
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800512c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005134:	4692      	mov	sl, r2
 8005136:	469b      	mov	fp, r3
 8005138:	4643      	mov	r3, r8
 800513a:	eb1a 0303 	adds.w	r3, sl, r3
 800513e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005142:	464b      	mov	r3, r9
 8005144:	eb4b 0303 	adc.w	r3, fp, r3
 8005148:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005158:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800515c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005160:	460b      	mov	r3, r1
 8005162:	18db      	adds	r3, r3, r3
 8005164:	643b      	str	r3, [r7, #64]	@ 0x40
 8005166:	4613      	mov	r3, r2
 8005168:	eb42 0303 	adc.w	r3, r2, r3
 800516c:	647b      	str	r3, [r7, #68]	@ 0x44
 800516e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005176:	f7fb f8a3 	bl	80002c0 <__aeabi_uldivmod>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4611      	mov	r1, r2
 8005180:	4b3b      	ldr	r3, [pc, #236]	@ (8005270 <UART_SetConfig+0x2d4>)
 8005182:	fba3 2301 	umull	r2, r3, r3, r1
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	2264      	movs	r2, #100	@ 0x64
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	1acb      	subs	r3, r1, r3
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005196:	4b36      	ldr	r3, [pc, #216]	@ (8005270 <UART_SetConfig+0x2d4>)
 8005198:	fba3 2302 	umull	r2, r3, r3, r2
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051a4:	441c      	add	r4, r3
 80051a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051b8:	4642      	mov	r2, r8
 80051ba:	464b      	mov	r3, r9
 80051bc:	1891      	adds	r1, r2, r2
 80051be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051c0:	415b      	adcs	r3, r3
 80051c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051c8:	4641      	mov	r1, r8
 80051ca:	1851      	adds	r1, r2, r1
 80051cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80051ce:	4649      	mov	r1, r9
 80051d0:	414b      	adcs	r3, r1
 80051d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051e0:	4659      	mov	r1, fp
 80051e2:	00cb      	lsls	r3, r1, #3
 80051e4:	4651      	mov	r1, sl
 80051e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ea:	4651      	mov	r1, sl
 80051ec:	00ca      	lsls	r2, r1, #3
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	4642      	mov	r2, r8
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051fc:	464b      	mov	r3, r9
 80051fe:	460a      	mov	r2, r1
 8005200:	eb42 0303 	adc.w	r3, r2, r3
 8005204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005214:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800521c:	460b      	mov	r3, r1
 800521e:	18db      	adds	r3, r3, r3
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005222:	4613      	mov	r3, r2
 8005224:	eb42 0303 	adc.w	r3, r2, r3
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800522a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800522e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005232:	f7fb f845 	bl	80002c0 <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <UART_SetConfig+0x2d4>)
 800523c:	fba3 1302 	umull	r1, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	2164      	movs	r1, #100	@ 0x64
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	3332      	adds	r3, #50	@ 0x32
 800524e:	4a08      	ldr	r2, [pc, #32]	@ (8005270 <UART_SetConfig+0x2d4>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	f003 0207 	and.w	r2, r3, #7
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4422      	add	r2, r4
 8005262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005264:	e106      	b.n	8005474 <UART_SetConfig+0x4d8>
 8005266:	bf00      	nop
 8005268:	40011000 	.word	0x40011000
 800526c:	40011400 	.word	0x40011400
 8005270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005278:	2200      	movs	r2, #0
 800527a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800527e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005286:	4642      	mov	r2, r8
 8005288:	464b      	mov	r3, r9
 800528a:	1891      	adds	r1, r2, r2
 800528c:	6239      	str	r1, [r7, #32]
 800528e:	415b      	adcs	r3, r3
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
 8005292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005296:	4641      	mov	r1, r8
 8005298:	1854      	adds	r4, r2, r1
 800529a:	4649      	mov	r1, r9
 800529c:	eb43 0501 	adc.w	r5, r3, r1
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	00eb      	lsls	r3, r5, #3
 80052aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ae:	00e2      	lsls	r2, r4, #3
 80052b0:	4614      	mov	r4, r2
 80052b2:	461d      	mov	r5, r3
 80052b4:	4643      	mov	r3, r8
 80052b6:	18e3      	adds	r3, r4, r3
 80052b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052bc:	464b      	mov	r3, r9
 80052be:	eb45 0303 	adc.w	r3, r5, r3
 80052c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052e2:	4629      	mov	r1, r5
 80052e4:	008b      	lsls	r3, r1, #2
 80052e6:	4621      	mov	r1, r4
 80052e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ec:	4621      	mov	r1, r4
 80052ee:	008a      	lsls	r2, r1, #2
 80052f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052f4:	f7fa ffe4 	bl	80002c0 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4b60      	ldr	r3, [pc, #384]	@ (8005480 <UART_SetConfig+0x4e4>)
 80052fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	011c      	lsls	r4, r3, #4
 8005306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800530a:	2200      	movs	r2, #0
 800530c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005310:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005318:	4642      	mov	r2, r8
 800531a:	464b      	mov	r3, r9
 800531c:	1891      	adds	r1, r2, r2
 800531e:	61b9      	str	r1, [r7, #24]
 8005320:	415b      	adcs	r3, r3
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005328:	4641      	mov	r1, r8
 800532a:	1851      	adds	r1, r2, r1
 800532c:	6139      	str	r1, [r7, #16]
 800532e:	4649      	mov	r1, r9
 8005330:	414b      	adcs	r3, r1
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005340:	4659      	mov	r1, fp
 8005342:	00cb      	lsls	r3, r1, #3
 8005344:	4651      	mov	r1, sl
 8005346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800534a:	4651      	mov	r1, sl
 800534c:	00ca      	lsls	r2, r1, #3
 800534e:	4610      	mov	r0, r2
 8005350:	4619      	mov	r1, r3
 8005352:	4603      	mov	r3, r0
 8005354:	4642      	mov	r2, r8
 8005356:	189b      	adds	r3, r3, r2
 8005358:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800535c:	464b      	mov	r3, r9
 800535e:	460a      	mov	r2, r1
 8005360:	eb42 0303 	adc.w	r3, r2, r3
 8005364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005372:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005380:	4649      	mov	r1, r9
 8005382:	008b      	lsls	r3, r1, #2
 8005384:	4641      	mov	r1, r8
 8005386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800538a:	4641      	mov	r1, r8
 800538c:	008a      	lsls	r2, r1, #2
 800538e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005392:	f7fa ff95 	bl	80002c0 <__aeabi_uldivmod>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4611      	mov	r1, r2
 800539c:	4b38      	ldr	r3, [pc, #224]	@ (8005480 <UART_SetConfig+0x4e4>)
 800539e:	fba3 2301 	umull	r2, r3, r3, r1
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2264      	movs	r2, #100	@ 0x64
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	1acb      	subs	r3, r1, r3
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	3332      	adds	r3, #50	@ 0x32
 80053b0:	4a33      	ldr	r2, [pc, #204]	@ (8005480 <UART_SetConfig+0x4e4>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053bc:	441c      	add	r4, r3
 80053be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053c2:	2200      	movs	r2, #0
 80053c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80053c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80053c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053cc:	4642      	mov	r2, r8
 80053ce:	464b      	mov	r3, r9
 80053d0:	1891      	adds	r1, r2, r2
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	415b      	adcs	r3, r3
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053dc:	4641      	mov	r1, r8
 80053de:	1851      	adds	r1, r2, r1
 80053e0:	6039      	str	r1, [r7, #0]
 80053e2:	4649      	mov	r1, r9
 80053e4:	414b      	adcs	r3, r1
 80053e6:	607b      	str	r3, [r7, #4]
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053f4:	4659      	mov	r1, fp
 80053f6:	00cb      	lsls	r3, r1, #3
 80053f8:	4651      	mov	r1, sl
 80053fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053fe:	4651      	mov	r1, sl
 8005400:	00ca      	lsls	r2, r1, #3
 8005402:	4610      	mov	r0, r2
 8005404:	4619      	mov	r1, r3
 8005406:	4603      	mov	r3, r0
 8005408:	4642      	mov	r2, r8
 800540a:	189b      	adds	r3, r3, r2
 800540c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800540e:	464b      	mov	r3, r9
 8005410:	460a      	mov	r2, r1
 8005412:	eb42 0303 	adc.w	r3, r2, r3
 8005416:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	663b      	str	r3, [r7, #96]	@ 0x60
 8005422:	667a      	str	r2, [r7, #100]	@ 0x64
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005430:	4649      	mov	r1, r9
 8005432:	008b      	lsls	r3, r1, #2
 8005434:	4641      	mov	r1, r8
 8005436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800543a:	4641      	mov	r1, r8
 800543c:	008a      	lsls	r2, r1, #2
 800543e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005442:	f7fa ff3d 	bl	80002c0 <__aeabi_uldivmod>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <UART_SetConfig+0x4e4>)
 800544c:	fba3 1302 	umull	r1, r3, r3, r2
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	2164      	movs	r1, #100	@ 0x64
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	3332      	adds	r3, #50	@ 0x32
 800545e:	4a08      	ldr	r2, [pc, #32]	@ (8005480 <UART_SetConfig+0x4e4>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	f003 020f 	and.w	r2, r3, #15
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4422      	add	r2, r4
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	bf00      	nop
 8005476:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800547a:	46bd      	mov	sp, r7
 800547c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005480:	51eb851f 	.word	0x51eb851f

08005484 <siprintf>:
 8005484:	b40e      	push	{r1, r2, r3}
 8005486:	b510      	push	{r4, lr}
 8005488:	b09d      	sub	sp, #116	@ 0x74
 800548a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800548c:	9002      	str	r0, [sp, #8]
 800548e:	9006      	str	r0, [sp, #24]
 8005490:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005494:	480a      	ldr	r0, [pc, #40]	@ (80054c0 <siprintf+0x3c>)
 8005496:	9107      	str	r1, [sp, #28]
 8005498:	9104      	str	r1, [sp, #16]
 800549a:	490a      	ldr	r1, [pc, #40]	@ (80054c4 <siprintf+0x40>)
 800549c:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a0:	9105      	str	r1, [sp, #20]
 80054a2:	2400      	movs	r4, #0
 80054a4:	a902      	add	r1, sp, #8
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80054ac:	f000 f994 	bl	80057d8 <_svfiprintf_r>
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	701c      	strb	r4, [r3, #0]
 80054b4:	b01d      	add	sp, #116	@ 0x74
 80054b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ba:	b003      	add	sp, #12
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	2000000c 	.word	0x2000000c
 80054c4:	ffff0208 	.word	0xffff0208

080054c8 <memset>:
 80054c8:	4402      	add	r2, r0
 80054ca:	4603      	mov	r3, r0
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d100      	bne.n	80054d2 <memset+0xa>
 80054d0:	4770      	bx	lr
 80054d2:	f803 1b01 	strb.w	r1, [r3], #1
 80054d6:	e7f9      	b.n	80054cc <memset+0x4>

080054d8 <__errno>:
 80054d8:	4b01      	ldr	r3, [pc, #4]	@ (80054e0 <__errno+0x8>)
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	2000000c 	.word	0x2000000c

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4d0d      	ldr	r5, [pc, #52]	@ (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005520 <__libc_init_array+0x3c>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2600      	movs	r6, #0
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4d0b      	ldr	r5, [pc, #44]	@ (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005528 <__libc_init_array+0x44>)
 80054f8:	f000 fc64 	bl	8005dc4 <_init>
 80054fc:	1b64      	subs	r4, r4, r5
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2600      	movs	r6, #0
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	08005ebc 	.word	0x08005ebc
 8005520:	08005ebc 	.word	0x08005ebc
 8005524:	08005ebc 	.word	0x08005ebc
 8005528:	08005ec0 	.word	0x08005ec0

0800552c <__retarget_lock_acquire_recursive>:
 800552c:	4770      	bx	lr

0800552e <__retarget_lock_release_recursive>:
 800552e:	4770      	bx	lr

08005530 <_free_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4605      	mov	r5, r0
 8005534:	2900      	cmp	r1, #0
 8005536:	d041      	beq.n	80055bc <_free_r+0x8c>
 8005538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800553c:	1f0c      	subs	r4, r1, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	bfb8      	it	lt
 8005542:	18e4      	addlt	r4, r4, r3
 8005544:	f000 f8e0 	bl	8005708 <__malloc_lock>
 8005548:	4a1d      	ldr	r2, [pc, #116]	@ (80055c0 <_free_r+0x90>)
 800554a:	6813      	ldr	r3, [r2, #0]
 800554c:	b933      	cbnz	r3, 800555c <_free_r+0x2c>
 800554e:	6063      	str	r3, [r4, #4]
 8005550:	6014      	str	r4, [r2, #0]
 8005552:	4628      	mov	r0, r5
 8005554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005558:	f000 b8dc 	b.w	8005714 <__malloc_unlock>
 800555c:	42a3      	cmp	r3, r4
 800555e:	d908      	bls.n	8005572 <_free_r+0x42>
 8005560:	6820      	ldr	r0, [r4, #0]
 8005562:	1821      	adds	r1, r4, r0
 8005564:	428b      	cmp	r3, r1
 8005566:	bf01      	itttt	eq
 8005568:	6819      	ldreq	r1, [r3, #0]
 800556a:	685b      	ldreq	r3, [r3, #4]
 800556c:	1809      	addeq	r1, r1, r0
 800556e:	6021      	streq	r1, [r4, #0]
 8005570:	e7ed      	b.n	800554e <_free_r+0x1e>
 8005572:	461a      	mov	r2, r3
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	b10b      	cbz	r3, 800557c <_free_r+0x4c>
 8005578:	42a3      	cmp	r3, r4
 800557a:	d9fa      	bls.n	8005572 <_free_r+0x42>
 800557c:	6811      	ldr	r1, [r2, #0]
 800557e:	1850      	adds	r0, r2, r1
 8005580:	42a0      	cmp	r0, r4
 8005582:	d10b      	bne.n	800559c <_free_r+0x6c>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	4401      	add	r1, r0
 8005588:	1850      	adds	r0, r2, r1
 800558a:	4283      	cmp	r3, r0
 800558c:	6011      	str	r1, [r2, #0]
 800558e:	d1e0      	bne.n	8005552 <_free_r+0x22>
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	6053      	str	r3, [r2, #4]
 8005596:	4408      	add	r0, r1
 8005598:	6010      	str	r0, [r2, #0]
 800559a:	e7da      	b.n	8005552 <_free_r+0x22>
 800559c:	d902      	bls.n	80055a4 <_free_r+0x74>
 800559e:	230c      	movs	r3, #12
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	e7d6      	b.n	8005552 <_free_r+0x22>
 80055a4:	6820      	ldr	r0, [r4, #0]
 80055a6:	1821      	adds	r1, r4, r0
 80055a8:	428b      	cmp	r3, r1
 80055aa:	bf04      	itt	eq
 80055ac:	6819      	ldreq	r1, [r3, #0]
 80055ae:	685b      	ldreq	r3, [r3, #4]
 80055b0:	6063      	str	r3, [r4, #4]
 80055b2:	bf04      	itt	eq
 80055b4:	1809      	addeq	r1, r1, r0
 80055b6:	6021      	streq	r1, [r4, #0]
 80055b8:	6054      	str	r4, [r2, #4]
 80055ba:	e7ca      	b.n	8005552 <_free_r+0x22>
 80055bc:	bd38      	pop	{r3, r4, r5, pc}
 80055be:	bf00      	nop
 80055c0:	200002f4 	.word	0x200002f4

080055c4 <sbrk_aligned>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4e0f      	ldr	r6, [pc, #60]	@ (8005604 <sbrk_aligned+0x40>)
 80055c8:	460c      	mov	r4, r1
 80055ca:	6831      	ldr	r1, [r6, #0]
 80055cc:	4605      	mov	r5, r0
 80055ce:	b911      	cbnz	r1, 80055d6 <sbrk_aligned+0x12>
 80055d0:	f000 fba4 	bl	8005d1c <_sbrk_r>
 80055d4:	6030      	str	r0, [r6, #0]
 80055d6:	4621      	mov	r1, r4
 80055d8:	4628      	mov	r0, r5
 80055da:	f000 fb9f 	bl	8005d1c <_sbrk_r>
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	d103      	bne.n	80055ea <sbrk_aligned+0x26>
 80055e2:	f04f 34ff 	mov.w	r4, #4294967295
 80055e6:	4620      	mov	r0, r4
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	1cc4      	adds	r4, r0, #3
 80055ec:	f024 0403 	bic.w	r4, r4, #3
 80055f0:	42a0      	cmp	r0, r4
 80055f2:	d0f8      	beq.n	80055e6 <sbrk_aligned+0x22>
 80055f4:	1a21      	subs	r1, r4, r0
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 fb90 	bl	8005d1c <_sbrk_r>
 80055fc:	3001      	adds	r0, #1
 80055fe:	d1f2      	bne.n	80055e6 <sbrk_aligned+0x22>
 8005600:	e7ef      	b.n	80055e2 <sbrk_aligned+0x1e>
 8005602:	bf00      	nop
 8005604:	200002f0 	.word	0x200002f0

08005608 <_malloc_r>:
 8005608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800560c:	1ccd      	adds	r5, r1, #3
 800560e:	f025 0503 	bic.w	r5, r5, #3
 8005612:	3508      	adds	r5, #8
 8005614:	2d0c      	cmp	r5, #12
 8005616:	bf38      	it	cc
 8005618:	250c      	movcc	r5, #12
 800561a:	2d00      	cmp	r5, #0
 800561c:	4606      	mov	r6, r0
 800561e:	db01      	blt.n	8005624 <_malloc_r+0x1c>
 8005620:	42a9      	cmp	r1, r5
 8005622:	d904      	bls.n	800562e <_malloc_r+0x26>
 8005624:	230c      	movs	r3, #12
 8005626:	6033      	str	r3, [r6, #0]
 8005628:	2000      	movs	r0, #0
 800562a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800562e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005704 <_malloc_r+0xfc>
 8005632:	f000 f869 	bl	8005708 <__malloc_lock>
 8005636:	f8d8 3000 	ldr.w	r3, [r8]
 800563a:	461c      	mov	r4, r3
 800563c:	bb44      	cbnz	r4, 8005690 <_malloc_r+0x88>
 800563e:	4629      	mov	r1, r5
 8005640:	4630      	mov	r0, r6
 8005642:	f7ff ffbf 	bl	80055c4 <sbrk_aligned>
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	4604      	mov	r4, r0
 800564a:	d158      	bne.n	80056fe <_malloc_r+0xf6>
 800564c:	f8d8 4000 	ldr.w	r4, [r8]
 8005650:	4627      	mov	r7, r4
 8005652:	2f00      	cmp	r7, #0
 8005654:	d143      	bne.n	80056de <_malloc_r+0xd6>
 8005656:	2c00      	cmp	r4, #0
 8005658:	d04b      	beq.n	80056f2 <_malloc_r+0xea>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	4639      	mov	r1, r7
 800565e:	4630      	mov	r0, r6
 8005660:	eb04 0903 	add.w	r9, r4, r3
 8005664:	f000 fb5a 	bl	8005d1c <_sbrk_r>
 8005668:	4581      	cmp	r9, r0
 800566a:	d142      	bne.n	80056f2 <_malloc_r+0xea>
 800566c:	6821      	ldr	r1, [r4, #0]
 800566e:	1a6d      	subs	r5, r5, r1
 8005670:	4629      	mov	r1, r5
 8005672:	4630      	mov	r0, r6
 8005674:	f7ff ffa6 	bl	80055c4 <sbrk_aligned>
 8005678:	3001      	adds	r0, #1
 800567a:	d03a      	beq.n	80056f2 <_malloc_r+0xea>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	442b      	add	r3, r5
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	f8d8 3000 	ldr.w	r3, [r8]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	bb62      	cbnz	r2, 80056e4 <_malloc_r+0xdc>
 800568a:	f8c8 7000 	str.w	r7, [r8]
 800568e:	e00f      	b.n	80056b0 <_malloc_r+0xa8>
 8005690:	6822      	ldr	r2, [r4, #0]
 8005692:	1b52      	subs	r2, r2, r5
 8005694:	d420      	bmi.n	80056d8 <_malloc_r+0xd0>
 8005696:	2a0b      	cmp	r2, #11
 8005698:	d917      	bls.n	80056ca <_malloc_r+0xc2>
 800569a:	1961      	adds	r1, r4, r5
 800569c:	42a3      	cmp	r3, r4
 800569e:	6025      	str	r5, [r4, #0]
 80056a0:	bf18      	it	ne
 80056a2:	6059      	strne	r1, [r3, #4]
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	bf08      	it	eq
 80056a8:	f8c8 1000 	streq.w	r1, [r8]
 80056ac:	5162      	str	r2, [r4, r5]
 80056ae:	604b      	str	r3, [r1, #4]
 80056b0:	4630      	mov	r0, r6
 80056b2:	f000 f82f 	bl	8005714 <__malloc_unlock>
 80056b6:	f104 000b 	add.w	r0, r4, #11
 80056ba:	1d23      	adds	r3, r4, #4
 80056bc:	f020 0007 	bic.w	r0, r0, #7
 80056c0:	1ac2      	subs	r2, r0, r3
 80056c2:	bf1c      	itt	ne
 80056c4:	1a1b      	subne	r3, r3, r0
 80056c6:	50a3      	strne	r3, [r4, r2]
 80056c8:	e7af      	b.n	800562a <_malloc_r+0x22>
 80056ca:	6862      	ldr	r2, [r4, #4]
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	bf0c      	ite	eq
 80056d0:	f8c8 2000 	streq.w	r2, [r8]
 80056d4:	605a      	strne	r2, [r3, #4]
 80056d6:	e7eb      	b.n	80056b0 <_malloc_r+0xa8>
 80056d8:	4623      	mov	r3, r4
 80056da:	6864      	ldr	r4, [r4, #4]
 80056dc:	e7ae      	b.n	800563c <_malloc_r+0x34>
 80056de:	463c      	mov	r4, r7
 80056e0:	687f      	ldr	r7, [r7, #4]
 80056e2:	e7b6      	b.n	8005652 <_malloc_r+0x4a>
 80056e4:	461a      	mov	r2, r3
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	d1fb      	bne.n	80056e4 <_malloc_r+0xdc>
 80056ec:	2300      	movs	r3, #0
 80056ee:	6053      	str	r3, [r2, #4]
 80056f0:	e7de      	b.n	80056b0 <_malloc_r+0xa8>
 80056f2:	230c      	movs	r3, #12
 80056f4:	6033      	str	r3, [r6, #0]
 80056f6:	4630      	mov	r0, r6
 80056f8:	f000 f80c 	bl	8005714 <__malloc_unlock>
 80056fc:	e794      	b.n	8005628 <_malloc_r+0x20>
 80056fe:	6005      	str	r5, [r0, #0]
 8005700:	e7d6      	b.n	80056b0 <_malloc_r+0xa8>
 8005702:	bf00      	nop
 8005704:	200002f4 	.word	0x200002f4

08005708 <__malloc_lock>:
 8005708:	4801      	ldr	r0, [pc, #4]	@ (8005710 <__malloc_lock+0x8>)
 800570a:	f7ff bf0f 	b.w	800552c <__retarget_lock_acquire_recursive>
 800570e:	bf00      	nop
 8005710:	200002ec 	.word	0x200002ec

08005714 <__malloc_unlock>:
 8005714:	4801      	ldr	r0, [pc, #4]	@ (800571c <__malloc_unlock+0x8>)
 8005716:	f7ff bf0a 	b.w	800552e <__retarget_lock_release_recursive>
 800571a:	bf00      	nop
 800571c:	200002ec 	.word	0x200002ec

08005720 <__ssputs_r>:
 8005720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	688e      	ldr	r6, [r1, #8]
 8005726:	461f      	mov	r7, r3
 8005728:	42be      	cmp	r6, r7
 800572a:	680b      	ldr	r3, [r1, #0]
 800572c:	4682      	mov	sl, r0
 800572e:	460c      	mov	r4, r1
 8005730:	4690      	mov	r8, r2
 8005732:	d82d      	bhi.n	8005790 <__ssputs_r+0x70>
 8005734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005738:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800573c:	d026      	beq.n	800578c <__ssputs_r+0x6c>
 800573e:	6965      	ldr	r5, [r4, #20]
 8005740:	6909      	ldr	r1, [r1, #16]
 8005742:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005746:	eba3 0901 	sub.w	r9, r3, r1
 800574a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800574e:	1c7b      	adds	r3, r7, #1
 8005750:	444b      	add	r3, r9
 8005752:	106d      	asrs	r5, r5, #1
 8005754:	429d      	cmp	r5, r3
 8005756:	bf38      	it	cc
 8005758:	461d      	movcc	r5, r3
 800575a:	0553      	lsls	r3, r2, #21
 800575c:	d527      	bpl.n	80057ae <__ssputs_r+0x8e>
 800575e:	4629      	mov	r1, r5
 8005760:	f7ff ff52 	bl	8005608 <_malloc_r>
 8005764:	4606      	mov	r6, r0
 8005766:	b360      	cbz	r0, 80057c2 <__ssputs_r+0xa2>
 8005768:	6921      	ldr	r1, [r4, #16]
 800576a:	464a      	mov	r2, r9
 800576c:	f000 fae6 	bl	8005d3c <memcpy>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800577a:	81a3      	strh	r3, [r4, #12]
 800577c:	6126      	str	r6, [r4, #16]
 800577e:	6165      	str	r5, [r4, #20]
 8005780:	444e      	add	r6, r9
 8005782:	eba5 0509 	sub.w	r5, r5, r9
 8005786:	6026      	str	r6, [r4, #0]
 8005788:	60a5      	str	r5, [r4, #8]
 800578a:	463e      	mov	r6, r7
 800578c:	42be      	cmp	r6, r7
 800578e:	d900      	bls.n	8005792 <__ssputs_r+0x72>
 8005790:	463e      	mov	r6, r7
 8005792:	6820      	ldr	r0, [r4, #0]
 8005794:	4632      	mov	r2, r6
 8005796:	4641      	mov	r1, r8
 8005798:	f000 faa6 	bl	8005ce8 <memmove>
 800579c:	68a3      	ldr	r3, [r4, #8]
 800579e:	1b9b      	subs	r3, r3, r6
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	4433      	add	r3, r6
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	2000      	movs	r0, #0
 80057aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ae:	462a      	mov	r2, r5
 80057b0:	f000 fad2 	bl	8005d58 <_realloc_r>
 80057b4:	4606      	mov	r6, r0
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d1e0      	bne.n	800577c <__ssputs_r+0x5c>
 80057ba:	6921      	ldr	r1, [r4, #16]
 80057bc:	4650      	mov	r0, sl
 80057be:	f7ff feb7 	bl	8005530 <_free_r>
 80057c2:	230c      	movs	r3, #12
 80057c4:	f8ca 3000 	str.w	r3, [sl]
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	e7e9      	b.n	80057aa <__ssputs_r+0x8a>
	...

080057d8 <_svfiprintf_r>:
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	4698      	mov	r8, r3
 80057de:	898b      	ldrh	r3, [r1, #12]
 80057e0:	061b      	lsls	r3, r3, #24
 80057e2:	b09d      	sub	sp, #116	@ 0x74
 80057e4:	4607      	mov	r7, r0
 80057e6:	460d      	mov	r5, r1
 80057e8:	4614      	mov	r4, r2
 80057ea:	d510      	bpl.n	800580e <_svfiprintf_r+0x36>
 80057ec:	690b      	ldr	r3, [r1, #16]
 80057ee:	b973      	cbnz	r3, 800580e <_svfiprintf_r+0x36>
 80057f0:	2140      	movs	r1, #64	@ 0x40
 80057f2:	f7ff ff09 	bl	8005608 <_malloc_r>
 80057f6:	6028      	str	r0, [r5, #0]
 80057f8:	6128      	str	r0, [r5, #16]
 80057fa:	b930      	cbnz	r0, 800580a <_svfiprintf_r+0x32>
 80057fc:	230c      	movs	r3, #12
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	b01d      	add	sp, #116	@ 0x74
 8005806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580a:	2340      	movs	r3, #64	@ 0x40
 800580c:	616b      	str	r3, [r5, #20]
 800580e:	2300      	movs	r3, #0
 8005810:	9309      	str	r3, [sp, #36]	@ 0x24
 8005812:	2320      	movs	r3, #32
 8005814:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005818:	f8cd 800c 	str.w	r8, [sp, #12]
 800581c:	2330      	movs	r3, #48	@ 0x30
 800581e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059bc <_svfiprintf_r+0x1e4>
 8005822:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005826:	f04f 0901 	mov.w	r9, #1
 800582a:	4623      	mov	r3, r4
 800582c:	469a      	mov	sl, r3
 800582e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005832:	b10a      	cbz	r2, 8005838 <_svfiprintf_r+0x60>
 8005834:	2a25      	cmp	r2, #37	@ 0x25
 8005836:	d1f9      	bne.n	800582c <_svfiprintf_r+0x54>
 8005838:	ebba 0b04 	subs.w	fp, sl, r4
 800583c:	d00b      	beq.n	8005856 <_svfiprintf_r+0x7e>
 800583e:	465b      	mov	r3, fp
 8005840:	4622      	mov	r2, r4
 8005842:	4629      	mov	r1, r5
 8005844:	4638      	mov	r0, r7
 8005846:	f7ff ff6b 	bl	8005720 <__ssputs_r>
 800584a:	3001      	adds	r0, #1
 800584c:	f000 80a7 	beq.w	800599e <_svfiprintf_r+0x1c6>
 8005850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005852:	445a      	add	r2, fp
 8005854:	9209      	str	r2, [sp, #36]	@ 0x24
 8005856:	f89a 3000 	ldrb.w	r3, [sl]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 809f 	beq.w	800599e <_svfiprintf_r+0x1c6>
 8005860:	2300      	movs	r3, #0
 8005862:	f04f 32ff 	mov.w	r2, #4294967295
 8005866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800586a:	f10a 0a01 	add.w	sl, sl, #1
 800586e:	9304      	str	r3, [sp, #16]
 8005870:	9307      	str	r3, [sp, #28]
 8005872:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005876:	931a      	str	r3, [sp, #104]	@ 0x68
 8005878:	4654      	mov	r4, sl
 800587a:	2205      	movs	r2, #5
 800587c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005880:	484e      	ldr	r0, [pc, #312]	@ (80059bc <_svfiprintf_r+0x1e4>)
 8005882:	f7fa fccd 	bl	8000220 <memchr>
 8005886:	9a04      	ldr	r2, [sp, #16]
 8005888:	b9d8      	cbnz	r0, 80058c2 <_svfiprintf_r+0xea>
 800588a:	06d0      	lsls	r0, r2, #27
 800588c:	bf44      	itt	mi
 800588e:	2320      	movmi	r3, #32
 8005890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005894:	0711      	lsls	r1, r2, #28
 8005896:	bf44      	itt	mi
 8005898:	232b      	movmi	r3, #43	@ 0x2b
 800589a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800589e:	f89a 3000 	ldrb.w	r3, [sl]
 80058a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80058a4:	d015      	beq.n	80058d2 <_svfiprintf_r+0xfa>
 80058a6:	9a07      	ldr	r2, [sp, #28]
 80058a8:	4654      	mov	r4, sl
 80058aa:	2000      	movs	r0, #0
 80058ac:	f04f 0c0a 	mov.w	ip, #10
 80058b0:	4621      	mov	r1, r4
 80058b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058b6:	3b30      	subs	r3, #48	@ 0x30
 80058b8:	2b09      	cmp	r3, #9
 80058ba:	d94b      	bls.n	8005954 <_svfiprintf_r+0x17c>
 80058bc:	b1b0      	cbz	r0, 80058ec <_svfiprintf_r+0x114>
 80058be:	9207      	str	r2, [sp, #28]
 80058c0:	e014      	b.n	80058ec <_svfiprintf_r+0x114>
 80058c2:	eba0 0308 	sub.w	r3, r0, r8
 80058c6:	fa09 f303 	lsl.w	r3, r9, r3
 80058ca:	4313      	orrs	r3, r2
 80058cc:	9304      	str	r3, [sp, #16]
 80058ce:	46a2      	mov	sl, r4
 80058d0:	e7d2      	b.n	8005878 <_svfiprintf_r+0xa0>
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	1d19      	adds	r1, r3, #4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	9103      	str	r1, [sp, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bfbb      	ittet	lt
 80058de:	425b      	neglt	r3, r3
 80058e0:	f042 0202 	orrlt.w	r2, r2, #2
 80058e4:	9307      	strge	r3, [sp, #28]
 80058e6:	9307      	strlt	r3, [sp, #28]
 80058e8:	bfb8      	it	lt
 80058ea:	9204      	strlt	r2, [sp, #16]
 80058ec:	7823      	ldrb	r3, [r4, #0]
 80058ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80058f0:	d10a      	bne.n	8005908 <_svfiprintf_r+0x130>
 80058f2:	7863      	ldrb	r3, [r4, #1]
 80058f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80058f6:	d132      	bne.n	800595e <_svfiprintf_r+0x186>
 80058f8:	9b03      	ldr	r3, [sp, #12]
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	9203      	str	r2, [sp, #12]
 8005900:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005904:	3402      	adds	r4, #2
 8005906:	9305      	str	r3, [sp, #20]
 8005908:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80059cc <_svfiprintf_r+0x1f4>
 800590c:	7821      	ldrb	r1, [r4, #0]
 800590e:	2203      	movs	r2, #3
 8005910:	4650      	mov	r0, sl
 8005912:	f7fa fc85 	bl	8000220 <memchr>
 8005916:	b138      	cbz	r0, 8005928 <_svfiprintf_r+0x150>
 8005918:	9b04      	ldr	r3, [sp, #16]
 800591a:	eba0 000a 	sub.w	r0, r0, sl
 800591e:	2240      	movs	r2, #64	@ 0x40
 8005920:	4082      	lsls	r2, r0
 8005922:	4313      	orrs	r3, r2
 8005924:	3401      	adds	r4, #1
 8005926:	9304      	str	r3, [sp, #16]
 8005928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592c:	4824      	ldr	r0, [pc, #144]	@ (80059c0 <_svfiprintf_r+0x1e8>)
 800592e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005932:	2206      	movs	r2, #6
 8005934:	f7fa fc74 	bl	8000220 <memchr>
 8005938:	2800      	cmp	r0, #0
 800593a:	d036      	beq.n	80059aa <_svfiprintf_r+0x1d2>
 800593c:	4b21      	ldr	r3, [pc, #132]	@ (80059c4 <_svfiprintf_r+0x1ec>)
 800593e:	bb1b      	cbnz	r3, 8005988 <_svfiprintf_r+0x1b0>
 8005940:	9b03      	ldr	r3, [sp, #12]
 8005942:	3307      	adds	r3, #7
 8005944:	f023 0307 	bic.w	r3, r3, #7
 8005948:	3308      	adds	r3, #8
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800594e:	4433      	add	r3, r6
 8005950:	9309      	str	r3, [sp, #36]	@ 0x24
 8005952:	e76a      	b.n	800582a <_svfiprintf_r+0x52>
 8005954:	fb0c 3202 	mla	r2, ip, r2, r3
 8005958:	460c      	mov	r4, r1
 800595a:	2001      	movs	r0, #1
 800595c:	e7a8      	b.n	80058b0 <_svfiprintf_r+0xd8>
 800595e:	2300      	movs	r3, #0
 8005960:	3401      	adds	r4, #1
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	4619      	mov	r1, r3
 8005966:	f04f 0c0a 	mov.w	ip, #10
 800596a:	4620      	mov	r0, r4
 800596c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005970:	3a30      	subs	r2, #48	@ 0x30
 8005972:	2a09      	cmp	r2, #9
 8005974:	d903      	bls.n	800597e <_svfiprintf_r+0x1a6>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0c6      	beq.n	8005908 <_svfiprintf_r+0x130>
 800597a:	9105      	str	r1, [sp, #20]
 800597c:	e7c4      	b.n	8005908 <_svfiprintf_r+0x130>
 800597e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005982:	4604      	mov	r4, r0
 8005984:	2301      	movs	r3, #1
 8005986:	e7f0      	b.n	800596a <_svfiprintf_r+0x192>
 8005988:	ab03      	add	r3, sp, #12
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	462a      	mov	r2, r5
 800598e:	4b0e      	ldr	r3, [pc, #56]	@ (80059c8 <_svfiprintf_r+0x1f0>)
 8005990:	a904      	add	r1, sp, #16
 8005992:	4638      	mov	r0, r7
 8005994:	f3af 8000 	nop.w
 8005998:	1c42      	adds	r2, r0, #1
 800599a:	4606      	mov	r6, r0
 800599c:	d1d6      	bne.n	800594c <_svfiprintf_r+0x174>
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	065b      	lsls	r3, r3, #25
 80059a2:	f53f af2d 	bmi.w	8005800 <_svfiprintf_r+0x28>
 80059a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059a8:	e72c      	b.n	8005804 <_svfiprintf_r+0x2c>
 80059aa:	ab03      	add	r3, sp, #12
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	462a      	mov	r2, r5
 80059b0:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <_svfiprintf_r+0x1f0>)
 80059b2:	a904      	add	r1, sp, #16
 80059b4:	4638      	mov	r0, r7
 80059b6:	f000 f879 	bl	8005aac <_printf_i>
 80059ba:	e7ed      	b.n	8005998 <_svfiprintf_r+0x1c0>
 80059bc:	08005e80 	.word	0x08005e80
 80059c0:	08005e8a 	.word	0x08005e8a
 80059c4:	00000000 	.word	0x00000000
 80059c8:	08005721 	.word	0x08005721
 80059cc:	08005e86 	.word	0x08005e86

080059d0 <_printf_common>:
 80059d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	4616      	mov	r6, r2
 80059d6:	4698      	mov	r8, r3
 80059d8:	688a      	ldr	r2, [r1, #8]
 80059da:	690b      	ldr	r3, [r1, #16]
 80059dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bfb8      	it	lt
 80059e4:	4613      	movlt	r3, r2
 80059e6:	6033      	str	r3, [r6, #0]
 80059e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059ec:	4607      	mov	r7, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	b10a      	cbz	r2, 80059f6 <_printf_common+0x26>
 80059f2:	3301      	adds	r3, #1
 80059f4:	6033      	str	r3, [r6, #0]
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	0699      	lsls	r1, r3, #26
 80059fa:	bf42      	ittt	mi
 80059fc:	6833      	ldrmi	r3, [r6, #0]
 80059fe:	3302      	addmi	r3, #2
 8005a00:	6033      	strmi	r3, [r6, #0]
 8005a02:	6825      	ldr	r5, [r4, #0]
 8005a04:	f015 0506 	ands.w	r5, r5, #6
 8005a08:	d106      	bne.n	8005a18 <_printf_common+0x48>
 8005a0a:	f104 0a19 	add.w	sl, r4, #25
 8005a0e:	68e3      	ldr	r3, [r4, #12]
 8005a10:	6832      	ldr	r2, [r6, #0]
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	dc26      	bgt.n	8005a66 <_printf_common+0x96>
 8005a18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	3b00      	subs	r3, #0
 8005a20:	bf18      	it	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	0692      	lsls	r2, r2, #26
 8005a26:	d42b      	bmi.n	8005a80 <_printf_common+0xb0>
 8005a28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	4638      	mov	r0, r7
 8005a30:	47c8      	blx	r9
 8005a32:	3001      	adds	r0, #1
 8005a34:	d01e      	beq.n	8005a74 <_printf_common+0xa4>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	6922      	ldr	r2, [r4, #16]
 8005a3a:	f003 0306 	and.w	r3, r3, #6
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	bf02      	ittt	eq
 8005a42:	68e5      	ldreq	r5, [r4, #12]
 8005a44:	6833      	ldreq	r3, [r6, #0]
 8005a46:	1aed      	subeq	r5, r5, r3
 8005a48:	68a3      	ldr	r3, [r4, #8]
 8005a4a:	bf0c      	ite	eq
 8005a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a50:	2500      	movne	r5, #0
 8005a52:	4293      	cmp	r3, r2
 8005a54:	bfc4      	itt	gt
 8005a56:	1a9b      	subgt	r3, r3, r2
 8005a58:	18ed      	addgt	r5, r5, r3
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	341a      	adds	r4, #26
 8005a5e:	42b5      	cmp	r5, r6
 8005a60:	d11a      	bne.n	8005a98 <_printf_common+0xc8>
 8005a62:	2000      	movs	r0, #0
 8005a64:	e008      	b.n	8005a78 <_printf_common+0xa8>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4652      	mov	r2, sl
 8005a6a:	4641      	mov	r1, r8
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	47c8      	blx	r9
 8005a70:	3001      	adds	r0, #1
 8005a72:	d103      	bne.n	8005a7c <_printf_common+0xac>
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	e7c6      	b.n	8005a0e <_printf_common+0x3e>
 8005a80:	18e1      	adds	r1, r4, r3
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	2030      	movs	r0, #48	@ 0x30
 8005a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a8a:	4422      	add	r2, r4
 8005a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a94:	3302      	adds	r3, #2
 8005a96:	e7c7      	b.n	8005a28 <_printf_common+0x58>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	47c8      	blx	r9
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d0e6      	beq.n	8005a74 <_printf_common+0xa4>
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7d9      	b.n	8005a5e <_printf_common+0x8e>
	...

08005aac <_printf_i>:
 8005aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	7e0f      	ldrb	r7, [r1, #24]
 8005ab2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ab4:	2f78      	cmp	r7, #120	@ 0x78
 8005ab6:	4691      	mov	r9, r2
 8005ab8:	4680      	mov	r8, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	469a      	mov	sl, r3
 8005abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ac2:	d807      	bhi.n	8005ad4 <_printf_i+0x28>
 8005ac4:	2f62      	cmp	r7, #98	@ 0x62
 8005ac6:	d80a      	bhi.n	8005ade <_printf_i+0x32>
 8005ac8:	2f00      	cmp	r7, #0
 8005aca:	f000 80d1 	beq.w	8005c70 <_printf_i+0x1c4>
 8005ace:	2f58      	cmp	r7, #88	@ 0x58
 8005ad0:	f000 80b8 	beq.w	8005c44 <_printf_i+0x198>
 8005ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005adc:	e03a      	b.n	8005b54 <_printf_i+0xa8>
 8005ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ae2:	2b15      	cmp	r3, #21
 8005ae4:	d8f6      	bhi.n	8005ad4 <_printf_i+0x28>
 8005ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8005aec <_printf_i+0x40>)
 8005ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005aec:	08005b45 	.word	0x08005b45
 8005af0:	08005b59 	.word	0x08005b59
 8005af4:	08005ad5 	.word	0x08005ad5
 8005af8:	08005ad5 	.word	0x08005ad5
 8005afc:	08005ad5 	.word	0x08005ad5
 8005b00:	08005ad5 	.word	0x08005ad5
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005ad5 	.word	0x08005ad5
 8005b0c:	08005ad5 	.word	0x08005ad5
 8005b10:	08005ad5 	.word	0x08005ad5
 8005b14:	08005ad5 	.word	0x08005ad5
 8005b18:	08005c57 	.word	0x08005c57
 8005b1c:	08005b83 	.word	0x08005b83
 8005b20:	08005c11 	.word	0x08005c11
 8005b24:	08005ad5 	.word	0x08005ad5
 8005b28:	08005ad5 	.word	0x08005ad5
 8005b2c:	08005c79 	.word	0x08005c79
 8005b30:	08005ad5 	.word	0x08005ad5
 8005b34:	08005b83 	.word	0x08005b83
 8005b38:	08005ad5 	.word	0x08005ad5
 8005b3c:	08005ad5 	.word	0x08005ad5
 8005b40:	08005c19 	.word	0x08005c19
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	1d1a      	adds	r2, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6032      	str	r2, [r6, #0]
 8005b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b54:	2301      	movs	r3, #1
 8005b56:	e09c      	b.n	8005c92 <_printf_i+0x1e6>
 8005b58:	6833      	ldr	r3, [r6, #0]
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	1d19      	adds	r1, r3, #4
 8005b5e:	6031      	str	r1, [r6, #0]
 8005b60:	0606      	lsls	r6, r0, #24
 8005b62:	d501      	bpl.n	8005b68 <_printf_i+0xbc>
 8005b64:	681d      	ldr	r5, [r3, #0]
 8005b66:	e003      	b.n	8005b70 <_printf_i+0xc4>
 8005b68:	0645      	lsls	r5, r0, #25
 8005b6a:	d5fb      	bpl.n	8005b64 <_printf_i+0xb8>
 8005b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b70:	2d00      	cmp	r5, #0
 8005b72:	da03      	bge.n	8005b7c <_printf_i+0xd0>
 8005b74:	232d      	movs	r3, #45	@ 0x2d
 8005b76:	426d      	negs	r5, r5
 8005b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b7c:	4858      	ldr	r0, [pc, #352]	@ (8005ce0 <_printf_i+0x234>)
 8005b7e:	230a      	movs	r3, #10
 8005b80:	e011      	b.n	8005ba6 <_printf_i+0xfa>
 8005b82:	6821      	ldr	r1, [r4, #0]
 8005b84:	6833      	ldr	r3, [r6, #0]
 8005b86:	0608      	lsls	r0, r1, #24
 8005b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b8c:	d402      	bmi.n	8005b94 <_printf_i+0xe8>
 8005b8e:	0649      	lsls	r1, r1, #25
 8005b90:	bf48      	it	mi
 8005b92:	b2ad      	uxthmi	r5, r5
 8005b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b96:	4852      	ldr	r0, [pc, #328]	@ (8005ce0 <_printf_i+0x234>)
 8005b98:	6033      	str	r3, [r6, #0]
 8005b9a:	bf14      	ite	ne
 8005b9c:	230a      	movne	r3, #10
 8005b9e:	2308      	moveq	r3, #8
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ba6:	6866      	ldr	r6, [r4, #4]
 8005ba8:	60a6      	str	r6, [r4, #8]
 8005baa:	2e00      	cmp	r6, #0
 8005bac:	db05      	blt.n	8005bba <_printf_i+0x10e>
 8005bae:	6821      	ldr	r1, [r4, #0]
 8005bb0:	432e      	orrs	r6, r5
 8005bb2:	f021 0104 	bic.w	r1, r1, #4
 8005bb6:	6021      	str	r1, [r4, #0]
 8005bb8:	d04b      	beq.n	8005c52 <_printf_i+0x1a6>
 8005bba:	4616      	mov	r6, r2
 8005bbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bc0:	fb03 5711 	mls	r7, r3, r1, r5
 8005bc4:	5dc7      	ldrb	r7, [r0, r7]
 8005bc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bca:	462f      	mov	r7, r5
 8005bcc:	42bb      	cmp	r3, r7
 8005bce:	460d      	mov	r5, r1
 8005bd0:	d9f4      	bls.n	8005bbc <_printf_i+0x110>
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d10b      	bne.n	8005bee <_printf_i+0x142>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	07df      	lsls	r7, r3, #31
 8005bda:	d508      	bpl.n	8005bee <_printf_i+0x142>
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	6861      	ldr	r1, [r4, #4]
 8005be0:	4299      	cmp	r1, r3
 8005be2:	bfde      	ittt	le
 8005be4:	2330      	movle	r3, #48	@ 0x30
 8005be6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bee:	1b92      	subs	r2, r2, r6
 8005bf0:	6122      	str	r2, [r4, #16]
 8005bf2:	f8cd a000 	str.w	sl, [sp]
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	aa03      	add	r2, sp, #12
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	f7ff fee7 	bl	80059d0 <_printf_common>
 8005c02:	3001      	adds	r0, #1
 8005c04:	d14a      	bne.n	8005c9c <_printf_i+0x1f0>
 8005c06:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0a:	b004      	add	sp, #16
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	f043 0320 	orr.w	r3, r3, #32
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	4832      	ldr	r0, [pc, #200]	@ (8005ce4 <_printf_i+0x238>)
 8005c1a:	2778      	movs	r7, #120	@ 0x78
 8005c1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	6831      	ldr	r1, [r6, #0]
 8005c24:	061f      	lsls	r7, r3, #24
 8005c26:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c2a:	d402      	bmi.n	8005c32 <_printf_i+0x186>
 8005c2c:	065f      	lsls	r7, r3, #25
 8005c2e:	bf48      	it	mi
 8005c30:	b2ad      	uxthmi	r5, r5
 8005c32:	6031      	str	r1, [r6, #0]
 8005c34:	07d9      	lsls	r1, r3, #31
 8005c36:	bf44      	itt	mi
 8005c38:	f043 0320 	orrmi.w	r3, r3, #32
 8005c3c:	6023      	strmi	r3, [r4, #0]
 8005c3e:	b11d      	cbz	r5, 8005c48 <_printf_i+0x19c>
 8005c40:	2310      	movs	r3, #16
 8005c42:	e7ad      	b.n	8005ba0 <_printf_i+0xf4>
 8005c44:	4826      	ldr	r0, [pc, #152]	@ (8005ce0 <_printf_i+0x234>)
 8005c46:	e7e9      	b.n	8005c1c <_printf_i+0x170>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	f023 0320 	bic.w	r3, r3, #32
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	e7f6      	b.n	8005c40 <_printf_i+0x194>
 8005c52:	4616      	mov	r6, r2
 8005c54:	e7bd      	b.n	8005bd2 <_printf_i+0x126>
 8005c56:	6833      	ldr	r3, [r6, #0]
 8005c58:	6825      	ldr	r5, [r4, #0]
 8005c5a:	6961      	ldr	r1, [r4, #20]
 8005c5c:	1d18      	adds	r0, r3, #4
 8005c5e:	6030      	str	r0, [r6, #0]
 8005c60:	062e      	lsls	r6, r5, #24
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	d501      	bpl.n	8005c6a <_printf_i+0x1be>
 8005c66:	6019      	str	r1, [r3, #0]
 8005c68:	e002      	b.n	8005c70 <_printf_i+0x1c4>
 8005c6a:	0668      	lsls	r0, r5, #25
 8005c6c:	d5fb      	bpl.n	8005c66 <_printf_i+0x1ba>
 8005c6e:	8019      	strh	r1, [r3, #0]
 8005c70:	2300      	movs	r3, #0
 8005c72:	6123      	str	r3, [r4, #16]
 8005c74:	4616      	mov	r6, r2
 8005c76:	e7bc      	b.n	8005bf2 <_printf_i+0x146>
 8005c78:	6833      	ldr	r3, [r6, #0]
 8005c7a:	1d1a      	adds	r2, r3, #4
 8005c7c:	6032      	str	r2, [r6, #0]
 8005c7e:	681e      	ldr	r6, [r3, #0]
 8005c80:	6862      	ldr	r2, [r4, #4]
 8005c82:	2100      	movs	r1, #0
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7fa facb 	bl	8000220 <memchr>
 8005c8a:	b108      	cbz	r0, 8005c90 <_printf_i+0x1e4>
 8005c8c:	1b80      	subs	r0, r0, r6
 8005c8e:	6060      	str	r0, [r4, #4]
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	6123      	str	r3, [r4, #16]
 8005c94:	2300      	movs	r3, #0
 8005c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c9a:	e7aa      	b.n	8005bf2 <_printf_i+0x146>
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	47d0      	blx	sl
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d0ad      	beq.n	8005c06 <_printf_i+0x15a>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	079b      	lsls	r3, r3, #30
 8005cae:	d413      	bmi.n	8005cd8 <_printf_i+0x22c>
 8005cb0:	68e0      	ldr	r0, [r4, #12]
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	4298      	cmp	r0, r3
 8005cb6:	bfb8      	it	lt
 8005cb8:	4618      	movlt	r0, r3
 8005cba:	e7a6      	b.n	8005c0a <_printf_i+0x15e>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4632      	mov	r2, r6
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	47d0      	blx	sl
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d09d      	beq.n	8005c06 <_printf_i+0x15a>
 8005cca:	3501      	adds	r5, #1
 8005ccc:	68e3      	ldr	r3, [r4, #12]
 8005cce:	9903      	ldr	r1, [sp, #12]
 8005cd0:	1a5b      	subs	r3, r3, r1
 8005cd2:	42ab      	cmp	r3, r5
 8005cd4:	dcf2      	bgt.n	8005cbc <_printf_i+0x210>
 8005cd6:	e7eb      	b.n	8005cb0 <_printf_i+0x204>
 8005cd8:	2500      	movs	r5, #0
 8005cda:	f104 0619 	add.w	r6, r4, #25
 8005cde:	e7f5      	b.n	8005ccc <_printf_i+0x220>
 8005ce0:	08005e91 	.word	0x08005e91
 8005ce4:	08005ea2 	.word	0x08005ea2

08005ce8 <memmove>:
 8005ce8:	4288      	cmp	r0, r1
 8005cea:	b510      	push	{r4, lr}
 8005cec:	eb01 0402 	add.w	r4, r1, r2
 8005cf0:	d902      	bls.n	8005cf8 <memmove+0x10>
 8005cf2:	4284      	cmp	r4, r0
 8005cf4:	4623      	mov	r3, r4
 8005cf6:	d807      	bhi.n	8005d08 <memmove+0x20>
 8005cf8:	1e43      	subs	r3, r0, #1
 8005cfa:	42a1      	cmp	r1, r4
 8005cfc:	d008      	beq.n	8005d10 <memmove+0x28>
 8005cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d06:	e7f8      	b.n	8005cfa <memmove+0x12>
 8005d08:	4402      	add	r2, r0
 8005d0a:	4601      	mov	r1, r0
 8005d0c:	428a      	cmp	r2, r1
 8005d0e:	d100      	bne.n	8005d12 <memmove+0x2a>
 8005d10:	bd10      	pop	{r4, pc}
 8005d12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d1a:	e7f7      	b.n	8005d0c <memmove+0x24>

08005d1c <_sbrk_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4d06      	ldr	r5, [pc, #24]	@ (8005d38 <_sbrk_r+0x1c>)
 8005d20:	2300      	movs	r3, #0
 8005d22:	4604      	mov	r4, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	602b      	str	r3, [r5, #0]
 8005d28:	f7fa ffde 	bl	8000ce8 <_sbrk>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d102      	bne.n	8005d36 <_sbrk_r+0x1a>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	b103      	cbz	r3, 8005d36 <_sbrk_r+0x1a>
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	200002e8 	.word	0x200002e8

08005d3c <memcpy>:
 8005d3c:	440a      	add	r2, r1
 8005d3e:	4291      	cmp	r1, r2
 8005d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d44:	d100      	bne.n	8005d48 <memcpy+0xc>
 8005d46:	4770      	bx	lr
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d52:	4291      	cmp	r1, r2
 8005d54:	d1f9      	bne.n	8005d4a <memcpy+0xe>
 8005d56:	bd10      	pop	{r4, pc}

08005d58 <_realloc_r>:
 8005d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5c:	4607      	mov	r7, r0
 8005d5e:	4614      	mov	r4, r2
 8005d60:	460d      	mov	r5, r1
 8005d62:	b921      	cbnz	r1, 8005d6e <_realloc_r+0x16>
 8005d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d68:	4611      	mov	r1, r2
 8005d6a:	f7ff bc4d 	b.w	8005608 <_malloc_r>
 8005d6e:	b92a      	cbnz	r2, 8005d7c <_realloc_r+0x24>
 8005d70:	f7ff fbde 	bl	8005530 <_free_r>
 8005d74:	4625      	mov	r5, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d7c:	f000 f81a 	bl	8005db4 <_malloc_usable_size_r>
 8005d80:	4284      	cmp	r4, r0
 8005d82:	4606      	mov	r6, r0
 8005d84:	d802      	bhi.n	8005d8c <_realloc_r+0x34>
 8005d86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d8a:	d8f4      	bhi.n	8005d76 <_realloc_r+0x1e>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4638      	mov	r0, r7
 8005d90:	f7ff fc3a 	bl	8005608 <_malloc_r>
 8005d94:	4680      	mov	r8, r0
 8005d96:	b908      	cbnz	r0, 8005d9c <_realloc_r+0x44>
 8005d98:	4645      	mov	r5, r8
 8005d9a:	e7ec      	b.n	8005d76 <_realloc_r+0x1e>
 8005d9c:	42b4      	cmp	r4, r6
 8005d9e:	4622      	mov	r2, r4
 8005da0:	4629      	mov	r1, r5
 8005da2:	bf28      	it	cs
 8005da4:	4632      	movcs	r2, r6
 8005da6:	f7ff ffc9 	bl	8005d3c <memcpy>
 8005daa:	4629      	mov	r1, r5
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff fbbf 	bl	8005530 <_free_r>
 8005db2:	e7f1      	b.n	8005d98 <_realloc_r+0x40>

08005db4 <_malloc_usable_size_r>:
 8005db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db8:	1f18      	subs	r0, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bfbc      	itt	lt
 8005dbe:	580b      	ldrlt	r3, [r1, r0]
 8005dc0:	18c0      	addlt	r0, r0, r3
 8005dc2:	4770      	bx	lr

08005dc4 <_init>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr

08005dd0 <_fini>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr
